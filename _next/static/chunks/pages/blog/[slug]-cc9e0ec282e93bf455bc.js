(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[22492],{82249:function(e,t,n){var a={"./2020-08-10-bucklescript-is-rebranding.mdx":42500,"./2020-08-28-new-rescript-logo.mdx":11239,"./2020-09-25-release-8-3-2.mdx":46200,"./2020-09-25-release-8-3.mdx":16038,"./2020-11-17-editor-support-custom-operators-and-more.mdx":42339,"./2020-11-26-editor-support-release-1-0.mdx":63810,"./2020-12-07-release-8-4.mdx":33356,"./2021-02-09-release-9-0.mdx":57009,"./2021-03-03-rescript-association-rebranding.mdx":46784,"./2021-05-07-release-9-1.mdx":9602,"./archive/2017-10-01-bucklescript-release-1-0.mdx":78318,"./archive/2017-10-02-bucklescript-release-1-4-2.mdx":18641,"./archive/2017-10-03-bucklescript-release-1-4-3.mdx":50839,"./archive/2017-10-04-bucklescript-release-1-5-0.mdx":39709,"./archive/2017-10-05-bucklescript-release-1-5-1.mdx":9688,"./archive/2017-10-06-bucklescript-release-1-5-2.mdx":48291,"./archive/2017-10-07-bucklescript-release-1-7-0.mdx":50637,"./archive/2017-10-08-bucklescript-release-1-7-4.mdx":45698,"./archive/2017-10-09-bucklescript-release-1-7-5.mdx":23860,"./archive/2018-03-13-a-small-step-for-bucklescript.mdx":67259,"./archive/2018-04-16-bucklescript-release-3-0-0.mdx":32466,"./archive/2018-05-21-bucklescript-release-3-1-0.mdx":14382,"./archive/2018-05-23-bucklescript-release-3-1-4.mdx":53146,"./archive/2018-07-17-bucklescript-release-4-0-0-pt1.mdx":32983,"./archive/2018-07-17-bucklescript-release-4-0-0-pt2.mdx":37538,"./archive/2018-11-13-arity-zero.mdx":51872,"./archive/2018-11-19-bucklescript-roadmap-q3-4-2018.mdx":43760,"./archive/2018-12-05-bucklescript-release-4-0-8.mdx":65090,"./archive/2019-01-07-bucklescript-release-4-0-17.mdx":2590,"./archive/2019-01-11-scalable.mdx":19630,"./archive/2019-03-01-feature-preview-variadic.mdx":61757,"./archive/2019-03-21-bucklescript-release-5-0.mdx":92605,"./archive/2019-03-31-bucklescript-release-6-0.mdx":47122,"./archive/2019-04-09-bucklescript-release-5-0-1.mdx":59057,"./archive/2019-04-22-bucklescript-release-5-0-4.mdx":13381,"./archive/2019-05-21-ffi-overview.mdx":91808,"./archive/2019-06-26-bucklescript-release-5-0-5.mdx":8972,"./archive/2019-08-12-bucklescript-release-5-1-0.mdx":23424,"./archive/2019-09-23-bucklescript-release-5-2-0.mdx":53027,"./archive/2019-10-16-another-encoding.mdx":42082,"./archive/2019-11-18-whats-new-in-7-pt1.mdx":8130,"./archive/2019-11-28-whats-new-in-7-pt2.mdx":25449,"./archive/2019-12-20-bucklescript-release-7-0-2.mdx":84218,"./archive/2020-02-04-bucklescript-release-7-1-0.mdx":49651,"./archive/2020-02-07-union-types-in-bucklescript.mdx":32357,"./archive/2020-02-20-loading-stdlib-in-memory.mdx":42206,"./archive/2020-03-12-bucklescript-release-7-2.mdx":14421,"./archive/2020-03-26-generalize-uncurry.mdx":42896,"./archive/2020-04-13-bucklescript-release-7-3.mdx":96698,"./archive/2020-05-06-a-story-of-exception-encoding.mdx":51889,"./archive/2020-05-06-state-of-reasonml-org-2020-q2-pt1.mdx":20619,"./archive/2020-05-11-state-of-reasonml-org-2020-q2-pt2.mdx":47929,"./archive/2020-05-12-state-of-reasonml-org-2020-q2-pt3.mdx":16754,"./archive/2020-05-15-a-story-of-lazy-encoding.mdx":49155,"./archive/2020-05-15-state-of-reasonml-org-2020-q2-pt4.mdx":98162,"./archive/2020-06-22-overview-of-new_encoding.mdx":68068,"./archive/2020-07-01-bucklescript-8-1-new-syntax.mdx":32954,"./archive/2020-07-06-a-note-on-bucklescripts-future-commitments.mdx":12649,"./archive/2020-07-17-bucklescript-release-8-1-1.mdx":36754,"./archive/2020-07-28-string-literal-types-in-reason.mdx":4629,"./archive/2020-08-03-bucklescript-release-8-2.mdx":12058};function i(e){var t=o(e);return n(t)}function o(e){if(!n.o(a,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return a[e]}i.keys=function(){return Object.keys(a)},i.resolve=o,e.exports=i,i.id=82249},22122:function(e,t,n){"use strict";function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}n.d(t,{Z:function(){return a}})},17375:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}n.d(t,{Z:function(){return a}})},7780:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return N},default:function(){return v}});var a=n(59682),i=n(29826),o=n(84486),r=n(43723),s=n(89620),l=n(45841),p=n(67294),c=(n(21668),n(94216)),u=n(70762),d=n(4285),m=n(94869),h=n(66243),g=n(66397),k=n(37177),f=" "+String.fromCharCode(183)+" ";function b(e){return p.createElement("div",{className:"block border-t border-gray-20"})}function w(e){var t=e.author,n=p.createElement("img",{className:"h-full w-full rounded-full",src:t.imgUrl});return p.createElement("div",{className:"flex items-center"},p.createElement("div",{className:"w-12 h-12 bg-berry-40 block rounded-full mr-3"},n),p.createElement("div",{className:"text-14 font-medium text-gray-95"},p.createElement("a",{className:"hover:text-gray-80",href:"https://twitter.com/"+t.twitter,rel:"noopener noreferrer",target:"_blank"},t.fullname),p.createElement("div",{className:"text-gray-60"},t.role)))}function y(e){var t=e.date,n=e.author,a=e.co_authors,i=e.title,o=e.category,r=e.description,m=e.articleImg,g=c.Z(t),k=d.zo([n],a);return p.createElement("div",{className:"flex flex-col items-center"},p.createElement("div",{className:"w-full max-w-740"},p.createElement("div",{className:"text-gray-60 text-lg mb-5"},void 0!==o?p.createElement(p.Fragment,void 0,o,f):null,l.FC.toDayMonthYear(g)),p.createElement("h1",{className:s.H1.$$default},i),h.k7(r,null,(function(e){return""===e?p.createElement("div",{className:"mb-8"}):p.createElement("div",{className:"my-8 text-gray-95"},p.createElement(u.p2.make,{children:e}))})),p.createElement("div",{className:"flex flex-col md:flex-row mb-12"},d.UI(k,(function(e){return p.createElement("div",{key:e.username,className:"mt-4 md:mt-0 md:ml-8 first:ml-0",style:{minWidth:"8.1875rem"}},p.createElement(w,{author:e}))})))),void 0!==m?p.createElement("div",{className:"-mx-8 sm:mx-0 sm:w-full bg-gray-5-tr md:mt-24"},p.createElement("img",{className:"h-full w-full object-cover",style:{maxHeight:"33.625rem"},src:m})):p.createElement("div",{className:"max-w-740 w-full"},p.createElement(b,{})))}function v(e){var t,s=e.path,l=n(82249)("./"+s),c=s.startsWith("archive/"),d=l.default,f=k.Jx(function(e){return"object"===typeof e.frontmatter?e.frontmatter:{}}(d)),w=p.createElement(d,{}),v=c?p.createElement("div",{className:"mb-10"},p.createElement(u.uU.make,{children:p.createElement(u.P.make,{children:null},p.createElement("span",{className:"font-bold"},"Important: "),"This is an archived blog post, kept for historical reasons. Please note that this information might be outdated.")})):null;if(0===f.TAG){var N=f._0,x=N.description,_=N.title,C={title:_+" | ReScript Blog",ogImage:h.tj(g.UA(N.previewImg),a.PV)},S=null===x?void 0:g.G(x);void 0!==S&&(C.description=S),t=p.createElement("div",{className:"w-full"},p.createElement(o.S,C),p.createElement("div",{className:"mb-10 md:mb-20"},p.createElement(y,{date:N.date,author:N.author,co_authors:N.co_authors,title:_,description:null===x?void 0:g.G(x),articleImg:g.UA(N.articleImg)})),p.createElement("div",{className:"flex justify-center"},p.createElement("div",{className:"max-w-740 w-full"},v,w,p.createElement("div",{className:"mt-12"},p.createElement(b,{}),p.createElement("div",{className:"pt-20 flex flex-col items-center"},p.createElement("div",{className:"text-3xl sm:text-32 text-center text-gray-95 font-medium"},"Want to read more?"),p.createElement(r.rU.make,{href:"/blog",children:p.createElement("a",{className:"text-fire hover:text-fire-70"},"Back to Overview",p.createElement(i.ol.make,{className:"ml-2 inline-block"}))}))))))}else t=p.createElement("div",void 0,p.createElement(u.uU.make,{children:null},p.createElement("h2",{className:"font-bold text-gray-95 text-28 mb-2"},"Could not parse file '_blogposts/"+s+".mdx'"),p.createElement("p",void 0,"The content of this blog post will be displayed as soon as all\n            required frontmatter data has been added."),p.createElement("p",{className:"font-bold mt-4"},"Errors:"),f._0));return p.createElement(m.S,{children:t})}var N=!0},53254:function(e,t,n){"use strict";n.d(t,{Z:function(){return i}});var a=n(67294);var i=function(e){var t=e.src,n=e.withShadow,i=e.caption,o=void 0!==n&&n?"shadow-md":"";return a.createElement("div",{className:"mt-8 mb-12 md:-mx-16"},a.createElement("a",{href:t,rel:"noopener noreferrer",target:"_blank"},a.createElement("img",{className:"w-full "+o,src:t})),void 0!==i?a.createElement("div",{className:"mt-4 text-14 text-gray-60 md:ml-16"},i):null)}},94869:function(e,t,n){"use strict";n.d(t,{S:function(){return p}});var a=n(60739),i=n(67294),o=n(8600),r=n(70762),s=n(88200),l=n(66397);var p=function(e){var t=e.components,n=e.children,p=void 0!==t?l.xt(t):r.rH,c=i.useState((function(){return!1}));return i.createElement(i.Fragment,void 0,i.createElement("div",{className:"mt-4 xs:mt-16"},i.createElement("div",{className:"text-gray-80"},i.createElement(s.S,{overlayState:c}),i.createElement("div",{className:"flex xs:justify-center overflow-hidden pb-48"},i.createElement("main",{className:"mt-16 min-w-320 lg:align-center w-full px-4 md:px-8 max-w-1280 "},i.createElement(a.zt.make,{components:p,children:n}))),i.createElement(o.S,{}))))}},42500:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"We're pleased to announce that BuckleScript is getting a brand new name: ",(0,r.kt)("strong",{parentName:"p"},"ReScript"),"."),(0,r.kt)("h2",{id:"history--summary"},"History & Summary"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"OCaml")," is a typed FP language compiling to bytecode and native code."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Js_of_ocaml")," is based on OCaml and compiles to JavaScript for OCaml users."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"BuckleScript")," is a fork of OCaml that also outputs JavaScript, optimized (features, JS interoperability, output, build tools) for JS developers rather than OCaml developers."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Reason")," is an alternative, JS-looking syntax layer over OCaml, plus extra tools. Reason used 1. BuckleScript to produce JavaScript output and 2. OCaml to produce native output. Most of the community focused on the former usage."),(0,r.kt)("li",{parentName:"ul"},"Reason and BuckleScript shared most teammates, who wanted to double down on the JS use-case."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"ReScript"),", thus born, is the new branding for BuckleScript that reimplements or cleans up Reason's syntax, tools, ecosystem & docs into a vertically integrated experience."),(0,r.kt)("li",{parentName:"ul"},"Reason project will continue serving its purpose of a syntax layer for native OCaml. Some folks might use Reason with Js_of_ocaml to output JS code.")),(0,r.kt)("h2",{id:"community-situation"},"Community Situation"),(0,r.kt)("p",null,"BuckleScript started with the idea that ",(0,r.kt)("strong",{parentName:"p"},"JavaScript programmers deserved a great typed language with a fast and lean toolchain"),". This idea took root and, over the years, we've gradually accomplished feats such as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a state of the art compiled JavaScript output that rivals hand-written JS,"),(0,r.kt)("li",{parentName:"ul"},"a fast & reliable toolchain much needed in front-end and Node development,"),(0,r.kt)("li",{parentName:"ul"},"various JS interop features that spawned an ecosystem of well typed libraries,"),(0,r.kt)("li",{parentName:"ul"},"a production-ready standard library,"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"/blog/bucklescript-8-1-new-syntax"}),"and recently"),", a fresh syntax made by a major contributor of Reason's old syntax.")),(0,r.kt)("p",null,"These developments have attracted many people into our community. But one bigger challenge persisted: newcomers dropped out at the sheer amount of extra incongruent tools and learning overhead from having to understand OCaml concepts, Reason concepts, and BuckleScript's concepts. Take, for example, what's required to make a React app using BuckleScript:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Knowledge of React."),(0,r.kt)("li",{parentName:"ul"},"Knowledge of JS."),(0,r.kt)("li",{parentName:"ul"},"Knowledge of BuckleScript's specific bindings to React (that we've tried hard to keep to a minimum)."),(0,r.kt)("li",{parentName:"ul"},"Knowledge of OCaml idioms, which leaked through BuckleScript."),(0,r.kt)("li",{parentName:"ul"},"Knowledge of BuckleScript's JS interop and the build system."),(0,r.kt)("li",{parentName:"ul"},"Knowledge of the Reason syntax."),(0,r.kt)("li",{parentName:"ul"},"Avoiding the distractions of OCaml and Reason's unrelated, native-oriented build tools, package manager, etc.")),(0,r.kt)("p",null,"Ironically, the more documentation we pile up, the more mental overhead newcomers suffered. During the meetups, we've frequently seen folks' enthusiasm crushed at the sheer prospect of making a web app while keeping 5+ tabs' worth of documentations open. This was discouraging for everyone."),(0,r.kt)("p",null,"The adoption barrier is real, and it's about time we finally solve it."),(0,r.kt)("h2",{id:"the-rebranding"},"The Rebranding"),(0,r.kt)("p",null,"Today, we'll start to truly unify the various BuckleScript-related projects under the ReScript umbrella. This includes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The compiler, build system and the new syntax unified under a single installation."),(0,r.kt)("li",{parentName:"ul"},"Doubling down on editor tooling for ReScript usage."),(0,r.kt)("li",{parentName:"ul"},"A single documentation site (this one), which unifies all the docs and greatly trims down on redundant and stale info."),(0,r.kt)("li",{parentName:"ul"},"Streamlined communication through said website, a ",(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"https://forum.rescript-lang.org"}),"forum")," and a new ",(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"http://twitter.com/rescriptlang"}),"Twitter"),"."),(0,r.kt)("li",{parentName:"ul"},"The renaming of various tools, always in a backward-compatible way.")),(0,r.kt)("p",null,"In short, all JS-related concepts previously under disparate Reason and BuckleScript ecosystems are now called ReScript. Previously, due to the messy situation, most real-world BuckleScript adoption came from a few heroic community members suffering through the technical and social risk of spreading our tech to their coworkers. From today onward, you can simply tell to your coworkers: ",(0,r.kt)("strong",{parentName:"p"},'"this is ReScript"'),", and point to them a clear starting point."),(0,r.kt)("p",null,"It's worth emphasizing that while this rebranding seems disruptive, it's mostly a bunch of name changes for the same tech. The Q&A below addresses some of the worries on existing code."),(0,r.kt)("h2",{id:"q--a"},"Q & A"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"What's that recently released BuckleScript syntax called?")),(0,r.kt)("p",null,"There's no dedicated name for the syntax anymore. It's simply called the ReScript syntax. The extension is ",(0,r.kt)("inlineCode",{parentName:"p"},".res")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".resi"),". Existing tools operating on ",(0,r.kt)("inlineCode",{parentName:"p"},".ml"),", ",(0,r.kt)("inlineCode",{parentName:"p"},".mli"),", ",(0,r.kt)("inlineCode",{parentName:"p"},".re")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".rei")," continue working."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Will there be a migration script to gradually convert our code to the new syntax?")),(0,r.kt)("p",null,"Yes. See our ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"/docs/manual/latest/migrate-from-bucklescript-reason"}),"migration page"),". You can mix and match old and new code for a smoother transition."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Will BuckleScript (now ReScript) break my existing code?")),(0,r.kt)("p",null,"No. The new syntax & tools sit alongside the existing code. We ",(0,r.kt)("strong",{parentName:"p"},"won't")," remove OCaml and Reason support from ReScript for a long time."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"What's the editor tooling story?")),(0,r.kt)("p",null,"Much more streamlined now! See our ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"/docs/manual/latest/editor-plugins"}),"Editor Plugins")," page."),(0,r.kt)("p",null,"Reason-language-server will continue working as-is for existing usage. We as first party don't work on ocaml's language server."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Will I be able to continue writing OCaml/Reason and compile to JS using BuckleScript in the future?")),(0,r.kt)("p",null,"It follows from our previous answer that yes, you will still be able to. Though community-wise, we're encouraging the new syntax and tools."),(0,r.kt)("p",null,"The compiler will also continue to acquire upstream OCaml features when relevant."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Will the new syntax prompt the move to a non-OCaml AST?")),(0,r.kt)("p",null,"No, since that'd break existing ppxes (e.g. internationalization, graphql). If we feel the need to adopt a new AST in the future, it'll again be purely additive."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Will we have 3 syntaxes to worry about?")),(0,r.kt)("p",null,"The plan is to emphasize the new syntax and focus our tooling around it. It'll be confusing to temporarily have different syntaxes in the same codebase, but that's the cost of a proper migration support. We hope this is transient; it's darkest before the dawn."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"How do we address the fragmentation of the community by the new syntax?")),(0,r.kt)("p",null,"Folks who have been in the community for a while know that there have always been opposing philosophies regarding newcomer funneling, tooling emphasis, library preferences, etc., due to differing cultures."),(0,r.kt)("p",null,"Rather, it's more accurate to say a few pieces of awkwardly shared infrastructure held opposing forces together. This is true when Reason spun off from OCaml's engineering, and true when BuckleScript entered the picture."),(0,r.kt)("p",null,"We can't realistically always release new features that are a compromise of various philosophies, but that's exactly what we've been trying to do for the past few years. BuckleScript's reimplementation of the Reason syntax is a departure from that (much tighter integration with the compiler, more JavaScript/TypeScript-friendly philosophy, fewer compromises, faster, less buggy). We believe that its quality speaks for said departure."),(0,r.kt)("p",null,"The ReScript community will comprise of the majority of the old Reason community, most of which focused on the BuckleScript part already. The remainder of the Reason community still exists and will now focus on their existing use-case better."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"The new changes make me worried about the future support I'm going to receive from the team.")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Retrospective edit, in 2021"),": suffice to day that we've been doing well =)."),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"Thank you for your support and keep shipping. A brighter future awaits us!"),(0,r.kt)("p",null,"Stay safe,"),(0,r.kt)("p",null,"The ReScript team (Hongbo, Cheng, Cristiano, Maxim, Patrick, Ricky)."))}l.isMDXComponent=!0,l.frontmatter={author:"rescript-team",date:"2020-08-10",badge:"roadmap",title:"BuckleScript & Reason Rebranding",description:"A new unified experience for the platform",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/2020-08-10-bucklescript-is-rebranding.mdx"}},11239:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return p}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=n(53254),l=(o.createElement,{});function p(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"why-the-rebranding"},"Why the Rebranding?"),(0,r.kt)("p",null,"ReScript is the evolution and fusion of Reason and BuckleScript. As we're a design-minded community, we'd like to convey this new identity not only through new technical changes as we've done so far, but also through a proper, more professionally crafted logo, color scheme and font. At the same time, we'd like to do so while recalling our roots."),(0,r.kt)("p",null,"Here it is!"),(0,r.kt)(s.Z,{withShadow:!1,src:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1598616442/Reason%20Association/rescript-lang.org/ReScript-1_ximg7u.jpg",caption:"Comparison between the Reason, BuckleScript and ReScript logos",mdxType:"Image"}),(0,r.kt)("p",null,"The old Reason and BuckleScript logo had many limitations:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The icons didn't really work well on round Social Media profile images (or round shapes at all)."),(0,r.kt)("li",{parentName:"ul"},"There's no guideline on how the logo works inverted, or on colored background."),(0,r.kt)("li",{parentName:"ul"},"The large red rectangle makes it difficult to balance the logo with other elements."),(0,r.kt)("li",{parentName:"ul"},"The buckle and belt were a bit too literal and did not convey much.")),(0,r.kt)("p",null,"The new logo addresses all these and more:"),(0,r.kt)(s.Z,{withShadow:!1,src:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1598616442/Reason%20Association/rescript-lang.org/ReScript-2_xp3fu4.jpg",caption:"Logo comparison on social media",mdxType:"Image"}),(0,r.kt)("h2",{id:"creating-meaning-through-simple-shapes"},"Creating Meaning Through Simple Shapes"),(0,r.kt)("p",null,"A minimal logo design is achieved by putting aside all distractions while focusing on legibility, meaning and small details like clear lines, interesting perspective and depth."),(0,r.kt)(s.Z,{withShadow:!1,src:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1598616442/Reason%20Association/rescript-lang.org/ReScript-4_un4vbh.jpg",caption:"ReScript logo variations and usage examples",mdxType:"Image"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},'The letter "r"'),", composed of two shapes, is inspired by Albers, a german-born American Bauhaus artist and typographer.\xa0An object should be simple, beautiful, functional and accessible for everyone - a statement which applies to ReScript's principles perfectly."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"I/O"),": The rectangle and circle represent the input / output, recalling the digital nature of a program."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"The red app-shaped background")," references the vibrant, playful applications our developers are empowered to create with ReScript."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"The Logotype"),'  ("rescript") complements the brand mark with its clean look and its embrace of technology while retaining a functional look.'),(0,r.kt)("p",null,"We'd like to position ReScript to be a community of product-first developers who care about the fit & finish of their work, while keeping an eye on the quality of their engineering. This interplay of design and engineering is a hard-to-achieve but beautifully worthwhile sweet spot that's frequently been missing in the programmer community; our vibrant logo is our renewed symbolic step toward this mission. Come along with us on our journey!"),(0,r.kt)("h2",{id:"next-steps"},"Next Steps"),(0,r.kt)("p",null,"In the next few weeks, we will gradually roll out our new brand identity across our official communication platforms. We'll also provide marketing material and assets on our ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"/brand"}),"brand assets page")," for our users."),(0,r.kt)("p",null,"We hope you enjoyed our new design article. In the future, we're hoping to interleave our technical releases with a few design and UX-oriented posts. Stay tuned!"),(0,r.kt)("h2",{id:"about-the-designer--creator"},"About the Designer / Creator"),(0,r.kt)("p",null,(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://bettystein.com/"}),"Bettina Steinbrecher"),"\xa0is a freelance designer and brand consultant, specialising in digital products and brands, based in Vienna. Previously she has been a Digital Designer and later on Head of Brand Design at\xa0",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://runtastic.com/"}),"Adidas Runtastic"),", where she led major design efforts in the visual brand developing processes before and during the Runtastic / Adidas acquisition. She is now working as a freelance designer."),(0,r.kt)("p",null,"She has been involved in our design processes since the inception of the\xa0",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://rescript-association.org"}),"ReScript Association"),"\xa0in 2018, and was responsible for all the user-facing websites such as\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"reasonml.org"),"\xa0(now\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"rescript-lang.org"),") and rescript-association.org. She also created the new logo of the ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://ocaml-sf.org/"}),"OCaml Software Foundation"),"."))}p.isMDXComponent=!0,p.frontmatter={author:"made_by_betty",date:"2020-08-27",title:"A New Logo for ReScript",previewImg:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1598616442/Reason%20Association/rescript-lang.org/Art-3-rescript-launch_ovoibg.jpg",articleImg:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1598616442/Reason%20Association/rescript-lang.org/ReScript-3_by4q2u.jpg",description:"Today, our resident designer Bettina is unveiling to us the fresh new ReScript branding we've been long waiting for. We hope you're as excited about the result as us!\n",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/2020-08-28-new-rescript-logo.mdx"}},46200:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"ReScript is a soundly typed language with an optimizing compiler focused on the JS platform.\nIt's focused on type safety, performance and JS interop. It used to be called BuckleScript."),(0,r.kt)("p",null,(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://www.npmjs.com/package/bs-platform/v/8.3.0"}),"ReScript@8.3")," is now available for testing, you can try it via"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"npm i bs-platform@8.3.1\n")),(0,r.kt)("p",null,"Following the ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"/blog/release-8-3"}),"previous post"),", in this post we will go through\nthe enhancement over the build system."),(0,r.kt)("h2",{id:"performance-enhancement"},"Performance enhancement"),(0,r.kt)("p",null,"The underlying build engine for ",(0,r.kt)("inlineCode",{parentName:"p"},"bsb")," is ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://ninja-build.org/"}),"ninja"),", it is famous for\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://www.aosabook.org/en/posa/ninja.html"}),"being fast"),"\nto build large C++ repos."),(0,r.kt)("p",null,"In the last releases, we did lots of work for vertical integration into the bsb build chain.\nFor example, we replaced the dynamic dependency parser with a minimal specialized one for bsb.\nwe also removed the static dependencies parser which is only used for parsing C++ compiler output."),(0,r.kt)("p",null,"Thanks to various other low-level improvements, the final outcome is quite impressive.\nFor example, The binary size for ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/ninja-build/ninja/releases/tag/v1.10.1"}),"Mac platform")," is 270 KB\nwhile our vendored version is only 136KB. This is a non-trivial gain given that ninja is minimalist and already\noptimized by top-level C++ experts."),(0,r.kt)("p",null,"Note such vertical integration not only brings better performance, smaller sizes, it also brings new features"),(0,r.kt)("h2",{id:"build-system-enhancements-for-editor-diagnostics"},"Build system enhancements for editor diagnostics"),(0,r.kt)("p",null,"When people are coding in their favorite editors, they expect to see syntax and type errors in real-time.\nThere are multiple ways to achieve this. The most reliable way is to always invoke the build system whenever the user saves a file. Due to not having an in-memory cache, our build system is very reliable. However we didn't yet optimize the build system for live feedback in editors.\nwhat syntax errors, type checking errors do they have when editing? There are multiple ways to achieve this, the most easy\nand reliable way is to always invoke the build system whenever the user saves the files, since it's the same build system\nwithout any in-memory cache, the reliability is very high, however, there's several challenges to use the build system output as editor diagnostics."),(0,r.kt)("h3",{id:"the-build-systemcompiler-has-to-be-fast-to-deliver-real-time-feedback"},"The build system/compiler has to be fast to deliver real-time feedback"),(0,r.kt)("p",null,"Our build system is fast enough to deliver feedback for reasonable sized projects in less than 100ms.\nthanks to our previous ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"/blog/scalable"}),"hard work"),". We continue improving\nPushing the limits of performance in the build system allows us to provide real-time feedback in editors."),(0,r.kt)("h3",{id:"the-warnings-for-each-file-should-not-be-flushed-during-a-rebuild"},"The warnings for each file should not be flushed during a rebuild"),(0,r.kt)("p",null,"For a typical file based build system, if the file A is compiled successfully with some warnings, the rebuild will not build A anymore.\nThis is problematic if we use the build system output for editor diagnostics. Since the second build will not capture those warnings, we\ncould use some caching mechanism to cache previous build output. But\u2026 stateful systems are not reliable and come with a whole range of different problems."),(0,r.kt)("p",null,"To solve such a challenging problem, we did some innovations to co-ordinate the compiler and build system. When the file A is compiled with warnings,\nthe compiler will produce some marks to the build system, the build system will keep building but such marks are encoded in the build rules\nso that the second build will do the rebuild."),(0,r.kt)("p",null,"The benefit is two fold:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Rebuild will re-capture those warnings"),(0,r.kt)("li",{parentName:"ul"},"Rebuild will be fast since only those files with warnings get rebuilt, it will not trigger unnecessary builds since our build is ",(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"https://rescript-lang.org/blog/scalable"}),"content-based")," build system.")),(0,r.kt)("p",null,"The integration between compiler and build system is encoded in a specialized protocol. This makes it almost cost-free."),(0,r.kt)("h3",{id:"notifying-clients-through-compilerlog"},"Notifying clients through .compiler.log"),(0,r.kt)("p",null,"To get the build output, instead of communicating through IPC, we adopted a simple protocol. Whenever a build is done, we write the output to a file called ",(0,r.kt)("inlineCode",{parentName:"p"},".compiler.log"),".\nThis makes the editor integration build-system agnostic, it does not need talk to the build system directly."),(0,r.kt)("p",null,"It also makes our build tool work with other watchers including Facebook's ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://facebook.github.io/watchman/"}),"watchman"),".\nWatchman is  a more scalable watcher tool for some specific platforms and less memory hungry, however, we still need a watchman-client to get the output of triggered job.\nWe write the output to ",(0,r.kt)("inlineCode",{parentName:"p"},".compiler.log")," per each build, allowing clients to read compiler diagnostics when they want."),(0,r.kt)("h2",{id:"a-better-algorithm-for-removing-stale-outputs"},"A better algorithm for removing stale outputs"),(0,r.kt)("p",null,"Whenever we rename a file, e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"a.res")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"b.res"),", will lead to the output of ",(0,r.kt)("inlineCode",{parentName:"p"},"a.res")," being stale. Thanks to the deeper integration of the build system and compiler,\nwe employ a more advanced strategy to remove stale outputs in this release. Pruning stale outputs is done in the beginning of each build."),(0,r.kt)("p",null,"There are two ways of removing staled artifacts, the second one is introduced in this release:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Based on live analysis and prebuilt-in knowledge")),(0,r.kt)("p",null,"We scan ",(0,r.kt)("inlineCode",{parentName:"p"},"lib/bs")," directory and check some dangling cm{i,t,j,ti} files, if it does not exist in\nthe current build set, it is considered stale artifacts. If it is ",(0,r.kt)("inlineCode",{parentName:"p"},"cmt")," file, it would trigger some hooks of ",(0,r.kt)("inlineCode",{parentName:"p"},"genType"),", notably -cmt-rm."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Based on previous build logs\nWe store previous compilation stats.  If a file is in the previous compiler output, but no longer in the output of the new build, it is considered stale and can be removed.\nit is considered stale output which can be removed.")),(0,r.kt)("p",null,"In general, strategy two is more reliable and efficient."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We don't need to recompute the path since it is already done by the build system."),(0,r.kt)("li",{parentName:"ul"},"When we change the in-source build to out-source build, it will still do the pruning properly")),(0,r.kt)("p",null,"However, strategy one is easier for tooling like ",(0,r.kt)("inlineCode",{parentName:"p"},"genType"),". Not every tool has knowledge of the build system."),(0,r.kt)("p",null,"Sometimes a combination of both strategies is needed."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When removing .cm* files, we use the first strategy."),(0,r.kt)("li",{parentName:"ul"},"When removing generated javascript, we use strategy two,")),(0,r.kt)("p",null,"Happy Hacking!"))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2020-09-26",previewImg:null,title:"What's new in ReScript 8.3 (Part 2)",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/2020-09-25-release-8-3-2.mdx"}},16038:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return c}});var a,i=n(22122),o=n(17375),r=n(67294),s=n(3905),l=(r.createElement,a="CodeTab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",e)}),p={};function c(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"introduction"},"Introduction"),(0,s.kt)("p",null,"ReScript is a soundly typed language with an optimizing compiler focused on the JS platform.\nIt's focused on type safety, performance and JS interop. It used to be called BuckleScript."),(0,s.kt)("p",null,(0,s.kt)("a",(0,i.Z)({parentName:"p"},{href:"https://www.npmjs.com/package/bs-platform/v/8.3.0"}),"ReScript@8.3")," is now available for testing, you can try it via"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{}),"npm i bs-platform@8.3.0\n")),(0,s.kt)("p",null,"The changes are listed ",(0,s.kt)("a",(0,i.Z)({parentName:"p"},{href:"https://github.com/rescript-lang/rescript-compiler/blob/master/Changes.md#83"}),"here"),", this is a large release,  and we will go through some highlighted changes."),(0,s.kt)("h2",{id:"lightweight-ffi-attributes-without-bs-prefix"},"Lightweight FFI attributes without ",(0,s.kt)("inlineCode",{parentName:"h2"},"bs.")," prefix"),(0,s.kt)("p",null,"In this release, we make the ",(0,s.kt)("inlineCode",{parentName:"p"},"bs.")," prefix optional, this will make the FFI less verbose."),(0,s.kt)("p",null,"For example, the old externals for ",(0,s.kt)("inlineCode",{parentName:"p"},"readFileAsUtf8Sync")," used to be written like this"),(0,s.kt)(l,{labels:["ReScript","Reason (Old Syntax)","ML Syntax"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-res"}),'@bs.val @bs.module("fs")\nexternal readFileAsUtf8Sync: (string, @bs.as("utf8") _) => string = "readFileSync"\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-reason"}),'[@bs.val] [@bs.module "fs"]\nexternal readFileAsUtf8Sync: (string, [@bs.as "utf8"] _) => string =\n  "readFileSync";\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-ocaml"}),'external readFileAsUtf8Sync : string -> (_[@bs.as "utf8"]) -> string = "readFileSync" [@@bs.val] [@@bs.module "fs"]\n'))),(0,s.kt)("p",null,"It can now be simplified as"),(0,s.kt)(l,{labels:["ReScript","Reason (Old Syntax)","ML Syntax"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-res"}),'@val @module("fs") external readFileAsUtf8Sync: (string, @as("utf8") _) => string = "readFileSync"\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-reason"}),'[@val] [@module "fs"]\nexternal readFileAsUtf8Sync: (string, [@as "utf8"] _) => string =\n  "readFileSync";\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-ocaml"}),'external readFileAsUtf8Sync : string -> (_[@as "utf8"]) -> string = "readFileSync"\n[@@val] [@@module "fs"]\n'))),(0,s.kt)("p",null,"Note almost all previous attributes with ",(0,s.kt)("inlineCode",{parentName:"p"},"bs.xx")," can be simplified as ",(0,s.kt)("inlineCode",{parentName:"p"},"xx"),"\nwith the exception of the following two that don't have abbreviations:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"bs.send.pipe")," : this attribute was deprecated in favor of ",(0,s.kt)("inlineCode",{parentName:"p"},"bs.send"),"; you can still use the existing one for backward compatibility.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"bs.splice")," : this attribute was deprecated in favor of ",(0,s.kt)("inlineCode",{parentName:"p"},"bs.variadic"),"; you can still use the existing one for\nbackward compatibility."))),(0,s.kt)("h2",{id:"default-import-in-es6-support"},"default import in Es6 support"),(0,s.kt)("p",null,"If you use es6 module output, the default bindings will be compiled properly now:"),(0,s.kt)(l,{labels:["ReScript","Reason (Old Syntax)","ML Syntax"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-res"}),'@module("hello") external input: string => string = "default"\n\nlet a = input("hello")\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-reason"}),'[@module "hello"] external input: string => string = "default";\n\nlet a = input("hello");\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-ocaml"}),'external input : string -> string = "default" [@@module "hello"]\n\nlet a = input "hello"\n'))),(0,s.kt)("p",null,"Will now be compiled properly under es6 format as below:"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-js"}),'import Hello from "hello";\nvar a = Hello("hello");\n')),(0,s.kt)("h2",{id:"customized-js-file-extension-support"},"Customized js file extension support"),(0,s.kt)("p",null,"Now user can pick up their js file extension support per module format:"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-json"}),'  "package-specs": [{\n    "module": "es6",\n    "suffix": ".mjs"\n  },{\n    "module": "commonjs",\n    "suffix": ".cjs"\n  }],\n\n')),(0,s.kt)("h2",{id:"more-flexible-filename-support"},"More flexible filename support"),(0,s.kt)("p",null,"To have better integration with other ",(0,s.kt)("a",(0,i.Z)({parentName:"p"},{href:"https://github.com/rescript-lang/rescript-compiler/issues/4624"}),"JS infrastructures"),",\nfor example, Next.js/React Native, we allow file names like ",(0,s.kt)("inlineCode",{parentName:"p"},"404.res"),",\n",(0,s.kt)("inlineCode",{parentName:"p"},"Button.Android.res")," so that it can just be picked up by those tools"),(0,s.kt)("h2",{id:"better-type-based-inference-for-pattern-let-abc--value"},"Better type based inference for pattern ",(0,s.kt)("inlineCode",{parentName:"h2"},"let {a,b,c} = value")),(0,s.kt)("p",null,"Previously, for code like this:"),(0,s.kt)(l,{labels:["ReScript","Reason (Old Syntax)","ML Syntax"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-res"}),"module N = {\n  type t = {x: int}\n}\n\nlet f = (u: N.t) => {\n  let {x} = u\n  x + 1\n} /* type error */\n")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-reason"}),"module N = {\n  type t = {x: int};\n};\n\nlet f = (u: N.t) => {\n  let {x} = u;\n  x + 1;\n}; /* type error */\n")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-ocaml"}),"module N = struct\n    type t = {\n        x : int\n    }\nend\n\nlet f (u : N.t) =\n    let {x } = u in x + 1 (* type error *)\n"))),(0,s.kt)("p",null,"You will get a type error"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{}),"Error: Unbound record field x\n")),(0,s.kt)("p",null,"However, since the compiler already knows the type of ",(0,s.kt)("inlineCode",{parentName:"p"},"u"),", it is capable of looking up the label ",(0,s.kt)("inlineCode",{parentName:"p"},"x")," properly.\nIn this release, we make the original code style work out of the box without a work-around such as adding a module prefix\nlike ",(0,s.kt)("inlineCode",{parentName:"p"},"let {N.x} = ..")),(0,s.kt)("h2",{id:"build-system-enhancement"},"Build system enhancement"),(0,s.kt)("p",null,"A lot of work is put in improving the build system, we will expand on this topic in the next post!"),(0,s.kt)("p",null,"Happy Hacking!"))}c.isMDXComponent=!0,c.frontmatter={author:"hongbo",date:"2020-09-25",previewImg:null,title:"What's new in ReScript 8.3 (Part 1)",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/2020-09-25-release-8-3.mdx"}},42339:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return p}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905);var s=function(e){var t=e.src,n=e.caption;return o.createElement("div",{className:"mt-8 mb-12 md:-mx-16"},o.createElement("div",{className:"flex w-full justify-center"},o.createElement("div",{className:"relative w-full h-full",style:{paddingTop:"56.25%",width:"640px"}},o.createElement("iframe",{className:"absolute top-0 left-0 w-full h-full",allowFullScreen:!0,src:t}))),void 0!==n?o.createElement("div",{className:"mt-4 text-14 text-gray-80 md:ml-16"},n):null)},l=(o.createElement,{});function p(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"upcoming-improvements"},"Upcoming Improvements"),(0,r.kt)("p",null,"As we're approaching the end of 2020, we'd like to inform our community of our remaining tasks for the year and early next year."),(0,r.kt)("h2",{id:"editor-integration"},"Editor Integration"),(0,r.kt)("p",null,"In the coming days, Cristiano and Cheng Lou will finally be ready to unveil the new VSCode ReScript experience, including diagnosis, autocompletion, jump to definition and type hints!"),(0,r.kt)(s,{withShadow:!0,src:"https://player.vimeo.com/video/477758754",mdxType:"Video"}),(0,r.kt)("p",null,"Patrick and Maxim will also help polishing the same feature set for Vim and Sublime Text."),(0,r.kt)("h2",{id:"compiler--build"},"Compiler & Build"),(0,r.kt)("p",null,"Hongbo continues to improve the compiler experience in monorepo-like setups. Expect your build to keep getting faster and more robust!"),(0,r.kt)("h2",{id:"docs"},"Docs"),(0,r.kt)("p",null,"Patrick is ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/reason-association/rescript-lang.org/pull/96"}),"rearranging the React documentation"),", and continues to improve the main documentation site with Cheng Lou."),(0,r.kt)("h2",{id:"syntax"},"Syntax"),(0,r.kt)("h3",{id:"custom-operators"},"Custom Operators"),(0,r.kt)("p",null,"The team had a few discussions surrounding the issue of the new syntax disallowing custom infix operators. Two of our values collided here:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We'd like our community to focus on product discussions rather than FP idiosyncrasies, given that it is a common issue that the shiny corners of FP suck the air out of discussions. Many FP and OOP communities (the latter with their own noisy design pattern bickering) have seen the same pattern ",(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"https://www.youtube.com/watch?v=46ypzDp2yDU&feature=emb_logo"}),"played over and over"),", and we'd like to avoid it. This was one of the primary motivations for the new ReScript syntax to disallow custom infix operators."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"However"),", we also care about supporting our existing users, and providing a smooth transition path toward newer code, as we've shown over the years. Alas, it is a fact of life that many existing codebase on the older syntax use custom infix operators.")),(0,r.kt)("p",null,"After much debates, we've decided to re-enable the ability for users to define their infix operators, the same way they did in the old syntax. Note that this is only meant to provide a good upgrade path; we do ",(0,r.kt)("strong",{parentName:"p"},"not")," encourage the usages of infix operators and we hope that the community is responsible enough using them."),(0,r.kt)("h3",{id:"simpler-interop"},"Simpler Interop"),(0,r.kt)("p",null,"We're considering a lightweight, familiar syntax sugar for ",(0,r.kt)("inlineCode",{parentName:"p"},"@bs.module")," for binding to JS code:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res"}),'@js\nimport {\n  dirname: string => string,\n  relative: (~from: string, ~to: string) => string\n} from "path"\n')),(0,r.kt)("p",null,"(Just a prototype syntax. Not set in stone.)"),(0,r.kt)("p",null,"This will mix well with the other existing ",(0,r.kt)("inlineCode",{parentName:"p"},"external")," features that aren't about importing a module, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"bs.send"),"."),(0,r.kt)("p",null,"We will consider providing an automatic translation of your current ",(0,r.kt)("inlineCode",{parentName:"p"},"@bs.module")," externals into the new format, so you can keep writing your bindings right now while expecting a potentially nice upgrade when the time comes."),(0,r.kt)("p",null,"Hopefully this encourages more usages of zero-cost JavaScript interop! We value this very much."),(0,r.kt)("h3",{id:"react-17"},"React 17"),(0,r.kt)("p",null,"Last but not least, there are some updates to JSX coming."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Although React 17 doesn't ship with any new features, there is ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html"}),"a new JSX transform"),". The new JSX improves bundle size, reduces the number of concepts you need to learn in React and improves the performance.")),(0,r.kt)("p",null,"ReScript will be the first to adopt the new JSX spec, which we've deemed to be solid enough. Our own Ricky has had a hand in drafting it."),(0,r.kt)("p",null,"It goes without saying that this will also have an upgrade path."),(0,r.kt)("h2",{id:"wrapping-up"},"Wrapping Up"),(0,r.kt)("p",null,"2020 has been rather weird; hopefully these end-of-year changes brighten you up a bit!"),(0,r.kt)("p",null,"Stay safe and keep shipping products!"))}p.isMDXComponent=!0,p.frontmatter={author:"maxim",date:"2020-11-17",previewImg:null,badge:"roadmap",title:"Editor Support, Custom Operators and More",description:"Update on what we're doing around the end of 2020 and early next year.\n",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/2020-11-17-editor-support-custom-operators-and-more.mdx"}},63810:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return c}});var a,i=n(22122),o=n(17375),r=n(67294),s=n(3905),l=(r.createElement,a="Image",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",e)}),p={};function c(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"editor-integration-has-finally-landed"},"Editor Integration Has Finally Landed"),(0,s.kt)("p",null,"Thank you so much for the wait!"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Here are all the features:")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Highlighting"),(0,s.kt)("li",{parentName:"ul"},"Formatting"),(0,s.kt)("li",{parentName:"ul"},"Diagnostics"),(0,s.kt)("li",{parentName:"ul"},"Jump to definition"),(0,s.kt)("li",{parentName:"ul"},"Autocompletion with markdown preview"),(0,s.kt)("li",{parentName:"ul"},"Type hint on hover")),(0,s.kt)("p",null,"We've doubled down on the depth of features instead of breath; hopefully these few crucial ones can stay fast and robust in your big production codebases!"),(0,s.kt)("p",null,"For VSCode, install ",(0,s.kt)("a",(0,i.Z)({parentName:"p"},{href:"https://marketplace.visualstudio.com/items?itemName=chenglou92.rescript-vscode"}),"rescript-vscode")," in your editor. For vim, install our ",(0,s.kt)("a",(0,i.Z)({parentName:"p"},{href:"https://github.com/rescript-lang/vim-rescript"}),"vim-rescript")," extension and configure it with your preferred setup (plain vim or with coc-vim)."),(0,s.kt)("p",null,"The plugins require ",(0,s.kt)("inlineCode",{parentName:"p"},"bs-platform@8.3.3"),", though also works with slightly older versions."),(0,s.kt)("p",null,"We'll keep on iterating on the polish of the plugins, and release better ",(0,s.kt)("a",(0,i.Z)({parentName:"p"},{href:"https://github.com/rescript-lang/rescript-sublime"}),"Sublime Text support")," soon."),(0,s.kt)("p",null,"Happy thanksgiving!"),(0,s.kt)(l,{withShadow:!1,src:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1606399722/Reason%20Association/rescript-lang.org/editor_support_article_rnlmxj.jpg",caption:"ReScript now offers autocompletion for VSCode and neovim (Sublime coming soon)",mdxType:"Image"}))}c.isMDXComponent=!0,c.frontmatter={author:"rescript-team",date:"2020-11-26",previewImg:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1606399719/Reason%20Association/rescript-lang.org/editor_support_preview_mcgpfo.jpg",articleImg:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1606399722/Reason%20Association/rescript-lang.org/editor_support_article_rnlmxj.jpg",badge:"release",title:"Editor Plugin for VSCode and Vim Officially Released!",description:"Type hints, jump to definition, error diagnostics, and more.\n",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/2020-11-26-editor-support-release-1-0.mdx"}},33356:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"ReScript is a soundly typed language with an optimizing compiler focused on the JS platform.\nIt's focused on type safety, performance and JS interop. It used to be called BuckleScript."),(0,r.kt)("p",null,(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://www.npmjs.com/package/bs-platform/v/8.4.2"}),"ReScript@8.4")," is now available for testing, you can try it via"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"npm i bs-platform@8.4.2\n")),(0,r.kt)("p",null,"The changes are listed ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/rescript-lang/rescript-compiler/blob/master/Changes.md#841"}),"here"),"."),(0,r.kt)("p",null,"We will go through some highlighted changes."),(0,r.kt)("h3",{id:"the-integrity-of-bsb--make-world"},"The integrity of ",(0,r.kt)("inlineCode",{parentName:"h3"},"bsb -make-world")),(0,r.kt)("p",null,"When we introduced ",(0,r.kt)("inlineCode",{parentName:"p"},"bsb")," as a build system around four years ago, we made the assumption that dependencies are immutable,\nso that once it's built for the first time, we don't need to rebuild it any more. The integrity of ",(0,r.kt)("inlineCode",{parentName:"p"},"bsb -make-world")," will be broken\nwhen the assumption does not hold."),(0,r.kt)("p",null,"In this release, we fix the integrity of ",(0,r.kt)("inlineCode",{parentName:"p"},"bsb -make-world")," which allows user to change the dependencies.\nThe fix is well implemented that people who don't do such modifications will not pay for it."),(0,r.kt)("p",null,"This is one of the highest desired feature request based on the\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/rescript-lang/rescript-compiler/issues/4361#issuecomment-739538789"}),"user feedback"),", so we will expand a bit here why it is tricky\nto implement it without compromising performance."),(0,r.kt)("p",null,"In ReScript compilation scheme, dependencies as packages are treated as a black box,\nchanges of dependencies should be ",(0,r.kt)("em",{parentName:"p"},"transitive"),". The is due to that we have cross module\noptimizations and the binary interface itself is a hash of its dependencies.\nSo for a package dependency chain: A -> B -> C, if A changes and B does not change, C still needs get rebuilt.\nBecause the intermediate output of B may still change due to the change of A.\nTo make things worse, each package comes with an installation process which is a shell script, so re-installation will make the\npackage look like freshly built."),(0,r.kt)("p",null,"In this release, we track the installation in the build graph as well, and we calculate the hash of the installation of dependencies and put it in the\ndependent's command line flags for building binary artifacts. Such strategy benefits in such aspects:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The calculation of the hash of installation is almost free since it is just one stat, we don't need track all dependencies' artifacts."),(0,r.kt)("li",{parentName:"ul"},"The introduction of such hashing does not appear in parsing, so that the changes of dependencies will never trigger re-parsing."),(0,r.kt)("li",{parentName:"ul"},"Once the package installation is a no-op, the transitive rebuild graph will be cut off so that we can save some unneeded rebuild."),(0,r.kt)("li",{parentName:"ul"},"When people make changes to the dependencies, if such changes don't change the package interface, it will not trigger the build of its dependents.")),(0,r.kt)("h3",{id:"introducing-pinned-dependencies"},"Introducing ",(0,r.kt)("inlineCode",{parentName:"h3"},"pinned-dependencies")),(0,r.kt)("p",null,"To make ",(0,r.kt)("inlineCode",{parentName:"p"},"bsb -make-world")," more practical for e.g. multi-package setups (",(0,r.kt)("inlineCode",{parentName:"p"},"lerna"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn workspaces"),", etc.), we introduced a new concept called ",(0,r.kt)("inlineCode",{parentName:"p"},"pinned-dependencies"),". A pinned dependency allows you to automatically rebuild packages that are pinned by a toplevel package, like your final webapp."),(0,r.kt)("p",null,"Please refer to our ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"/docs/manual/latest/build-pinned-dependencies"}),"pinned dependencies")," docs for more details."),(0,r.kt)("h3",{id:"more-robust-handling-of-removal-of-staled-output"},"More robust handling of removal of staled output"),(0,r.kt)("p",null,"When people delete or rename ReScript files, it will introduce dangling staled output, for example, renaming ",(0,r.kt)("inlineCode",{parentName:"p"},"src/A.res"),"\ninto ",(0,r.kt)("inlineCode",{parentName:"p"},"src/B.res")," will bring ",(0,r.kt)("inlineCode",{parentName:"p"},"src/A.cmi")," (and more intermediate outputs) stale. This is worse than it sounds like, suppose you have a\nlocal ",(0,r.kt)("inlineCode",{parentName:"p"},"src/List.res")," which shadows the stdlib's List. Now we remove it, it will introduce stale ",(0,r.kt)("inlineCode",{parentName:"p"},"List.cmi")," file, without the proper removal\nof such stale outptu, such stale ",(0,r.kt)("inlineCode",{parentName:"p"},"List.cmi")," file will break the integrity of the build."),(0,r.kt)("p",null,"In this release, we introduced a more robust algorithm that will always remove stale output before the build so\nthat such integrity is not broken."),(0,r.kt)("p",null,"Last but not the least, we continue improving the readability, debuggability of the ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/rescript-lang/rescript-compiler/pull/4858"}),"generated output")," : )"),(0,r.kt)("p",null,"Happy Hacking! -- Hongbo Zhang"))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2020-12-07",previewImg:null,badge:"release",title:"ReScript 8.4",description:"bsb improvements\n",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/2020-12-07-release-8-4.mdx"}},57009:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return c}});var a,i=n(22122),o=n(17375),r=n(67294),s=n(3905),l=(r.createElement,a="CodeTab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",e)}),p={};function c(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"introduction"},"Introduction"),(0,s.kt)("p",null,"We are happy to announce ReScript 9.0!"),(0,s.kt)("p",null,"ReScript is a robustly typed language that compiles to efficient and human-readable JavaScript. It comes with one of the fastest build toolchains and offers first class support for interoperating with ReactJS and other existing JavaScript code."),(0,s.kt)("p",null,"Use ",(0,s.kt)("inlineCode",{parentName:"p"},"npm")," to install the newest ",(0,s.kt)("a",(0,i.Z)({parentName:"p"},{href:"https://www.npmjs.com/package/bs-platform/v/9.0.1"}),"9.0.1 release")," with the following command:"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{}),"npm install bs-platform@9.0.1 --save-dev\n")),(0,s.kt)("p",null,"You can also try our new release in the ",(0,s.kt)("a",(0,i.Z)({parentName:"p"},{href:"/try"}),"Online Playground"),"."),(0,s.kt)("p",null,"In this post we will highlight the most notable changes. The full changelog for this release can be found ",(0,s.kt)("a",(0,i.Z)({parentName:"p"},{href:"https://github.com/rescript-lang/rescript-compiler/blob/master/Changes.md#90"}),"here"),"."),(0,s.kt)("h2",{id:"compiler-improvements"},"Compiler Improvements"),(0,s.kt)("h3",{id:"new-external-stdlib-configuration"},"New External Stdlib Configuration"),(0,s.kt)("p",null,"This is a long-awaited ",(0,s.kt)("a",(0,i.Z)({parentName:"p"},{href:"https://github.com/rescript-lang/rescript-compiler/pull/2171"}),"feature request"),"."),(0,s.kt)("p",null,"Our compiler comes with a set of stdlib modules (such as ",(0,s.kt)("inlineCode",{parentName:"p"},"Belt"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"Pervasives"),", etc.) for core functionality. Compiled ReScript code relies on the JS runtime version of these stdlib modules."),(0,s.kt)("p",null,"In previous versions, users couldn't ship their compiled JS code without defining a ",(0,s.kt)("inlineCode",{parentName:"p"},"package.json")," dependency on ",(0,s.kt)("inlineCode",{parentName:"p"},"bs-platform"),". Whenever a ReScript developer wanted to publish a package just for pure JS consumption / lean container deployment, they were required to use a bundler to bundle up their library / stdlib code, which made things way more complex and harder to understand."),(0,s.kt)("p",null,"To fix this problem, we introduced an ",(0,s.kt)("inlineCode",{parentName:"p"},"external-stdlib")," configuration that allows specifying a pre-compiled stdlib npm package (",(0,s.kt)("inlineCode",{parentName:"p"},"@rescript/std"),"). More details on how to use that feature can be found in our ",(0,s.kt)("a",(0,i.Z)({parentName:"p"},{href:"/docs/manual/latest/build-external-stdlib"}),"External Stdlib")," documentation."),(0,s.kt)("h3",{id:"less-bundle-bloat-when-adding-rescript"},"Less Bundle Bloat when Adding ReScript"),(0,s.kt)("p",null,'With each release we keep a close eye on generating code that is optimized for tree-shaking. We also believe that we reached a milestone where ReScript reliably produces output that has almost no impact on our final JS bundle-sizes (this is what we call our "zero-cost" philosophy).'),(0,s.kt)("p",null,"The bundled code is almost ReScript runtime free because our generated library code fits the tree-shaking principle really well. Tools like ",(0,s.kt)("inlineCode",{parentName:"p"},"esbuild")," can easily drop unnecessary code and make sure that the final code stays lean."),(0,s.kt)("p",null,"We made a small ",(0,s.kt)("a",(0,i.Z)({parentName:"p"},{href:"https://github.com/bobzhang/zero-cost-rescript"}),"demo repo")," and added the precompiled JS bundles to demonstrate what we've achieved. Check it out!"),(0,s.kt)("h3",{id:"improved-code-generation-for-pattern-matching"},"Improved Code Generation for Pattern Matching"),(0,s.kt)("p",null,"We fine-tuned our pattern matching engine to optimize the JS output even more. Here is an example of a pretty substantial optimization, based on ",(0,s.kt)("a",(0,i.Z)({parentName:"p"},{href:"https://github.com/rescript-lang/rescript-compiler/issues/4924"}),"this issue"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-res"}),"type test =\n  | NoArg\n  | AnotherNoArg\n  | OtherArg(int)\n\nlet test = x =>\n  switch x {\n  | NoArg => true\n  | _ => false\n  }\n")),(0,s.kt)("p",null,"The snippet above will compile to the following JS output:"),(0,s.kt)(l,{labels:["9.0 Output","8.4 Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-js"}),"function test(x){\n  return x === 0\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-js"}),'function test(x) {\n  if (typeof x === "number") {\n    return x === 0;\n  } else {\n    return false;\n  }\n}\n'))),(0,s.kt)("p",null,"As you can see, the 9.0 compiler removes all the unnecessary ",(0,s.kt)("inlineCode",{parentName:"p"},"typeof")," checks!"),(0,s.kt)("p",null,"This is possible because our optimizer will try to analyze several predicates and get rid of redundant ones. More diffs can be found ",(0,s.kt)("a",(0,i.Z)({parentName:"p"},{href:"https://github.com/rescript-lang/rescript-compiler/pull/4927/files?file-filters%5B%5D=.js"}),"here"),"."),(0,s.kt)("p",null,"Another important improvement is that we fixed the pattern match offset issue, which lead to the consequence that magic numbers will not be generated for complex pattern matches anymore."),(0,s.kt)("p",null,"For those interested in the details, here is a representative diff resulting from this cleanup:"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-diff"}),"function is_space(param){\n- var switcher = param - 9 | 0;\n- if (switcher > 4 || switcher < 0) {\n-    return switcher == 23 ;\n+ if (param > 13 || param < 9) {\n+    return param === 32;\n  } else {\n-    return switcher !== 2;\n+    return param != 11;\n  }\n}\n")),(0,s.kt)("h2",{id:"syntax-improvements"},"Syntax Improvements"),(0,s.kt)("h3",{id:"when---if"},(0,s.kt)("inlineCode",{parentName:"h3"},"when")," -> ",(0,s.kt)("inlineCode",{parentName:"h3"},"if")),(0,s.kt)("p",null,"Starting from 9.0, ",(0,s.kt)("a",(0,i.Z)({parentName:"p"},{href:"/docs/manual/latest/pattern-matching-destructuring#when-clause"}),(0,s.kt)("inlineCode",{parentName:"a"},"when")," clauses")," within a ",(0,s.kt)("inlineCode",{parentName:"p"},"switch")," statement will automatically convert to the ",(0,s.kt)("inlineCode",{parentName:"p"},"if")," keyword instead."),(0,s.kt)(l,{labels:["New (9.0)","Old (8.4)"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-res"}),'switch person1 {\n| Student({reportCard: {gpa}}) if gpa < 0.5 =>\n  Js.log("What\'s happening")\n| _ => () // do nothing\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-res"}),'switch person1 {\n| Student({reportCard: {gpa}}) when gpa < 0.5 =>\n  Js.log("What\'s happening")\n| _ => () // do nothing\n}\n'))),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"when")," keyword is deprecated. The syntax will continue supporting it and the formatter will automatically convert to ",(0,s.kt)("inlineCode",{parentName:"p"},"if"),", for a pain-free upgrade."),(0,s.kt)("h3",{id:"cleaner-polyvariant-syntax"},"Cleaner Polyvariant Syntax"),(0,s.kt)("p",null,"Polyvariants with invalid identifier names (e.g. names including hypens ",(0,s.kt)("inlineCode",{parentName:"p"},"-"),"), don't require any special escaping syntax anymore:"),(0,s.kt)(l,{labels:["New (9.0)","Old (8.4)"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-res"}),'type animation = [ #"ease-in" | #"ease-out" ]\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-res"}),'type animation = [ #\\"ease-in" | #\\"ease-out" ]\n'))),(0,s.kt)("p",null,"We introduced this change to allow easier interop with existing JS string enums. In pure ReScript code, we'd still recommend our users to stick with valid identifier names instead (e.g. ",(0,s.kt)("inlineCode",{parentName:"p"},"easeIn")," instead of ",(0,s.kt)("inlineCode",{parentName:"p"},"ease-in"),")."),(0,s.kt)("h2",{id:"breaking-changes"},"Breaking Changes"),(0,s.kt)("p",null,"This release comes with a minor breaking change that shouldn't have much impact on the upgrade of existing codebases."),(0,s.kt)("h3",{id:"nested-records-within-objects"},"Nested Records within Objects"),(0,s.kt)("p",null,"Previously, if you wrote ",(0,s.kt)("inlineCode",{parentName:"p"},'{"user": {age: 10}}'),", the inner record was interpreted as an object instead of a record (",(0,s.kt)("inlineCode",{parentName:"p"},'{"user": {"age": 10}}'),"); this is a byproduct of some internal interop transformation details; with the ReScript syntax, this went from understandable to confusing, so we're changing it so that the inner record is indeed now treated as a record. This is an obvious fix, but a breaking change if you were accidentally leveraging that nested record as object."),(0,s.kt)("p",null,"Here is a code example before and after the change. Note how the ",(0,s.kt)("inlineCode",{parentName:"p"},"user")," record secretly turns into a ReScipt object in the previous version:"),(0,s.kt)(l,{labels:["9.0 Example","8.4 Example"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-res"}),'type user = {\n  age: int\n}\n\nlet data = {\n  "user": {\n    age: 1\n  }\n}\n\n// This is the way: `age` should be usable via record accessor\nlet age = data["user"].age\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-res"}),'type user = {\n  age: int\n}\n\nlet data = {\n  "user": {\n    age: 1\n  }\n}\n\n// This was the problem: The record implicitly turned\n// into a ReScript object (which is confusing)\nlet age = data["user"]["age"]\n'))),(0,s.kt)("p",null,"More discussions on this change can be found ",(0,s.kt)("a",(0,i.Z)({parentName:"p"},{href:"https://forum.rescript-lang.org/t/fixing-the-semantics-of-nested-objects-breaking-changes/976"}),"here"),"."),(0,s.kt)("h2",{id:"closing-note"},"Closing Note"),(0,s.kt)("p",null,"We only highlighted a few user-facing features, but there are also some pretty interesting internal changes happening right now."),(0,s.kt)("p",null,"For example, we are tinkering with the idea on using WASM to replace Camlp4, and we are also working on a generalized visitor pattern that doesn't require objects."),(0,s.kt)("p",null,"We will discuss these topics in a separate development post, but we are already excited about the new possibilities this will bring within the compiler toolchain."),(0,s.kt)("p",null,"Happy Hacking!"))}c.isMDXComponent=!0,c.frontmatter={author:"hongbo",date:"2021-02-09",previewImg:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1612974395/Reason%20Association/rescript-lang.org/compiler_release_9_0_szd11o.jpg",title:"ReScript 9.0",badge:"release",description:"Featuring a new external stdlib configuration, some syntax improvements and a small breaking change for nested records.\n",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/2021-02-09-release-9-0.mdx"}},46784:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"a-small-change-for-our-association"},"A Small Change for our Association"),(0,r.kt)("p",null,"Last year, our platform rebranded from BuckleScript and Reason to ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"/blog/bucklescript-is-rebranding"}),"ReScript"),". The Reason Association however, due to administrative reasons, lagged behind in name change until recently."),(0,r.kt)("p",null,"Today, we are glad to announce that our organization is now known as the ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://rescript-association.org"}),(0,r.kt)("strong",{parentName:"a"},"ReScript Association")),"."),(0,r.kt)("p",null,"We will continue on our mission to support the development of the ReScript language while leveraging OCaml as its underlying foundation."),(0,r.kt)("h2",{id:"relation-to-rescript-the-project"},"Relation to ReScript the Project"),(0,r.kt)("p",null,"Founded in 2018, the ReScript Association provides a legal and financial foundation for many parts of ReScript. We\u2019re non-profit and independently funded by industrial partners, research institutions and individuals. Our board consists of three members, two of which are also on the ReScript core team (Patrick & Cristiano)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Here is some of our work you might recognize:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Reason Conf 2018 & 2019. Post-covid, we\u2019ll restart prioritizing these."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"https://rescript-lang.org"}),"rescript-lang.org"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"https://forum.rescript-lang.org"}),"Community forum")," & server."),(0,r.kt)("li",{parentName:"ul"},"ReScript related domains and ",(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"https://simpleanalytics.com/rescript-lang.org"}),"analytics data"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"https://github.com/rescript-association/genType"}),"genType\u2019s")," release automation."),(0,r.kt)("li",{parentName:"ul"},"Help maintaining editor related tools such as ",(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"https://github.com/rescript-lang/rescript-vscode"}),"rescript-vscode"),", ",(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"https://github.com/rescript-lang/vim-rescript"}),"vim-rescript")," and the underlying ",(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"https://github.com/rescript-lang/rescript-editor-support"}),"editor-support"),"."),(0,r.kt)("li",{parentName:"ul"},"Design & logo assets (together with our designer) for all of ReScript."),(0,r.kt)("li",{parentName:"ul"},"Helping out on upcoming ",(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"https://ocaml.org"}),"ocaml.org")," work."),(0,r.kt)("li",{parentName:"ul"},"Experimental tools like the upcoming doc generator."),(0,r.kt)("li",{parentName:"ul"},"Yearly reports for our donors and partners."),(0,r.kt)("li",{parentName:"ul"},"Setting up legal contracts, hiring contractors, paying invoices, doing accounting, etc.")),(0,r.kt)("h2",{id:"benefits-of-an-association"},"Benefits of an Association"),(0,r.kt)("p",null,"The Association provides a much needed layer of protection so that we can put liabilities onto an organization instead of individuals (a crucial safeguard when things go wrong and money is at risk). As an example, organizing the past conferences or any event past meetup sizes wouldn\u2019t have been realistic for single, legally unaccountable individuals."),(0,r.kt)("p",null,"We also take non-partisan ownership of some of ReScript\u2019s essential infrastructures listed above, so that ReScript can live on past individual bus factors."),(0,r.kt)("p",null,"Furthermore, we serve as a communication channel for our partners and donors."),(0,r.kt)("h2",{id:"donate"},"Donate"),(0,r.kt)("p",null,"High quality, long-term Open Source work doesn\u2019t come from some good words and pats on the back. While we do try to be efficient, past a certain point, big amounts of time and financial resources are needed to keep up the momentum for maintaining and developing the platform. To this end, we regularly raise donations to make sure that the running costs are covered, and Open Source contributors paid."),(0,r.kt)("p",null,"If your company relies on the ReScript platform for building commercial products, please consider supporting our efforts by ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://rescript-association.org/donate"}),"sending a donation"),". It\u2019s the best way to future proof your product\u2019s foundation. Alternatively, you can sponsor individual members like ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/sponsors/ryyppy/"}),"ryyppy")," on Github Sponsors."),(0,r.kt)("p",null,"We want to take this opportunity to thank our previous and active sponsors:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"https://tezos.foundation"}),"Tezos Foundation")," (2020-21)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"https://ahrefs.com"}),"Ahrefs")," (2019)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"https://ocaml-sf.org"}),"OCaml Software Foundation")," (2018-19)")),(0,r.kt)("p",null,"Your support allowed us to accomplish many of the work listed earlier. Thank you!"),(0,r.kt)("h2",{id:"extra-why-did-this-change-take-so-long"},"Extra: Why did this change take so long?"),(0,r.kt)("p",null,"We are an established non-profit organization under Austrian law, located in Vienna. We have legal obligations and can't just rename our organization as we please."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Here are a few things we had to consider:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We wrapped up our yearly donation reports and checked in with our partners regarding our new ReScript brand and roadmap. Our partners are satisfied with our plan!"),(0,r.kt)("li",{parentName:"ul"},"Contrary to our compiler, Austrian bureaucracy is not known for its speed. Thankfully, in parallel, we took this time to reach a couple of major milestones on rescript-lang.org."),(0,r.kt)("li",{parentName:"ul"},"We had to refactor our brand assets, rework the association site, hook up new domains, rename things while making sure nothing breaks, and communicate the goals within the ReScript team.")),(0,r.kt)("p",null,"Luckily, most of the challenging work is done! We only need to wait for legal authorities to verify the new amendments of our statutes."),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"The association rebranding and mission alignment took longer than expected, but was a worthwhile investment. The ReScript Association is now an integral part of the ReScript project, with all the aforementioned benefits."),(0,r.kt)("p",null,"For further updates, make sure to join our ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://forum.rescript-lang.org"}),"Forum"),", or follow ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://twitter.com/ReScriptAssoc"}),"@ReScriptAssoc")," & ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://twitter.com/rescriptlang"}),"@rescriptlang")," on Twitter!"))}l.isMDXComponent=!0,l.frontmatter={author:"rescript-association",date:"2021-03-03",previewImg:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1614782716/Reason%20Association/rescript-lang.org/ReScript_Rename_Header_kf10pl.jpg",title:"The ReScript Association",description:"After the rebranding of ReScript, its Reason Association has now followed through to become the ReScript Association.\n",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/2021-03-03-rescript-association-rebranding.mdx"}},9602:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return c}});var a,i=n(22122),o=n(17375),r=n(67294),s=n(3905),l=(r.createElement,a="CodeTab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",e)}),p={};function c(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"exciting-improvements-in-rescript-91"},"Exciting Improvements in ReScript 9.1"),(0,s.kt)("p",null,"Our recent few releases of ReScript contains ",(0,s.kt)("a",(0,i.Z)({parentName:"p"},{href:"https://github.com/rescript-lang/rescript-compiler/blob/3134392a364b70c9c172aa6c1dbaa1ac6580265d/Changes.md#91"}),"lots of improvements"),", among which are a few standout features we'd like to further promote. Hope you're as excited as we are about these! It goes without saying, our ",(0,s.kt)("a",(0,i.Z)({parentName:"p"},{href:"https://forum.rescript-lang.org/t/ann-rescript-vscode-1-1-1-released/1542/3"}),"updated editor plugin")," works with the new releases."),(0,s.kt)("h3",{id:"new-npm-package"},"New NPM Package"),(0,s.kt)("p",null,"We've finally moved from ",(0,s.kt)("a",(0,i.Z)({parentName:"p"},{href:"https://www.npmjs.com/package/bs-platform"}),"bs-platform")," to ",(0,s.kt)("a",(0,i.Z)({parentName:"p"},{href:"https://www.npmjs.com/package/rescript"}),"rescript"),"!"),(0,s.kt)("p",null,"This is mostly just a long overdue name change; the package's virtually identical. Apart from the renaming of our CLI."),(0,s.kt)("h3",{id:"cli-cleanup"},"CLI Cleanup"),(0,s.kt)("p",null,"We took the occasion of the NPM package move to also unify the binaries ",(0,s.kt)("inlineCode",{parentName:"p"},"bsc"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"bsb")," and their various commands into a single ",(0,s.kt)("inlineCode",{parentName:"p"},"rescript")," command:"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-sh"}),"\u276f rescript -help\nAvailable flags\n-v, -version  display version number\n-h, -help     display help\nSubcommands:\n    build\n    clean\n    format\n    convert\n    help\nRun rescript subcommand -h for more details,\nFor example:\n    rescript build -h\n    rescript format -h\nThe default `rescript` is equivalent to `rescript build` subcommand\n")),(0,s.kt)("p",null,"Here's a table of translation, if you're upgrading your script that is currently using ",(0,s.kt)("inlineCode",{parentName:"p"},"bsc")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"bsb"),":"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"bsc -format myFile.res"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"rescript format myFile.res")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"bsb"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"rescript build")," ","*"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"bsb -make-world"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"rescript build -with-deps")," ","*"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"bsb -w"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"rescript build -w")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"bsb -w -make-world"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"rescript build -w -with-deps")," ","*")),(0,s.kt)("p",null,"*"," ",(0,s.kt)("strong",{parentName:"p"},"However"),", we've gone even further to improve your experience; in most cases you won't need to invoke ",(0,s.kt)("inlineCode",{parentName:"p"},"build"),", nor ",(0,s.kt)("inlineCode",{parentName:"p"},"-with-deps")," anymore! Not only is ",(0,s.kt)("inlineCode",{parentName:"p"},"rescript")," an alias to ",(0,s.kt)("inlineCode",{parentName:"p"},"rescript build"),", it also smartly detects whether your dependencies are already built; if not, it builds them automatically."),(0,s.kt)("p",null,"This means that you can ditch your old ",(0,s.kt)("inlineCode",{parentName:"p"},"-make-world")," (now the explicit ",(0,s.kt)("inlineCode",{parentName:"p"},"-with-deps")," flag, for edge-case explicit usages). Just call ",(0,s.kt)("inlineCode",{parentName:"p"},"rescript")," and everything including dependencies will always be built! As performance is our highest priority, we've ensured that such extra detections does not slow down the build."),(0,s.kt)("h3",{id:"polymorphic-variants-for-numbers-and-strings"},"Polymorphic Variants for Numbers and Strings"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Drumrolls")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Poly variants like ",(0,s.kt)("inlineCode",{parentName:"li"},"#1"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"#42")," compile to JavaScript numbers."),(0,s.kt)("li",{parentName:"ul"},"Poly variants like ",(0,s.kt)("inlineCode",{parentName:"li"},"#hello"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"#world")," compile to JavaScript Strings.")),(0,s.kt)("p",null,"This is a feature many of you were probably waiting for. Now you can interop with a JavaScript value that's a limited set of numbers or strings:"),(0,s.kt)(l,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-res"}),'let secret = #42\n\n// optional type annotation, for documentation\ntype t = [#1 | #3 | #5 ]\n\n// enjoy the pattern matching\nlet test = (arg: t) => {\n  switch arg {\n  | #1 | #3 => "hello"\n  | #5 => "world"\n  }\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-js"}),'var secret = 42;\n\nfunction test(arg) {\n  if (arg === 5) {\n    return "world";\n  } else {\n    return "hello";\n  }\n}\n'))),(0,s.kt)("p",null,"But wait, ",(0,s.kt)("strong",{parentName:"p"},"there's more"),". We allow safely coercing these poly variants to ",(0,s.kt)("inlineCode",{parentName:"p"},"int"),"s or ",(0,s.kt)("inlineCode",{parentName:"p"},"string"),"s even at the ReScript side:"),(0,s.kt)(l,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-res"}),"let test2 = (arg: [#1 | #3 | #5]) => {\n  (arg :> int)\n}\n\nlet test3 = (arg: option<[#1 | #3 | #5]>) => {\n  (arg :> option<int>)\n}\n\nJs.log(test2(#1))\nJs.log(test3(Some(#3)))\n")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-js"}),"function test2(arg) {\n  return arg;\n}\n\nfunction test3(arg) {\n  return arg;\n}\n\nconsole.log(1);\nconsole.log(3);\n"))),(0,s.kt)("p",null,"As usual, check the output tabs: there's no runtime cost. Time to upgrade some interop!"),(0,s.kt)("h3",{id:"object-cleanup"},"Object Cleanup"),(0,s.kt)("p",null,"Our objects had various constraints due to legacy reasons; we've managed to clean them up, and expose the UX that they deserve:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},'Js.t<{"x": int}>')," is now simply ",(0,s.kt)("inlineCode",{parentName:"li"},'{"x": int}'),". Existing code using ",(0,s.kt)("inlineCode",{parentName:"li"},"Js.t")," still work; it's now a no-op. Our ",(0,s.kt)("inlineCode",{parentName:"li"},"rescript format")," will also format them away."),(0,s.kt)("li",{parentName:"ul"},"You can now use object type spread:",(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{}),'type point2d = {\n  "x": float,\n  "y": float,\n}\ntype point3d = {\n  ...point2d,\n  "z": float,\n}\n')))),(0,s.kt)("p",null,"The cleanup also allowed us to unlock very exciting ideas. For example, ",(0,s.kt)("a",(0,i.Z)({parentName:"p"},{href:"https://forum.rescript-lang.org/t/rfc-more-general-type-checking-for-structural-typings/1485"}),"this one"),"."),(0,s.kt)("h2",{id:"whats-next"},"What's Next?"),(0,s.kt)("p",null,"First class unicode support! Expect being able to write the following:"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,i.Z)({parentName:"pre"},{className:"language-res"}),'let helloUnicode = (x) =>{\n  switch x {\n  | \'\u2764\ufe0f\' => "ReScript is awesome"\n  | \'\u03a3\' => "Math is fun"\n  | _ => "Lots of unicode"\n  }\n}\n')),(0,s.kt)("h2",{id:"conclusion"},"Conclusion"),(0,s.kt)("p",null,"Don't miss our various other improvements in ",(0,s.kt)("a",(0,i.Z)({parentName:"p"},{href:"https://github.com/rescript-lang/rescript-compiler/blob/3134392a364b70c9c172aa6c1dbaa1ac6580265d/Changes.md#91"}),"our changelog"),". As always we try to keep our changes performant, lean and robust. We hope you'll enjoy these."),(0,s.kt)("p",null,"See you next time!"))}c.isMDXComponent=!0,c.frontmatter={author:"rescript-team",date:"2021-05-07",previewImg:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1620295955/Reason%20Association/rescript-lang.org/compiler_release_9_1_lu5oac.jpg",title:"ReScript 9.1",badge:"release",description:"Featuring a new npm package, a CLI revamp, polymorphic variant interop and object cleanup.\n",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/2021-05-07-release-9-1.mdx"}},78318:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"hello-world"},"Hello World!"),(0,r.kt)("p",null,"The BuckleScript announcement can be found on the ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://www.techatbloomberg.com/blog/bucklescript-1-0-release-arrived/"}),"Tech at Bloomberg\nblog"),"."))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2017-10-01",previewImg:null,badge:"release",title:"Bloomberg announces BuckleScript 1.0",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2017-10-01-bucklescript-release-1-0.mdx"}},18641:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"new-changes"},"New Changes"),(0,r.kt)("p",null,"BuckleScript 1.4.2 release comes with quite a few enhancements."),(0,r.kt)("h3",{id:"most-notable-features"},"Most notable features"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The build system is ready to handle multiple npm packages, and its module\nsystem can be overriden by the end user. For example, if the library A(end\nuser) depends library B and library C, we only need tell the build system\nthat A needs goog module system, then B, C will be built using goog module\nsystem too.")),(0,r.kt)("p",null,"There are quite lots of enhancements to the build system, we strongly recommend\nusers to re-read the documentation (",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"http://bucklescript.github.io/bucklescript/Manual.html#_build_system_support"}),"old\ndocs"),")."),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"/docs/manual/latest/bind-to-js-function#fixed-arguments"}),"FFI add a new\nfeature")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"https://github.com/bucklescript/bucklescript/issues/1072"}),"FFI can handle ",(0,r.kt)("inlineCode",{parentName:"a"},"bs.obj")," and ",(0,r.kt)("inlineCode",{parentName:"a"},"bs.string"),"\ncombination"))))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2017-10-02",previewImg:null,badge:"release",title:"Announcing BuckleScript 1.4.2",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2017-10-02-bucklescript-release-1-4-2.mdx"}},50839:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"new-changes"},"New Changes"),(0,r.kt)("p",null,"Besides a number of minor bug fixes, most notable changes"),(0,r.kt)("h3",{id:"es6-module-support-es6-es6-global-amdjs-global"},'ES6 module support, "es6", "es6-global", "amdjs-global"'),(0,r.kt)("p",null,'"es6" package-spec will generate es6 modules for each ocaml module,\n"es6-global" will also generate es6 modules but the path does not rely on node\nmodule resolution "amdjs-globa" is similar to "es6-global"'),(0,r.kt)("p",null,"The es6 module is in perfect combination with rollup as a bundler, see this\nlink about how good the dead code elimination is\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://twitter.com/bobzhang1988/status/827562467148623875"}),"https://twitter.com/bobzhang1988/status/827562467148623875")))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2017-10-03",previewImg:null,badge:"release",title:"Announcing BuckleScript 1.4.3",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2017-10-03-bucklescript-release-1-4-3.mdx"}},39709:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"new-changes"},"New Changes"),(0,r.kt)("p",null,"Besides a number of minor bug fixes and perf improvement, most notable changes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Bundled Reason together thanks to Reason team, so that Reason syntax support\nis also first class, this also makes Reason for the first time available to\nWindows users."),(0,r.kt)("li",{parentName:"ul"},"FFI added\n",(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"/docs/manual/latest/function#curry--uncurry"}),(0,r.kt)("inlineCode",{parentName:"a"},"bs.uncurry")),"\nwhich will automatically uncurry the callback so the user land API is clearer"),(0,r.kt)("li",{parentName:"ul"},"Improve ",(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"https://bucklescript.github.io/bucklescript/Manual.html#_object_label_translation_convention"}),"object label\ntranslation"),"\nto cause less surprise, this might case minor backward compatibility")))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2017-10-04",previewImg:null,badge:"release",title:"Announcing BuckleScript 1.5.0",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2017-10-04-bucklescript-release-1-5-0.mdx"}},9688:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"features"},"Features"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"http://bucklescript.github.io/bucklescript/Manual.html#_unicode_support_since_1_5_1"}),"FFI: Unicode literal\nsupport")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"http://bucklescript.github.io/bucklescript/Manual.html#_unicode_support_since_1_5_1"}),"FFI: return value\nchecking")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"http://bucklescript.github.io/bucklescript/Manual.html#_detect_global_varialbe_existence_code_bs_external_code_since_1_5_1"}),"FFI: Detect global variable\nexistence"))),(0,r.kt)("h2",{id:"minor-breaking-changes"},"Minor breaking changes"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"changes NodeJS special variables from ",(0,r.kt)("inlineCode",{parentName:"li"},"module_")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"_module")," to make it more consistent"),(0,r.kt)("li",{parentName:"ol"},"[%node ]"," return ","[_ option]"," type instead of ",(0,r.kt)("inlineCode",{parentName:"li"},"undefined"))))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2017-10-05",previewImg:null,badge:"release",title:"Announcing BuckleScript 1.5.1",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2017-10-05-bucklescript-release-1-5-1.mdx"}},48291:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"features"},"Features"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"http://bucklescript.github.io/bucklescript/Manual.html#_unicode_support_since_1_5_1"}),"FFI: Unicode literal support")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"http://bucklescript.github.io/bucklescript/Manual.html#_return_value_checking_since_1_5_1"}),"FFI: Return value\nchecking")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"http://bucklescript.github.io/bucklescript/Manual.html#_detect_global_varialbe_existence_code_bs_external_code_since_1_5_1"}),"FFI: Detect global variable\nexistence"))),(0,r.kt)("h2",{id:"minor-breaking-changes"},"Minor breaking changes"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"changes NodeJS special variables from ",(0,r.kt)("inlineCode",{parentName:"li"},"module_")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"_module")," to make it more consistent"),(0,r.kt)("li",{parentName:"ol"},"[%node ]"," return ","[_ option]"," type instead of ",(0,r.kt)("inlineCode",{parentName:"li"},"undefined"))))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2017-10-06",previewImg:null,badge:"release",title:"Announcing BuckleScript 1.5.2",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2017-10-06-bucklescript-release-1-5-2.mdx"}},50637:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"new-release"},"New Release"),(0,r.kt)("p",null,"We are excited to announce ",(0,r.kt)("inlineCode",{parentName:"p"},"bs-platform@1.7.0"),", which highlights following new features and changes:"),(0,r.kt)("h3",{id:"first-class-uncurried-calling-convention"},"First class uncurried calling convention"),(0,r.kt)("p",null,"As a functional language, the vanilla OCaml only provides curried calling\nconvention, BuckleScript employs fairly ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"http://bucklescript.github.io/bucklescript-playground/#Curry_Optimization"}),"advanced\noptimizations"),"\nfor curried calling convention, however, the most efficient code is efficient\ncode not relying on optimizations."),(0,r.kt)("p",null,"Since this release, we provide first class uncurried calling convention, ",(0,r.kt)("em",{parentName:"p"},"all\ntoolchains provided by BuckleScript")," can understand uncurried calling\nconvention"),(0,r.kt)("h4",{id:"curried-calling-convention"},"Curried calling convention"),(0,r.kt)("p",null,"Let's show the feature with an example file called ",(0,r.kt)("inlineCode",{parentName:"p"},"test.ml"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-ocaml"}),"let f g x = g x [@bs]\n")),(0,r.kt)("p",null,"or in Reason"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"let f = (g, x) => g(. x);\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"f")," is curried function, ",(0,r.kt)("inlineCode",{parentName:"p"},"g")," is an uncurried function due to ",(0,r.kt)("inlineCode",{parentName:"p"},"[@bs]")," annotation.\nIn Reason, the dot in ",(0,r.kt)("inlineCode",{parentName:"p"},"g(. x)")," is equivalent to ",(0,r.kt)("inlineCode",{parentName:"p"},"[@bs]"),"."),(0,r.kt)("p",null,"When we evaluate the program with the ",(0,r.kt)("inlineCode",{parentName:"p"},"bsc")," command..."),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-sh"}),"bsc.exe -i test.ml # infer the type\n")),(0,r.kt)("p",null,"...we will get following inferred interface:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-ocaml"}),"val f : ('a -> 'b [@bs]) -> 'a -> 'b // <1>\n")),(0,r.kt)("p",null,"or in Reason"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"let f: ((. 'a) => 'b, 'a) => 'b\n")),(0,r.kt)("p",null,"As you can see in the examples above, ",(0,r.kt)("inlineCode",{parentName:"p"},"g")," is inferred as an uncurried\nfunction (",(0,r.kt)("inlineCode",{parentName:"p"},"(. 'a) => 'b"),") while ",(0,r.kt)("inlineCode",{parentName:"p"},"f")," is still a curried function."),(0,r.kt)("p",null,"The compiler will also yield following JS output:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"function f (g,x){\n    return g (x)\n}\n")),(0,r.kt)("p",null,"Again, the code shows that..."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"f")," is optimized and flattened"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"g")," works like uncurried function")),(0,r.kt)("h3",{id:"api-documentation"},"API documentation"),(0,r.kt)("p",null,"Now ",(0,r.kt)("inlineCode",{parentName:"p"},"ocamldoc")," can  understand ",(0,r.kt)("inlineCode",{parentName:"p"},"[@bs]")," natively(instead of printing a desugared\noutput), we provide an ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"http://bucklescript.github.io/bucklescript/api/"}),"API\ndocumentation")," for the library\nshipped with BuckleScript, we plan to ship the documentation generator in next\nrelease."),(0,r.kt)("h3",{id:"more-interop-including-jspromiset"},"More Interop including ",(0,r.kt)("inlineCode",{parentName:"h3"},"Js.Promise.t")),(0,r.kt)("h3",{id:"unicode-string-and-interpolation-support"},"Unicode string and interpolation support"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"/docs/manual/latest/interop-cheatsheet#string-unicode--interpolation"}),"String\ninterpolation")),(0,r.kt)("h3",{id:"catch-exceptions-raised-on-js-side"},"Catch exceptions raised on JS side"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"/docs/manual/latest/exception"}),"Catch exception")),(0,r.kt)("h3",{id:"mixed-data-source"},"Mixed data source"),(0,r.kt)("p",null,"See\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"http://bucklescript.github.io/bucklescript/Manual.html#__code_bs_open_code_type_safe_external_data_source_handling_since_1_7_0"}),(0,r.kt)("inlineCode",{parentName:"a"},"bs.open"))),(0,r.kt)("h3",{id:"es6-support-in-safari"},"ES6 support in Safari"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/bucklescript/bucklescript/issues/1465"}),"fix es6 support in\nbrowser")),(0,r.kt)("h3",{id:"bs-dev-dependencies-support--in-the-build-system"},(0,r.kt)("inlineCode",{parentName:"h3"},"bs-dev-dependencies")," support  in the build system"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"http://bucklescript.github.io/bucklescript/docson/#build-schema.json"}),"build\nschema")),(0,r.kt)("h3",{id:"bsas-accept-json-literal-support"},(0,r.kt)("inlineCode",{parentName:"h3"},"bs.as")," accept json literal support"),(0,r.kt)("p",null,"This feature is mentioned in the ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"/docs/manual/latest/bind-to-js-function#fixed-arguments"}),"Functions / Fixed Arguments")," section."),(0,r.kt)("h3",{id:"bug-fixes-performance-improvement-and-stress-tests"},"Bug fixes, performance improvement, and stress tests"),(0,r.kt)("p",null,"[#1549]","(Notable bug fixes\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/bucklescript/bucklescript/issues/1549"}),"https://github.com/bucklescript/bucklescript/issues/1549"),"),\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/bucklescript/bucklescript/issues/1539"}),"#1539"),",\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/bucklescript/bucklescript/issues/1520"}),"#1520")))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2017-10-07",previewImg:null,badge:"release",title:"Announcing BuckleScript 1.7.0",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2017-10-07-bucklescript-release-1-7-0.mdx"}},45698:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"new-release"},"New Release"),(0,r.kt)("p",null,"We are excited to announce ",(0,r.kt)("inlineCode",{parentName:"p"},"bs-platform@1.7.3")," with following new highlighted features:"),(0,r.kt)("h3",{id:"new-cli-template-generator"},"New CLI template generator"),(0,r.kt)("p",null,"You can now create and build a new BuckleScript project in a single command\n(works on all platforms with zero dependencies including Windows)"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-sh"}),"npm install -g bs-platform && bsb -init hello && cd hello && npm run build\n")),(0,r.kt)("p",null,"You can find more details in the\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"http://bucklescript.github.io/bucklescript/Manual.html#_using_existing_templates_since_1_7_4"}),"manual"),"."),(0,r.kt)("h3",{id:"adding-several-modules-to-js-namespace-including-option-result-list-and-vector"},"Adding several modules to Js namespace, including Option, Result, List and Vector."),(0,r.kt)("p",null,"Note it is still work in progress, but these libraries are optimized for both\nperformance and size, they can provide an even smaller code size than current\ncase"),(0,r.kt)("p",null,"You can also find a full list of changes in our\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/bucklescript/bucklescript/blob/master/Changes.md#bucklescript-174may-24-2017"}),"Changelog"),"\nfile."))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2017-10-08",previewImg:null,badge:"release",title:"Announcing BuckleScript 1.7.4",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2017-10-08-bucklescript-release-1-7-4.mdx"}},23860:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"new-changes"},"New Changes"),(0,r.kt)("p",null,"Since BuckleScript has grown and developed its own community, it is moving to\nits own GitHub organization. This will allow the community to continue to grow\nand to set the future direction of the project."),(0,r.kt)("p",null,"At the same time, we are truly thankful for the support of Bloomberg who\nallowed this amazing project to happen!"),(0,r.kt)("p",null,"A detailed list of changes are listed as below:"),(0,r.kt)("h3",{id:"fixes"},"Fixes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"#1676, ",(0,r.kt)("inlineCode",{parentName:"li"},"bsb -w")," will always build regardless of filetype when fs.watch doesn't send a filename"),(0,r.kt)("li",{parentName:"ul"},"#1655, fix #1653 Js.Promise.all","[n]"," interfaces"),(0,r.kt)("li",{parentName:"ul"},'#1658, fix typeof = "null" issue'),(0,r.kt)("li",{parentName:"ul"},"#1656, bs.get/set/get_index/set_index respects bs.ignore"),(0,r.kt)("li",{parentName:"ul"},"#1654, ",(0,r.kt)("inlineCode",{parentName:"li"},"bsb -init")," fails if package or current dir has space (parent dir can have spaces)"),(0,r.kt)("li",{parentName:"ul"},"#1678, bs.get{null;undefined}  in object type"),(0,r.kt)("li",{parentName:"ul"},"#1692, fix invalid js syntax output"),(0,r.kt)("li",{parentName:"ul"},"#1701, fix tailcall handling interaction with  exception handler"),(0,r.kt)("li",{parentName:"ul"},"#1666, fix misue of GADT api")),(0,r.kt)("h3",{id:"features"},"Features:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"#1648, exposed ",(0,r.kt)("inlineCode",{parentName:"li"},"bsc")," in the npm environment"),(0,r.kt)("li",{parentName:"ul"},"#1647, speical handling ",(0,r.kt)("inlineCode",{parentName:"li"},"bsb -init .")," to reuse current directory"),(0,r.kt)("li",{parentName:"ul"},"#1667, fix an optimizaiton bug"),(0,r.kt)("li",{parentName:"ul"},"#1698, fix exit code incorrectly aggregated issue"),(0,r.kt)("li",{parentName:"ul"},"#1666, add Js.Json.classify and Js.Types.classify"),(0,r.kt)("li",{parentName:"ul"},"#1705, add dom storage api"),(0,r.kt)("li",{parentName:"ul"},"#1672, sync up with new reason"),(0,r.kt)("li",{parentName:"ul"},"#1696, provide reason-react template")))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2017-10-09",previewImg:null,badge:"release",title:"Announcing BuckleScript 1.7.5",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2017-10-09-bucklescript-release-1-7-5.mdx"}},67259:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"reason-belt-and-the-community"},"Reason, Belt and the Community"),(0,r.kt)("p",null,"BuckleScript is a compiler, a set of type system enhancements, a build system\nand a great deal of JavaScript interoperability features rolled into one. From\nday one, its goal has been to provide a rock solid, lightweight and performant\nstack for the community. So far, we'd like to think that we've done a great\njob."),(0,r.kt)("p",null,"Alas, such a centralized effort can only scale so much. We'll continue to\npolish the foundation, tweak features and respond to demands, but\nBuckleScript's ready to tackle bigger challenges alongside our sister project,\nReason. This is where ",(0,r.kt)("strong",{parentName:"p"},"you"),", the community, comes in."),(0,r.kt)("p",null,"This week, we're opening up a new suite of additions to the standard library,\nnamed ",(0,r.kt)("strong",{parentName:"p"},"Belt"),". Belt has been in closed beta for a while now; some of you might\nhave heard of it or even used it. Now, the time's ripe to open it up to the\nbroader public."),(0,r.kt)("p",null,"In the following weeks, we'll gradually outline the motivations, the design\ndecisions and the future plans for Belt on this blog. However, new additions to\nthe standard library aren't a small feat, and we can't possibly tackle all of\nthem by ourselves. Your feedback as a community member will be very\nappreciated, and we ",(0,r.kt)("strong",{parentName:"p"},"will")," do our best to stay open to feedback, more so that\nwe have ever done for the core compiler and build system. Belt's development\nwill have more of an open process; we'll be monitoring the issue list closely\nfor changes/features requests and tagging the them with Good First Task\n(contribution welcome). At the same time, we hope to clean up the\nrepository's workflow a bit too, to ease future contributions."),(0,r.kt)("p",null,"Thank you for your continued support, and here's to a brighter future for\nBuckleScript and Reason! Stay tuned for the first of several posts on Belt. See\nyou soon!"))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2018-03-13",previewImg:null,title:"A Small Step for BuckleScript...",description:"...and a big one for the community!",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2018-03-13-a-small-step-for-bucklescript.mdx"}},32466:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"new-changes"},"New Changes"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"bs-platform")," 3.0.0 is released! Go get it. This is a great release."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Highlighted features:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"OCaml/Reason boolean are finally compiled as JS boolean"),"! Due to\nhistorical limitations, OCaml ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"false")," was compiled to ",(0,r.kt)("inlineCode",{parentName:"li"},"1"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"0")," in JS.\nThis caused quite a bit of confusion for newcomers. It now compiles to JS\n",(0,r.kt)("inlineCode",{parentName:"li"},"true"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"false"),". Special thanks to ",(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"https://twitter.com/ccrisccris"}),"Cristiano"),"\nfor all the hard work."),(0,r.kt)("li",{parentName:"ul"},"New ",(0,r.kt)("inlineCode",{parentName:"li"},"[bs.deriving abstract"),"] feature. This is\nan experimental and potentially much better way to bind to JS objects that\npotentially obsoletes the need for a few other APIs. Please see the linked\ndocs and help us test it!"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"raw")," now accepts a function declaration with an unsafe string body: ",(0,r.kt)("inlineCode",{parentName:"li"},'let f =\n[%raw (a, b) => "return a + b"]')," (OCaml syntax: ",(0,r.kt)("inlineCode",{parentName:"li"},'let f = [%raw fun a b ->\n"return a + b"]'),"). This makes embedding escape-hatch raw JS code even easier\nfor the compiler to optimize for speed and readability, as you've indicated\nthat the raw code block is a function, with specific numbers of arguments.")),(0,r.kt)("p",null,"The usual changelog is\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/blob/master/Changes.md#300"}),"here"),"."),(0,r.kt)("p",null,"We've been working on the BuckleScript compiler for almost four years now;\nmeanwhile, the OCaml type checker itself has already been engineered for almost\nthree decades. After all this of work, we believe that BuckleScript has reached\na stable and reliable stage."),(0,r.kt)("p",null,"Below is a list of to-dos that we will work on in the future. Suggestions\nwelcome!"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Upgrade the OCaml version. OCaml is quite a stable language; there are not\ntoo many changes between BuckleScript's OCaml version and latest stable one.\nNonetheless, it's good to keep up with the OCaml ecosystem."),(0,r.kt)("li",{parentName:"ul"},"A uniform representation for local modules/global modules. Currently local\nmodules are compiled to array, while global modules are compiled to\nES6/CommonJS/AMD modules (the cost of local modules is low though, thanks to\naggressive inlining)."),(0,r.kt)("li",{parentName:"ul"},"Continue improving\n",(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"https://bucklescript.github.io/bucklescript/api/Belt.html"}),"Belt"),". Some\ninitial nice numbers ",(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"https://github.com/bobzhang/belt-simple-bench"}),"here"),"."),(0,r.kt)("li",{parentName:"ul"},"Enhance FFI to allow creation of idiomatic, type safe JS classes."),(0,r.kt)("li",{parentName:"ul"},"Introduce a debug mode to enhance the printing of OCaml data structures."),(0,r.kt)("li",{parentName:"ul"},"Performance. The compiler performance and generation of more performant and\nreadable code is always our top concern.")),(0,r.kt)("p",null,"Thank you for all the support so far!"))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2018-04-16",previewImg:null,badge:"release",title:"Announcing BuckleScript 3.0",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2018-04-16-bucklescript-release-3-0-0.mdx"}},14382:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"newest-changes"},"Newest Changes"),(0,r.kt)("p",null,"List of changes\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/blob/master/Changes.md#310"}),"here"),"!\nHighlights:"),(0,r.kt)("h3",{id:"print-record-keys-and-variant-tags"},"Print Record Keys and Variant Tags"),(0,r.kt)("p",null,"A picture's worth a thousand words:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Before:")),(0,r.kt)("img",{src:"https://bucklescript.github.io/img/debugger-before.png",alt:"debugger before"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"After:")),(0,r.kt)("img",{src:"https://bucklescript.github.io/img/debugger-after.png",alt:"debugger after"}),(0,r.kt)("p",null,"Please see ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"/docs/reason-compiler/latest/better-data-structures-printing-debug-mode"}),"Better Data Structures Printing (Debug\nMode)")," for usage."),(0,r.kt)("h2",{id:"even-better-bsderiving-abstract"},"Even Better ",(0,r.kt)("inlineCode",{parentName:"h2"},"bs.deriving abstract")),(0,r.kt)("p",null,"We've further polished our new way of binding to JS objects. The record fields\nof a ",(0,r.kt)("inlineCode",{parentName:"p"},"bs.deriving abstract")," can now accept functions."),(0,r.kt)("h2",{id:"pipe-first-improvement"},"Pipe First Improvement"),(0,r.kt)("p",null,(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"/docs/manual/latest/pipe"}),"Pipe First")," now supports piping into variant tags!"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"let result = name |. preprocess |. Some\n")),(0,r.kt)("p",null,"We turn this into:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"let result = Some(preprocess(name))\n")),(0,r.kt)("h3",{id:"jsboolean-is-gone"},"Js.Boolean Is Gone"),(0,r.kt)("p",null,"Since BuckleScript 3.0, OCaml ",(0,r.kt)("inlineCode",{parentName:"p"},"bool")," now compile to JS ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean"),". It was\ndeprecated (all the boolean conversion functions became no-ops, with warnings\nduring build), and now completely removed. No more need for the converter\nfunctions!"))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2018-05-21",previewImg:null,badge:"release",title:"Announcing BuckleScript 3.1",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2018-05-21-bucklescript-release-3-1-0.mdx"}},53146:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"new-release"},"New Release"),(0,r.kt)("p",null,"Hey again! The release two days ago removed the deprecated Js Boolean APIs (no\nlonger needed since we compile OCaml booleans to JS boolean since ",(0,r.kt)("inlineCode",{parentName:"p"},"3.0.0"),"). But\nfolks have voiced that the removal was too hasty, as some of their dependencies\nstill haven't upgraded to ",(0,r.kt)("inlineCode",{parentName:"p"},"3.0.0")," and thus still needed the deprecated APIs."),(0,r.kt)("p",null,"We try to be diligent with our releases; hopefully this didn't churn too many\npeople. To remediate the situation, ",(0,r.kt)("strong",{parentName:"p"},"we're putting those calls back for this\nversion"),". Finger crossed that you don't have to wait on too many dependencies!"),(0,r.kt)("p",null,"Sorry for the small churn, and thanks for all your feedback!"))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2018-05-23",previewImg:null,badge:"release",title:"Announcing BuckleScript 3.1.4",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2018-05-23-bucklescript-release-3-1-4.mdx"}},32983:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"newest-changes"},"Newest Changes"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"bs-platform")," 4.0.0 is released! It has some  nice features that we want to\nshare with you, a more detailed list of changes is available\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/blob/master/Changes.md#400"}),"here")),(0,r.kt)("p",null,"In this post, I will talk about a new development workflow, all toolchains are\nself-contained in ",(0,r.kt)("inlineCode",{parentName:"p"},"bs-platform"),", ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://twitter.com/ccrisccris"}),"Cristiano"),"\nwill talk about the new runtime encoding for optional."),(0,r.kt)("h3",{id:"a-simple-approach-to-accelerate-feedback-loop-in-a-reliable-way"},"A simple approach to accelerate feedback loop in a reliable way"),(0,r.kt)("p",null,"For mordern day-to-day development, developers expect that whenever files are\nchanged, the build process is re-triggered automatically and browser reloaded\ninstantly, this feedback loop should be quick enough to make developers not get\ndistracted."),(0,r.kt)("p",null,"What we have before this release is as below:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Source file changes detected by bsb watch mode, rebuild"),(0,r.kt)("li",{parentName:"ul"},"Webpack noticed JS files modified, rebundle and update the browser state")),(0,r.kt)("p",null,"Both ",(0,r.kt)("inlineCode",{parentName:"p"},"bsb")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"webpack")," has a watch mode, but they are architectured in\nfundamentally different ways that they achive different levels of reliability."),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"bsb")," watch mode, there is no long running memory-hungry process, so\nwhenever a file changed, a fresh process is started very fast and dies quickly,\nour experiment shows that in practice, a long running bsb process can work for\na week without going into bad state, and such feedback loop is still instant."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Webpack")," holds lots of objects in memory and running for a longtime, it\nresults in less reliability and OOM from time to time."),(0,r.kt)("p",null,"Another complexity introduced by a JS bundler is that it explodes users\ndirectory structure, for beginners trying to get started with bucklescript,\ninstalling such huge amount of directories is intimidating. In a slow network,\nthis used to result in installation failure."),(0,r.kt)("p",null,"We understand that existing JS bundler has a huge ecosystem and it is\ninvaluable in production mode, but we are exploring whether we can provide\nsimilar or even more reliable development experience without introducing such\ncomplexity."),(0,r.kt)("p",null,"Below is a new workflow we are exploring in this release:"),(0,r.kt)("h3",{id:"nodejs-module-loader-in-browser"},"NodeJS module loader in browser"),(0,r.kt)("p",null,"Instead of bundling the modules like normal bundlers, we provide a NodeJS\nmodule loader so that it simply reloads the module without bundling."),(0,r.kt)("p",null,"Note ideally this can be achieved using ES6 module spec, however, it is not\npractical due to following reasons:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Most dependencies are not strictly ES6 compilant, this is true even for libraries authored in ES6 style")),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'import {createElement} form "react" ; // not es6 compliant\nimport {createElement} from "node_modules/react/index" // not es6 compilant\nimport {createElement} from "./node_modules/react/index.js" // correct es6 module\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"ES6 modules does not allow an indirection, by introducing our own NodeJS module loader, we have an indirection and more meta-data about each module, so that we can do more reflection work in the future.")),(0,r.kt)("p",null,"Loading in clean state without packing seems to introduce some redundant work,\nbut on the contratry, it is very fast, it used to load 200 modules under 150ms,\neven better, since there is no cached state in a long running process, it is\nmuch more reliable."),(0,r.kt)("h3",{id:"websocket-integration-with-bsb"},"WebSocket integration with bsb"),(0,r.kt)("p",null,"We need a mechanism to communciate between browser and the build system so that\nwhenever a rebuild finished, the browser get notified."),(0,r.kt)("p",null,"Instead of introducing more dependencies, we implemented a minimal websocket\ninterface so that whenever a rebuild finishes, the weboscket clients which\nsubscribe the port will get notified."),(0,r.kt)("h2",{id:"to-conclude-and-try-it-out"},"To conclude and try it out"),(0,r.kt)("p",null,"So the proposed new work flow is as below: whenever a source file is changed,\nthe bsb rebuild, if it build successfully, it will notify the browser to reload\nthe NodeJS modules directly."),(0,r.kt)("p",null,"All the devtools are provided by bs-platform, the good thing is that there is\nno long running memory-hungry process, so that we expect it will deliver a more\nreliable and consistent experience."),(0,r.kt)("p",null,"You can try it out in ",(0,r.kt)("inlineCode",{parentName:"p"},"bs-platform@4.0.0")),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-sh"}),"bsb -init test -theme react-lite\ncd test\nnpm install\nnpm start\nhttp-server # start a http server\n")),(0,r.kt)("p",null,"Open ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost:port/index.html"),", changes the reason source code and expect the browser show the changes."))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2018-07-17",previewImg:null,badge:"release",title:"Announcing BuckleScript 4.0 (Part One)",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2018-07-17-bucklescript-release-4-0-0-pt1.mdx"}},37538:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"new-changes"},"New Changes"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"bs-platform")," 4.0.0 introduces a new runtime representation for optionals."),(0,r.kt)("p",null,"While beforehand ",(0,r.kt)("inlineCode",{parentName:"p"},"None")," was represented at runtime as ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," and ",(0,r.kt)("inlineCode",{parentName:"p"},'Some("hello")'),"\nas an array ",(0,r.kt)("inlineCode",{parentName:"p"},'["hello"]'),", the new representation tries to unbox optionals as\nmuch as possible."),(0,r.kt)("p",null,"Now ",(0,r.kt)("inlineCode",{parentName:"p"},"None")," is represented as ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," and ",(0,r.kt)("inlineCode",{parentName:"p"},'Some("hello")')," simply as\n",(0,r.kt)("inlineCode",{parentName:"p"},'"hello"'),"."),(0,r.kt)("p",null,"Generally speaking, ",(0,r.kt)("inlineCode",{parentName:"p"},"Some(v)")," is represented as ",(0,r.kt)("inlineCode",{parentName:"p"},"v"),", i.e. unboxed. The only\nexception is when ",(0,r.kt)("inlineCode",{parentName:"p"},"v")," itself is ",(0,r.kt)("inlineCode",{parentName:"p"},"None")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Some(...(Some(None))"),", in which case\na special boxed representation is used."),(0,r.kt)("p",null,"The construction of new values ",(0,r.kt)("inlineCode",{parentName:"p"},"Some(-)"),", and pattern matching ",(0,r.kt)("inlineCode",{parentName:"p"},"| Some(-) =>\n..."),", perform some case analysis to decide when to box or unbox values. In the\nabsence of nested optionals, the result of both operations will ",(0,r.kt)("em",{parentName:"p"},"always")," be the\nindentity."),(0,r.kt)("p",null,"Because of that, it's possible to use type-based optimization to avoid\nperforming case analysis in the first place.  So while the generic function\n",(0,r.kt)("inlineCode",{parentName:"p"},"(x) => Some(x)")," will generate code to check wheter ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," should be boxed,\nthe more type-specific function ",(0,r.kt)("inlineCode",{parentName:"p"},"(x:int) => Some(x)")," is just compiled as\nthe identity function, as it's clear from the type that no boxing is required."),(0,r.kt)("p",null,"For a high-level formalization of the boxing and unboxing operations, as well\nas the polymorphic comparison functions, see this\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://gist.github.com/cristianoc/791aac26f94dbded0fc137d61f4bd2a8"}),"gist"),"."),(0,r.kt)("p",null,"One design choice was whether to represent ",(0,r.kt)("inlineCode",{parentName:"p"},"None")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," or as ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),".\nThe choice of ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," was made because this allows a direct mapping for\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://reasonml.github.io/docs/en/function#optional-labeled-arguments"}),"optional labeled\narguments"),".\nAs a consequence ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," is never boxed, so e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"Some(null)")," is represented as\n",(0,r.kt)("inlineCode",{parentName:"p"},"null"),"."))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2018-07-17",previewImg:null,badge:"release",title:"Announcing BuckleScript 4.0 (Part Two)",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2018-07-17-bucklescript-release-4-0-0-pt2.mdx"}},51872:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"what-is-this-about"},"What is this about?"),(0,r.kt)("p",null,"In the latest BuckleScript release, we introduced a minor change in the codegen\nwhich broken some user libraries. Note this change only broke the code in the\nFFI boundary(the interop between JS)."),(0,r.kt)("p",null,"In the early days of BuckleScript, there is no built-in uncurried calling\nconvention support, since OCaml is a curried language, which means every\nfunction has arity one, so there is no way to express that a function has arity\nzero, this makes some interop challenging. In the mocha unit test library, it\nexpects its callback to be function of arity zero."),(0,r.kt)("p",null,"To work around this issue, before this release, we did a small codegen\noptimization, for a function of type ",(0,r.kt)("inlineCode",{parentName:"p"},"unit -> unit"),", if its argument is not\nused, we remove its argument in the output."),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"let f: unit => int = () => 3;\nlet f_used: unit => unit = x => Js.log(x);\n")),(0,r.kt)("p",null,"Output JS prior to v4.0.7:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"function f (){\n    return 3\n}\nfunction f_used (x){\n    console.log(x)\n}\n")),(0,r.kt)("p",null,"To make this hack work, in the application side, for a curried function\napplication, we treat the function of arity 0 and arity 1 in the same way, this\nstill works since curried function application could only happen on the ocaml\nfunction."),(0,r.kt)("p",null,"This trick is unintuitive, it makes code generated less predictable and it is\nnot relevant any more, since we added native uncurried calling convention\nsupport later."),(0,r.kt)("p",null,"Therefore, we generate JS code in a more consistent style in this release:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"let f: unit => int = () => 3;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"function f (param){\n    return 3\n}\n")),(0,r.kt)("p",null,"So in your FFI code, if you have a callback which is expected to be of arity\nzero, use ",(0,r.kt)("inlineCode",{parentName:"p"},"unit -> unit [@bs]")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"unit -> unit [@bs.uncurry]"),", it is 100%\ncorrect. Note our previous trick will only make ",(0,r.kt)("inlineCode",{parentName:"p"},"unit -> unit")," work most time,\nbut it can not provide any guarantee."),(0,r.kt)("p",null,"Since we removed the trick, the curried runtime does not treat function of\narity 0 and arity 1 in the same way, so if you have code like this"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"let f: unit => int = [%bs.raw {|function () {\n  return 3\n}|}];\n")),(0,r.kt)("p",null,"It is not correct any more, the fix would be:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"let f: unit => int = [%bs.raw {|function(param) {\n  return 3\n}|}];\n")),(0,r.kt)("p",null,"Or"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"let f: (. unit) => int = [%bs.raw {|function() {\n  return 3\n}|}];\n")),(0,r.kt)("p",null,"FFI is a double edge sword, it is a must have to ship your product, yet it is\ntricky, and there may be some undefined behavior you rely on but don't\nrecognize, it is encouarged to always test your FFI in the boundary."))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2018-11-13",previewImg:null,title:"A Change of Undefined Behavior in BuckleScript 4.0.7",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2018-11-13-arity-zero.mdx"}},43760:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"In this article we will explain what we are doing now and what we plan to\nimprove in next half (Dec-May), we would also like to hear your feedback so\nthat we can adjust accordingly."),(0,r.kt)("p",null,"Keep in mind that the development team is a very small team, so we have to\nprioritize things instead of working on every feature."),(0,r.kt)("h2",{id:"what-we-are-doing"},"What we are doing"),(0,r.kt)("p",null,"In the last couple of month we are busy upgrading the OCaml compiler from\n4.02.3 to 4.06.1, the good news is that the upgrade is almost done."),(0,r.kt)("p",null,"We plan to ship it soon by the end of this year, at the same time, we will\nstill maintain the current version of the compiler until we feel the new\ncompiler is as good as the old one."),(0,r.kt)("p",null,"Note the upgrade is not easy work since the internals of OCaml compiler changed\nsignificantly in the last few years. Our upgrade strategy is also quite\nconservative, it works by conditional compilation so that the bsc compiler\nactually work with both versions, the benefit is that in this case, we are not\nin a messy state, the bug fix of bsc compiler can still benefit two branches."),(0,r.kt)("p",null,"But the reward is also huge, there are a bunch of optimizations and nice\nfeatures coming alone in the recent releases of the OCaml language, to name a\nfew: ",(0,r.kt)("inlineCode",{parentName:"p"},"inline records"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"local exception")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"hex notation for floats")," etc.\nMore importantly, this is a great move to engage better with OCaml ecosystem:\nthe previous old version compiler imposed some maintenance overhead for OCaml\ntoolchain, we can make better use of OCaml toolchain after such upgrade."),(0,r.kt)("h2",{id:"whats-next"},"What's next"),(0,r.kt)("h3",{id:"making-better-use-of-the-new-compiler-internals"},"Making better use of the new compiler internals"),(0,r.kt)("p",null,"The upgrade is divided into two stage, the first stage is focused on ",(0,r.kt)("inlineCode",{parentName:"p"},"no\nregression")," so that we can ship it."),(0,r.kt)("p",null,"Afterwards, we have plans to make better use of the more info rich IR in the\nnew release. Thanks to the flambda introduced after OCaml 4.03, more\ninformation is passed down to the lambda IR where BuckleScript take from. For\nexample, user can annotate functions inline or not with inline attribute, we\ncan make better use of such information."),(0,r.kt)("p",null,"In newer versions of OCaml compiler, the block and array is more distinguished\nwe will investigate whether we can make use of it to provide better data\nrepresentation for OCaml datatype."),(0,r.kt)("p",null,"Another interesting direction is to see if we can encode module in a consistent\nstyle: as an JS dictionary for both global modules and local modules."),(0,r.kt)("h3",{id:"improving-the-usability-of-bucklescript-toolchain"},"Improving the usability of BuckleScript toolchain"),(0,r.kt)("p",null,"BuckleScript is focused on making better use of JS ecosystem and provide\nvalues to ship JS code in production (produced by BuckleScript)."),(0,r.kt)("h4",{id:"making-bucklescript-toolchain-more-lightweight"},"Making Bucklescript toolchain more lightweight"),(0,r.kt)("p",null,"Currently it is still too heavy for users to provide JS libraries from\nBuckleScript, since clients need to install bs-platform which requires a lot of\ndisk-space and native compilation in some platform. We will investigate if we\ncan distribute the native compiler without using npm."),(0,r.kt)("p",null,"Separate the compiler from stdlib may also help draw the contribution to the\nstdlib/belt library."),(0,r.kt)("h4",{id:"improving-the-usability-of-bsb"},"Improving the usability of bsb"),(0,r.kt)("p",null,"Currently the bsb is restricted by the npm directory layout, the generated JS\nartifacts is also restricted by it, we will see if we can relocate the JS\nartifacts or provide more flexibility for users."))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2018-11-19",previewImg:null,badge:"roadmap",title:"BuckleScript Plans for the Second Half of 2018",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2018-11-19-bucklescript-roadmap-q3-4-2018.mdx"}},65090:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"new-release"},"New Release"),(0,r.kt)("p",null,"Today we released version 4.0.8 of ",(0,r.kt)("inlineCode",{parentName:"p"},"bs-platform"),".\nA detailed list of changes is available\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/blob/master/Changes.md#408"}),"here"),"."),(0,r.kt)("p",null,"Most user-facing changes are bug fixes and small enhancements, while quite a\nlot of work has been done behind the scenes towards the more fundamental\nimprovements coming down the line. This blog post refers to the BuckleScript\nruntime and some of the work we are doing to improve it."),(0,r.kt)("p",null,"The design goal of BuckleScript is to make the runtime as small as possible.\nThis runtime is divided into two parts: the C shims, and the fundamental\nlanguage feature support."),(0,r.kt)("p",null,"The C shims are not a strict runtime requirement: in the native backend, the\nfunctions are implemented in C, but in BuckleScript this isn't necessary. We\ncan either implement the C shims in a polyfill style or we can just implement\nthem in OCaml and compile via BuckleScript. Recently, we have been shifting\nmore and more work from the runtime to the normal OCaml stdlib by patching it\nwith conditional compilation. The benefit is obvious \u2013 they are just normal\nfunctions which do not need special compiler support \u2013 but the downside is that\nwe might need to make more patches to the libraries which use C functions, but\nconsidering the more challenging part of maintaining the patches to the\ncompiler, we think such overhead is worthwhile."),(0,r.kt)("p",null,"If we ignore the C shims, the BuckleScript runtime is very small, and it is\npretty easy for experienced BuckleScript programmers to write runtime-free code\nwhich generates standalone JS code. Such code could include supporting curried\ncalling conventions, encoding of OCaml ADT, etc."),(0,r.kt)("p",null,"The BuckleScript runtime is written in BuckleScript itself. The benefit of this\nis that it is much more maintainable than implementing in JS itself, and it is\neasier to keep some invariants when crossing the boundary between the runtime\nand the stdlib. For example, we don't need to worry about the consistency of\nthe runtime encoding of ",(0,r.kt)("inlineCode",{parentName:"p"},"type tuple"),' in BuckleScript, since the runtime is also\nimplemented in BuckleScript itself, and we get three output modules for free\nthanks to this "dogfooding".'),(0,r.kt)("p",null,"However, this makes the build system pretty complicated and fragile, and the\ndependencies between each module are mostly hard coded. Even worse, this\nintroduces a hard dependency between the normal libraries and the runtime\nbinary artifacts."),(0,r.kt)("p",null,"In particular, one\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/issues/2772"}),"issue")," we want to\naddress is to make the BuckleScript toolchain lightweight. We will continue to\nimplement the BuckleScript runtime by using BuckleScript itself, but we want to\nget rid of dependencies like ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/issues/3164"}),"the support for\nexceptions"),". In the\nend, installation will no longer involve building the runtime: BuckleScript\nwill simply be a bunch of generated JS files, so the complexity of the build\nsystem will not impact users at all. This is quite important given that we are\ncommitted to supporting Windows."),(0,r.kt)("p",null,"In the future, we will therefore be able to distribute the runtime as a normal\nJS library, and the BuckleScript user will only need the binary compiler and a\nsmall set of JS files. They will be able to use stdlib, Belt or anything else."),(0,r.kt)("p",null,"To get rid of such dependencies between stdlib and the runtime, we are going to\nintroduce a breaking change in the future. In hindsight, our support for\ncatching JS exceptions exposed the concrete representation of the exception\nencoding, in particular:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-ocaml"}),"match ... with\n| OCamlException exn -> ..\n| Js.Exn.Error e -> ...\n")),(0,r.kt)("p",null,"In this release, we introduced a function to avoid exposing such exception constructors:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-ocaml"}),"match ... with\n| OCamlException exn -> ...\n| e ->\n    match Js.asJsExn e with\n    | Some jserror -> ..\n    | None -> ...\n")),(0,r.kt)("p",null,"We encourage you to make such changes yourself to future-proof your codebases."),(0,r.kt)("p",null,"Oh and by the way, one side effect of this refactoring of the BuckleScript\nruntime is that the compilation does not require reading of the generated\n",(0,r.kt)("inlineCode",{parentName:"p"},".cm*")," files, which means faster compilation :)"))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2018-12-05",previewImg:null,badge:"release",title:"BuckleScript 4.0.8 (Part One)",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2018-12-05-bucklescript-release-4-0-8.mdx"}},2590:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"newest-changes"},"Newest Changes"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"bs-platform")," 4.0.17 is a major release."),(0,r.kt)("p",null,"It improved incremental compilation time significantly."),(0,r.kt)("p",null,"A picture is worth a thousand words, below is a large monorepo which contains\n4096 modules, changing the root node which has more than 3000 dependents, it\nfinished building within 400ms."),(0,r.kt)("img",{src:"https://bucklescript.github.io/img/incremental.png"}),(0,r.kt)("p",null,"We will write a dedicated article explaining how we achieve this incredible\nbuild performance."),(0,r.kt)("p",null,"A detailed list of changes is available\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/blob/master/Changes.md#4017"}),"here")),(0,r.kt)("p",null,"Another quite important but not client facing change is that we renovated the\ninternal build system, it will be much easier for contribution later on.  We\nwill update the contribution guide once it gets stable."))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2019-01-07",previewImg:null,badge:"release",title:"Announcing BuckleScript 4.0.17",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2019-01-07-bucklescript-release-4-0-17.mdx"}},19630:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"feedback-loops"},"Feedback loops"),(0,r.kt)("p",null,"As software developers, when we touch a codebase, we want the edit-compile\ncycle, to be as short as possible. Studies show that feedback loop less than\n1s, or 100ms will prevent devleopers getting distracted."),(0,r.kt)("p",null,"This seems to be possible in a small project, but as project grows to 10k\nfiles, or even more, 100k files in a large company like Google, Facebook, this\nseems to be extremely challenging."),(0,r.kt)("p",null,"In this article, we are talking about how BuckleScript - it supports both OCaml\nand ReasonML syntax - is trying to solve this issue."),(0,r.kt)("p",null,"The edit-build cycle in BuckleScript consists of two components: the compiler\nwhich does type checking and code generation and the scheduler which figures\nout what to rebuild and how to do it concurrently."),(0,r.kt)("h2",{id:"the-importance-of-compilers-cold-performance"},"The importance of compiler's cold performance"),(0,r.kt)("p",null,"In order to reduce the edit-build latency, some languages adopt an approach of\nin memory compiler + watch mode. We think this is not a scalable or reliable\napproach."),(0,r.kt)("p",null,"A compiler is a complex piece of software, the chance that a compiler has\nmemory leak is not low. It is not observed in real world since compiler is used\nmostly in a short-lived setting, it starts up fast and dies off quickly."),(0,r.kt)("p",null,"However, this is decimated when compiler is put in server mode. When we have\n10k or 100k files held in memory, it is very easy to observe OOM (out of memory\nissues)."),(0,r.kt)("p",null,"We figured that to deliver a scalable and reliable system, it is better to\ndecouple the compiler's complexity from the scheduler. When the compiler cold\nstarts and dies off quickly, the operating system process mechanism serves as\nan obviously correct garbage collector, which increases the reliability of the\nwhole system."),(0,r.kt)("p",null,"To reduce such latency in a single compiler's workload, we spent lots of time\ntweaking the performance of the compiler itself, for example, rewriting the hot\npath in C code, most BuckleScript compiler source code is written in an\nimperative C-style to avoid allocation."),(0,r.kt)("p",null,"To have a general idea of how fast BuckleScript's compiler runs:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"test>cat fib.ml\nlet rec fib = function\n  | 0 | 1 -> 1\n  | n -> fib (n - 1) + fib (n - 2)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"test>time /usr/local/lib/node_modules/bs-platform/lib/bsc.exe -bs-cmi -bs-cmj -c fib.ml\n\nreal    0m0.008s\nuser    0m0.004s\nsys     0m0.003s\n")),(0,r.kt)("p",null,"Having a compiler run fast with a cold start lays the groundwork so that it\nwon't be the bottleneck in the whole process. This is because when the\narchitecture decouple the compiler from the scheduler, the compiler will be\ninvoked by the scheduler hunderds of thousands of times in a build cycle, the\nlatency of the compiler in a single compilation unit will add up."),(0,r.kt)("h2",{id:"the-art-of-being-incremental"},"The art of being incremental"),(0,r.kt)("p",null,"Having a compiler running fast in cold mode does not solve the scalability\nissue alone. Take a code base which contains 100K source files for example,\n100ms per file would result in 10,000s latency which is not acceptable. To\nsolve such issue, we need reduce the workload as much as possible during each\nedit-build cycle."),(0,r.kt)("p",null,"In a statically typed language, suppose we have two compilation units A , B,\nand B depends on A. Whenever A changes, B gets recompiled, to make it worse,\nthe recompilation propogates, all dependencies of B get recompiled, which will\nresult in a snowball effect. In this model, whenever we touch the non-leaf\ncompilation unit, the latency would be large."),(0,r.kt)("p",null,"The key observation here for BuckleScript is that B does not really depend on\nthe last modified time of A, it depends on the intermediate output of A (e.g,\n",(0,r.kt)("inlineCode",{parentName:"p"},".cmj")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".cmi")," file) which may not change even if we modify A. What we work\non here is to reduce the probability of changing A's intermediate output due to\nchanging A. With the integration of a scheduler, it can help stop the\npropagation as early as possible."),(0,r.kt)("p",null,"In BuckleScript, each compilation unit is composed of two files, the\nimplementation file and interface file which are compiled to intermediate\noutput .cmj and .cmi separately."),(0,r.kt)("p",null,"The interface builds are completely separate from implemetation, it does not\ndepend on .cmj (implementation intermediate output) at all."),(0,r.kt)("p",null,"Suppose the interface is not changed, whenever we touch the implementation\nfile, BuckleScript designs the data structure of ",(0,r.kt)("inlineCode",{parentName:"p"},".cmj")," in a way that the\ncontent of ",(0,r.kt)("inlineCode",{parentName:"p"},".cmj")," is seldom changed. (Let's say its probability is 0.05 which\nis rare in cases when the arity of a function changed)"),(0,r.kt)("p",null,"If neither ",(0,r.kt)("inlineCode",{parentName:"p"},".cmj")," nor ",(0,r.kt)("inlineCode",{parentName:"p"},".cmi"),"  gets changed, the scheduler would stop\npropagation."),(0,r.kt)("p",null,"Suppose the ",(0,r.kt)("inlineCode",{parentName:"p"},".cmj")," file is still changed (P = 0.05), A's dependency B would get\nrecompiled. Note ",(0,r.kt)("inlineCode",{parentName:"p"},"B.cmi")," only depends on ",(0,r.kt)("inlineCode",{parentName:"p"},"A.cmi"),", so it will not get compiled,\nonly ",(0,r.kt)("inlineCode",{parentName:"p"},"B.cmj")," will get recompiled, its chances that ",(0,r.kt)("inlineCode",{parentName:"p"},"B.cmj")," gets changed will be\neven lower. In practice, the probabiity of the length of propagation chain is\nmore than two is less than"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"0.05 * 0.05 = 0.0025\n")),(0,r.kt)("p",null,"This means when we are in an edit-build cycle, whenever A gets changed, it may\nhave many direct dependencies, but the longest rebuild sequence will get\nsettled in at most two compilation units. Suppose the scheduler schedule the\ntasks in parallel, the longest sequence is bound by two, which means the\nrebuild cycle is very close to compiling two compilation units."),(0,r.kt)("p",null,"In implementation, we also generalized the idea of stopping propogation of .cmi\nchanges, so whenever we are adding some comments in the interface file, it will\nget settled quickly."),(0,r.kt)("p",null,"The worst case is that the root of an interface changed. In such case, it does\nnot mean all its dependencies will get recompiled, it depends on how many\ndependencies' interface depend on the root's interface. The cool thing is that\nsince interface's dependency chain is completely decoupled from\nimplementation's dependency, actually it used to be a subset of\nimplementation's dependency chain, so only a subset of its dependencies will\nget compiled. We will see a concrete an example later."),(0,r.kt)("h2",{id:"a-fast-scheduler"},"A fast scheduler"),(0,r.kt)("p",null,"As we said, the time spent in an edit-build cycle is mostly composed of two\nparts: compiling invoking the compiler, scheduling."),(0,r.kt)("p",null,"We are reusing the very fast scheduler provided by\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://ninja-build.org/manual.html"}),"Ninja")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Where other build systems are high-level languages, Ninja aims to be an\nassembler.")),(0,r.kt)("p",null,"BuckleScript outputs assembler style instructions consumed by Ninja which does\nscheduling very fast and provides good parallelism. By integrating with Ninja's\n",(0,r.kt)("inlineCode",{parentName:"p"},"restat")," attribute, we are able to implement the idea of a specialized content\nbased build system."),(0,r.kt)("p",null,"It is fast enough for 99% of use cases. For a project less than 1k files, the\ntime spent in an edit-build cycle is dominated by the compiler, but as project\ngrows to 10K files or even more, the time spent in compiler is stable and\nbounded due to our incremental design, however, the time will start be\ndominated by the scheduler."),(0,r.kt)("p",null,"For a nop build around 10k files, it takes around 700ms for Ninja to figure out\nnothing needs to be rebuilt."),(0,r.kt)("p",null,"The current Ninja model is simple, every time it is invoked, it will re-read\nbuild.ninja instructions, check stats of artifacts and do the scheduling."),(0,r.kt)("p",null,"Instead of making a long-lived compiler, we propose to have a long-lived\nscheduler. The complexity of a scheduler is significantly lower than a\ncompiler.  Having an in-memory scheduler will help reducing redundant work such\nas parsing build.ninja instructions which is around of size 2M for 10k files.\nWith the integration of  watch mode, it does not need stat all artifacts each\ntime, this should help increase the scalability of scheduler to 100K files or\neven more."),(0,r.kt)("h2",{id:"tests-on-a-synthetic-benchmark"},"Tests on a synthetic benchmark"),(0,r.kt)("p",null,"Our synthetic bench is borrowed from\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"http://blog.camlcity.org/blog/omake1.html"}),"OMake")," and public available\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/bucklescript/bsb-bench"}),"here"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The benchmark has these characteristics: The task is to build n^2 libraries\nwith n^2 modules each (for a given small number n), and the dependencies\nbetween the modules are created in a way so that we can stress both the\ndependency analyzer of the build utility and the ability to run commands in\nparallel.")),(0,r.kt)("p",null,"We modified the benchmark to add interface file for each implementation file."),(0,r.kt)("p",null,"The benchmark is running on MacBook Pro 18 with CPU 2.6 GHz Intel Core i7,\nMemory 32 GB 2400 MHz DDR4"),(0,r.kt)("p",null,"The test is running against ",(0,r.kt)("inlineCode",{parentName:"p"},"n = 3,5,7,9"),", where the source code size would be\n",(0,r.kt)("inlineCode",{parentName:"p"},"2*3^4=162"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"2*5^4=1250"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"2*7^4=4802"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"2*9**4=13122"),"."),(0,r.kt)("p",null,"Below is what we get for a cold build from scratch:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",(0,a.Z)({parentName:"tr"},{align:null}),"Source size"),(0,r.kt)("th",(0,a.Z)({parentName:"tr"},{align:null}),"Clean build (ms)"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"0162"),(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"684")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"1250"),(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"5,100")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"4802"),(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"24,112")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"13122"),(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"125,248")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",(0,a.Z)({parentName:"tr"},{align:null}),"Source size"),(0,r.kt)("th",(0,a.Z)({parentName:"tr"},{align:null}),"Nop build (ms)"),(0,r.kt)("th",(0,a.Z)({parentName:"tr"},{align:null}),"Touching root module (m_1_1_1_1.ml)"),(0,r.kt)("th",(0,a.Z)({parentName:"tr"},{align:null}),"Touching (m_1_1_1.mli)"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"0162"),(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"16"),(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"59"),(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"54")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"1250"),(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"79"),(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"120"),(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"133")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"4802"),(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"266"),(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"369"),(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"367")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"13122"),(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"728"),(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"963"),(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"962")))),(0,r.kt)("p",null,"We can see from the table as size grows, the time spent in edit-build cycle shifts from compilation to the scheduler, this is due to the fact that Ninja scheduler does not save the work for each test."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",(0,a.Z)({parentName:"tr"},{align:null}),"Source size"),(0,r.kt)("th",(0,a.Z)({parentName:"tr"},{align:null}),"Adding value to root module (m_1_1_1_1.ml)"),(0,r.kt)("th",(0,a.Z)({parentName:"tr"},{align:null}),"Changing root interface"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"0162"),(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"56"),(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"70")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"1250"),(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"131"),(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"155")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"4802"),(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"370"),(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"428")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"13122"),(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"969"),(0,r.kt)("td",(0,a.Z)({parentName:"tr"},{align:null}),"991")))),(0,r.kt)("p",null,"The verbose build log for adding values on source of size ",(0,r.kt)("inlineCode",{parentName:"p"},"13122")," is as below:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-sh"}),"test9>ninja -C lib/bs -v\nninja: Entering directory `lib/bs'\n[1/2] /usr/local/lib/node_modules/bs-platform/lib/bsc.exe    -w -30-40+6+7+27+32..39+44+45+101 -nostdlib -I '/Users/hongbozhang/git/bsb-bench/test9/node_modules/bs-platform/lib/ocaml' -color always -c -o src/dir_1_1/m_1_1_1_1.mlast -bs-syntax-only -bs-binary-ast /Users/hongbozhang/git/bsb-bench/test9/src/dir_1_1/m_1_1_1_1.ml\n[2/2] /usr/local/lib/node_modules/bs-platform/lib/bsb_helper.exe  -g 0 -MD src/dir_1_1/m_1_1_1_1.mlast\n[1/5905] /usr/local/lib/node_modules/bs-platform/lib/bsc.exe -bs-package-name test  -bs-package-output commonjs:lib/js/src/dir_1_1 -bs-assume-has-mli -bs-no-builtin-ppx-ml -bs-no-implicit-include   -I src/dir_4_6 -I src/dir_4_1 -I src/dir_4_8 -I src/dir_6_5 -I src/dir_6_2 -I src/dir_8_3 -I src/dir_8_4 -I src/dir_2_3 -I src/dir_2_4 -I src/dir_6_3 -I src/dir_4_9 -I src/dir_6_4 -I src/dir_4_7 -I src/dir_2_5 -I src/dir_2_2 -I src/dir_8_5 -I src/dir_8_2 -I src/dir_9_9 -I src/dir_3_7 -I src/dir_1_3 -I src/dir_9_7 -I src/dir_3_9 -I src/dir_1_4 -I src/dir_7_6 -I src/dir_7_1 -I src/dir_5_5 -I src/dir_7_8 -I src/dir_5_2 -I src/dir_3_8 -I src/dir_9_6 -I src/dir_1_5 -I src/dir_9_1 -I src/dir_1_2 -I src/dir_3_6 -I src/dir_9_8 -I src/dir_3_1 -I src/dir_5_3 -I src/dir_5_4 -I src/dir_7_9 -I src/dir_7_7 -I src/dir_8_7 -I src/dir_2_9 -I src/dir_8_9 -I src/dir_2_7 -I src/dir_4_2 -I src/dir_6_8 -I src/dir_4_5 -I src/dir_6_1 -I src/dir_6_6 -I src/dir_2_1 -I src/dir_2_6 -I src/dir_8_8 -I src/dir_8_1 -I src/dir_2_8 -I src/dir_8_6 -I src/dir_6_7 -I src/dir_6_9 -I src/dir_4_4 -I src/dir_4_3 -I src/dir_7_2 -I src/dir_7_5 -I src/dir_5_8 -I src/dir_5_1 -I src/dir_5_6 -I src/dir_1_9 -I src/dir_3_4 -I src/dir_3_3 -I src/dir_9_4 -I src/dir_1_7 -I src/dir_9_3 -I src/dir_5_7 -I src/dir_7_4 -I src/dir_5_9 -I src/dir_7_3 -I src/dir_9_2 -I src/dir_1_1 -I src/dir_9_5 -I src/dir_1_6 -I src/dir_3_2 -I src/dir_1_8 -I src/dir_3_5  -w -30-40+6+7+27+32..39+44+45+101 -nostdlib -I '/Users/hongbozhang/git/bsb-bench/test9/node_modules/bs-platform/lib/ocaml' -color always -o src/dir_1_1/m_1_1_1_1.cmj -c  src/dir_1_1/m_1_1_1_1.mlast\nFile \"/Users/hongbozhang/git/bsb-bench/test9/src/dir_1_1/m_1_1_1_1.ml\", line 4, characters 4-5:\nWarning 32: unused value a.\n")),(0,r.kt)("p",null,"Ignoring the preprocess stage, We can see there are 5906 jobs scheduled but\nonly one job is processed. This is because adding a single value does not\nchange ",(0,r.kt)("inlineCode",{parentName:"p"},"m_1_1_1_1.cmj")," so that the change of propogation is stopped\nimmediately."),(0,r.kt)("p",null,"The result is surprisingly good even if change the interface of root files, by\nlooking at the verbose build log:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-sh"}),"test9>ninja -C lib/bs -v\nninja: Entering directory `lib/bs'\n[1/2] /usr/local/lib/node_modules/bs-platform/lib/bsc.exe    -w -30-40+6+7+27+32..39+44+45+101 -nostdlib -I '/Users/hongbozhang/git/bsb-bench/test9/node_modules/bs-platform/lib/ocaml' -color always -c -o src/dir_1_1/m_1_1_1_1.mliast -bs-syntax-only -bs-binary-ast /Users/hongbozhang/git/bsb-bench/test9/src/dir_1_1/m_1_1_1_1.mli\n[2/2] /usr/local/lib/node_modules/bs-platform/lib/bsb_helper.exe  -g 0 -MD src/dir_1_1/m_1_1_1_1.mliast\n[1/5906] /usr/local/lib/node_modules/bs-platform/lib/bsc.exe -bs-package-name test  -bs-package-output commonjs:lib/js/src/dir_1_1 -bs-no-builtin-ppx-mli -bs-no-implicit-include  -I src/dir_4_6 -I src/dir_4_1 -I src/dir_4_8 -I src/dir_6_5 -I src/dir_6_2 -I src/dir_8_3 -I src/dir_8_4 -I src/dir_2_3 -I src/dir_2_4 -I src/dir_6_3 -I src/dir_4_9 -I src/dir_6_4 -I src/dir_4_7 -I src/dir_2_5 -I src/dir_2_2 -I src/dir_8_5 -I src/dir_8_2 -I src/dir_9_9 -I src/dir_3_7 -I src/dir_1_3 -I src/dir_9_7 -I src/dir_3_9 -I src/dir_1_4 -I src/dir_7_6 -I src/dir_7_1 -I src/dir_5_5 -I src/dir_7_8 -I src/dir_5_2 -I src/dir_3_8 -I src/dir_9_6 -I src/dir_1_5 -I src/dir_9_1 -I src/dir_1_2 -I src/dir_3_6 -I src/dir_9_8 -I src/dir_3_1 -I src/dir_5_3 -I src/dir_5_4 -I src/dir_7_9 -I src/dir_7_7 -I src/dir_8_7 -I src/dir_2_9 -I src/dir_8_9 -I src/dir_2_7 -I src/dir_4_2 -I src/dir_6_8 -I src/dir_4_5 -I src/dir_6_1 -I src/dir_6_6 -I src/dir_2_1 -I src/dir_2_6 -I src/dir_8_8 -I src/dir_8_1 -I src/dir_2_8 -I src/dir_8_6 -I src/dir_6_7 -I src/dir_6_9 -I src/dir_4_4 -I src/dir_4_3 -I src/dir_7_2 -I src/dir_7_5 -I src/dir_5_8 -I src/dir_5_1 -I src/dir_5_6 -I src/dir_1_9 -I src/dir_3_4 -I src/dir_3_3 -I src/dir_9_4 -I src/dir_1_7 -I src/dir_9_3 -I src/dir_5_7 -I src/dir_7_4 -I src/dir_5_9 -I src/dir_7_3 -I src/dir_9_2 -I src/dir_1_1 -I src/dir_9_5 -I src/dir_1_6 -I src/dir_3_2 -I src/dir_1_8 -I src/dir_3_5  -w -30-40+6+7+27+32..39+44+45+101 -nostdlib -I '/Users/hongbozhang/git/bsb-bench/test9/node_modules/bs-platform/lib/ocaml' -color always -o src/dir_1_1/m_1_1_1_1.cmi -c  src/dir_1_1/m_1_1_1_1.mliast\n[2/5906] /usr/local/lib/node_modules/bs-platform/lib/bsc.exe -bs-package-name test  -bs-package-output commonjs:lib/js/src/dir_1_1 -bs-assume-has-mli -bs-no-builtin-ppx-ml -bs-no-implicit-include   -I ...  -color always -o src/dir_1_1/m_1_1_1_1.cmj -c  src/dir_1_1/m_1_1_1_1.mlast\n[3/5906] /usr/local/lib/node_modules/bs-platform/lib/bsc.exe -bs-package-name test  -bs-package-output commonjs:lib/js/src/dir_1_1 -bs-assume-has-mli -bs-no-builtin-ppx-ml -bs-no-implicit-include   -I ...  -w -30-40+6+7+27+32..39+44+45+101 -nostdlib -I '/Users/hongbozhang/git/bsb-bench/test9/node_modules/bs-platform/lib/ocaml' -color always -o src/dir_1_1/m_1_1_2_2.cmj -c  src/dir_1_1/m_1_1_2_2.mlast\n[4/5906] /usr/local/lib/node_modules/bs-platform/lib/bsc.exe -bs-package-name test  -bs-package-output commonjs:lib/js/src/dir_1_1 -bs-assume-has-mli -bs-no-builtin-ppx-ml -bs-no-implicit-include   -I ... -color always -o src/dir_1_1/m_1_1_2_1.cmj -c  src/dir_1_1/m_1_1_2_1.mlast\n[5/5906] /usr/local/lib/node_modules/bs-platform/lib/bsc.exe -bs-package-name test  -bs-package-output commonjs:lib/js/src/dir_1_1 -bs-assume-has-mli -bs-no-builtin-ppx-ml -bs-no-implicit-include   -I ... -color always -o src/dir_1_1/m_1_1_2_3.cmj -c  src/dir_1_1/m_1_1_2_3.mlast\n[6/5906] /usr/local/lib/node_modules/bs-platform/lib/bsc.exe -bs-package-name test  -bs-package-output commonjs:lib/js/src/dir_1_1 -bs-assume-has-mli -bs-no-builtin-ppx-ml -bs-no-implicit-include   -I ... -color always -o src/dir_1_1/m_1_1_2_9.cmj -c  src/dir_1_1/m_1_1_2_9.mlast\n[7/5906] /usr/local/lib/node_modules/bs-platform/lib/bsc.exe -bs-package-name test  -bs-package-output commonjs:lib/js/src/dir_1_1 -bs-assume-has-mli -bs-no-builtin-ppx-ml -bs-no-implicit-include   -I ... -color always -o src/dir_1_1/m_1_1_2_4.cmj -c  src/dir_1_1/m_1_1_2_4.mlast\n[8/5906] /usr/local/lib/node_modules/bs-platform/lib/bsc.exe -bs-package-name test  -bs-package-output commonjs:lib/js/src/dir_1_1 -bs-assume-has-mli -bs-no-builtin-ppx-ml -bs-no-implicit-include   -I ... -color always -o src/dir_1_1/m_1_1_2_5.cmj -c  src/dir_1_1/m_1_1_2_5.mlast\n[9/5906] /usr/local/lib/node_modules/bs-platform/lib/bsc.exe -bs-package-name test  -bs-package-output commonjs:lib/js/src/dir_1_1 -bs-assume-has-mli -bs-no-builtin-ppx-ml -bs-no-implicit-include   -I ... -color always -o src/dir_1_1/m_1_1_2_6.cmj -c  src/dir_1_1/m_1_1_2_6.mlast\n[10/5906] /usr/local/lib/node_modules/bs-platform/lib/bsc.exe -bs-package-name test  -bs-package-output commonjs:lib/js/src/dir_1_1 -bs-assume-has-mli -bs-no-builtin-ppx-ml -bs-no-implicit-include   -I ... -color always -o src/dir_1_1/m_1_1_2_7.cmj -c  src/dir_1_1/m_1_1_2_7.mlast\n[11/5906] /usr/local/lib/node_modules/bs-platform/lib/bsc.exe -bs-package-name test  -bs-package-output commonjs:lib/js/src/dir_1_1 -bs-assume-has-mli -bs-no-builtin-ppx-ml -bs-no-implicit-include   -I ... -color always -o src/dir_1_1/m_1_1_2_8.cmj -c  src/dir_1_1/m_1_1_2_8.mlast\n")),(0,r.kt)("p",null,"The log means that there are 5906 jobs to be scheduled but only 11 jobs\nprocessed. This is because there only 9 direct dependencies, the cmj/cmi\nchanges' propogation stops in the first level of dependency, indirect\ndependencies are not propagated any more since the intermediate representation\nstays stable after that. There are 9 more jobs to do compared with changing\nimplementation but the latency only increased by 30ms, which means the\nscheduler does a good job in parallelism."),(0,r.kt)("p",null,"The real world scenario may be a bit worse than our synthetic benchmark, since\nour syntethic benchmark only impose dependencies across implementation files,\nthe dependencies across interface files are flat."),(0,r.kt)("p",null,"To conclude, currently BuckleScript scales very well to projects with around\n10k files, and with some work in improving the scheduler, we believe it is not\ntoo difficult to scale it to 100K files or even more. To reach such enormous\nscalability in a reliable way, we propose to have a long-lived scheduler and\nfast cold compiler. The language interface design and the design of the data\nstructure for the implementation will make the longest rebuild propogation\nchain bounded by two in most cases."))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2019-01-11",previewImg:null,title:"In search of lightning feedback loop in a large codebase",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2019-01-11-scalable.mdx"}},61757:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"an-improved-bsvariadic-decorator"},"An improved ",(0,r.kt)("inlineCode",{parentName:"h2"},"bs.variadic")," decorator"),(0,r.kt)("p",null,"In previous releases, when a ",(0,r.kt)("inlineCode",{parentName:"p"},"bs.variadic")," external (previously called\n",(0,r.kt)("inlineCode",{parentName:"p"},"bs.splice")," prior to version ",(0,r.kt)("inlineCode",{parentName:"p"},"4.08"),") is present, its tail arguments needed to\nbe applied statically. In other words, the ",(0,r.kt)("inlineCode",{parentName:"p"},"external")," marked with\n",(0,r.kt)("inlineCode",{parentName:"p"},"bs.variadic"),", when used, requires a ",(0,r.kt)("em",{parentName:"p"},"literal")," array:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),'[@bs.module "path"][@bs.variadic]\nexternal join: array(string) => string = "join"\n\nlet _ = join([|"a", "b"|]) /* this is ok */\nlet f = b => join(b) /* compiler error when you try to abstract `join` */\n')),(0,r.kt)("p",null,"More importantly, such compilation error was leaky in cases such as this one:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"let f = join\n")),(0,r.kt)("p",null,"In the next release, we are going to lift such restriction. You'll be able to\ncall an external marked with ",(0,r.kt)("inlineCode",{parentName:"p"},"bs.variadic")," with an array reference, not just a\nliteral array."),(0,r.kt)("p",null,"Caveat: it's unclear how to support such first class ",(0,r.kt)("inlineCode",{parentName:"p"},"bs.variadic")," call in\nconjunction with ",(0,r.kt)("inlineCode",{parentName:"p"},"bs.new"),", so an external declaration that contains both will\ntrigger a compilation error. We'll try to figure out this particular case in\nthe future too."))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2019-03-01",previewImg:null,badge:"preview",title:"First-class bs.variadic Support in the Next Release",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2019-03-01-feature-preview-variadic.mdx"}},92605:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"new-changes"},"New Changes"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"bs-platform@5.0.0")," is released! There are quite a few bug fixes in this\nrelease  and refmt is synced up, a detailed list of changes is available\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/blob/master/Changes.md#500"}),"here"),"."),(0,r.kt)("p",null,"Several new features are introduced in this release:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"first class ",(0,r.kt)("inlineCode",{parentName:"p"},"bs.variadic")," support, documented\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"/blog/feature-preview-variadic"}),"here"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"we prebuilt binaries for Windows, MacOS and Linux, this will help reduce your\nCI build time significantly. For exotic OSes, it will fall back to build from\nsource")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"bs.deriving light config. For people who prefer short names, we make it\nconfigurable"))),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"[@bs.deriving { abstract: light }]\ntype t = {x: int};\n\nlet f = (obj: t) => obj->x;\n")),(0,r.kt)("p",null,"This is the last major release which is targeting OCaml 4.02.3, in the future\nwe will make major releases targeting OCaml 4.06."),(0,r.kt)("p",null,"Happy Hacking!"))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2019-03-21",previewImg:null,badge:"release",title:"Announcing BuckleScript 5.0",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2019-03-21-bucklescript-release-5-0.mdx"}},47122:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"new-test-release"},"New Test Release"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"bs-platform@6.0.0-dev.1")," is released, you can try it with ",(0,r.kt)("inlineCode",{parentName:"p"},"npm i -g\nbs-platform@next"),"!  (if you have permission issues, try ",(0,r.kt)("inlineCode",{parentName:"p"},"sudo npm i\n--unsafe-perm -g bs-platform@next"),")"),(0,r.kt)("p",null,"This is the first release that bucklescript compiler using OCaml 4.06.1\ntypechecker."),(0,r.kt)("p",null,"It also means that most language features from OCaml will trickle down\nautomatically."),(0,r.kt)("p",null,"It is not yet ready for production but we recommend you to try it (esp, new\nOCaml features between 4.02.3 and 4.06.1), note we expect users to have some\nissues in experiment, feedback is welcome!"))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2019-03-31",previewImg:null,badge:"testing",title:"Announcing BuckleScript 6.0.0-dev.1",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2019-03-31-bucklescript-release-6-0.mdx"}},59057:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"newest-changes"},"Newest Changes"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"bs-platform@5.0.1")," preview is available, try ",(0,r.kt)("inlineCode",{parentName:"p"},"npm i -g bs-platform@beta-4.02"),"!\nA detailed a list of changes is available\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/blob/master/Changes.md#501"}),"here")),(0,r.kt)("p",null,"Some notable new features in this release:"),(0,r.kt)("h3",{id:"react-jsx-v3"},"React JSX v3"),(0,r.kt)("p",null,"The new v3 JSX ppx is now available which means zero-cost for react-bindings\n(@rickyvetter will talk about it in a separate post)."),(0,r.kt)("h3",{id:"new-bsinline-decorator-for-library-authors"},"New ","[@bs.inline]"," decorator for library authors"),(0,r.kt)("p",null,"Our compilers have a pretty good inlining heuristics by default, in this\nrelease, we allow some user input for some fine-tuned inlining behavior. Read\nthis (",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/issues/3472"}),"https://github.com/BuckleScript/bucklescript/issues/3472"),") for more use\ncases."),(0,r.kt)("p",null,"A typical usage is as below"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),'module Platform = {\n  [@bs.inline] let ios = "ios";\n};\n')),(0,r.kt)("p",null,"If user wants to write an interface, it has to carry the payload though:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),'module Platform: {\n  [@bs.inline "ios"]\n  let ios: string;\n} = {\n  [@bs.inline]\n  let ios = "ios";\n};\n')),(0,r.kt)("p",null,"It is a bit verbose for library authors, but this should be transparent to\nlibrary users."),(0,r.kt)("p",null,"We are also actively working on a new offical release targeted to OCaml 4.06\nfor the forthcoming ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://www.reason-conf.com/"}),"reason-conf"),", below is\nproposed release schedule:"),(0,r.kt)("p",null,"We are going to support OCaml 4.06 and 4.02 at the same time for a while."),(0,r.kt)("p",null,"The corresponding versions for ",(0,r.kt)("inlineCode",{parentName:"p"},"bs-platform")," would be 5.(targeting 4.02 OCaml)\nand 6. (targeting 4.06)."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"5.*")," is recommended for production usage, bug fix is prioritized (tagged as\n",(0,r.kt)("inlineCode",{parentName:"p"},"beta-4.02")," for pre-rleases)"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"6.*")," is expected to have some issues but encouraged to experiment until we\nmake an official announcement it is great for production. (tagged as\n",(0,r.kt)("inlineCode",{parentName:"p"},"beta-4.06")," for pre-releases)"))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2019-04-09",previewImg:null,badge:"testing",title:"Announcing BuckleScript 5.0.1",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2019-04-09-bucklescript-release-5-0-1.mdx"}},13381:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"upcoming-changes"},"Upcoming Changes"),(0,r.kt)("p",null,"We are going to make releases of ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"mailto:bs-platform@5.0.4"}),"bs-platform@5.0.4")," and ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"mailto:bs-platform@6.0.1"}),"bs-platform@6.0.1"),", this\nrelease mostly contains bug fixes."),(0,r.kt)("p",null,"At the same time, we are introducing an internal change which should be fine\nfor average users."),(0,r.kt)("p",null,"If you are tooling authors, here are some details: previously we ship react_jsx\nppx as a stand-alone binary, for example, reactjs_jsx_ppx_v2.exe,\nreactjs_jsx_ppx_v2.exe. Recently we start more close integration with\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://reasonml.github.io"}),"reason"),", so it is absorbed into bsc.exe itself, we\nintroduced a flag to have react-jsx on/off (note these are internal flags, not\nexpected to be exposed to average users):"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"bsc.exe -bs-jsx 2 # turn on reactjs_jsx_ppx_v2\nbsc.exe -bs-jsx 3 # turn on reactjs_jsx_ppx_v3\n")),(0,r.kt)("p",null,"Like before, we also ship a stand alone bsppx.exe, it now absorbs\nreactjs_jsx_ppx as well."),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"bsppx.exe -bs-jsx 2 # turn on reactjs_jsx_ppx_v2\nbsppx.exe -bs-jsx 3 # turn on reactjs_jsx_ppx_v3\n")),(0,r.kt)("p",null,"The benefit of this change is that it help reduced the prebuilt binary size\nsignificantly and it also help shave 5~10ms per file compilation."),(0,r.kt)("p",null,"Another minor change we added, is that we introduced an env variable\n",(0,r.kt)("inlineCode",{parentName:"p"},"BS_VSCODE")," to help error messages more adapted to VsCode, see\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://bucklescript.github.io/docs/en/build-configuration#bs-vscode-error-output-adapted-for-vscode"}),"here"),"\nfor more details."))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2019-04-22",previewImg:null,title:"Architectural Changes in BuckleScript 5.0.4 and 6.0.1",badge:"release",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2019-04-22-bucklescript-release-5-0-4.mdx"}},91808:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"js-interop-in-bucklescript"},"JS Interop in BuckleScript"),(0,r.kt)("p",null,"When users start to use BuckleScript to develop applications targeting JS, they\nhave to interop with various APIs provided by the JS platform."),(0,r.kt)("p",null,"In theory, like ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://elm-lang.org/"}),"Elm"),", BuckleScript could ship a\ncomprehensive library which contains what most people would like to use daily.\nThis, however, is particularly challenging, given that JS is running on so many\nplatforms for example, ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://electronjs.org/"}),"Electron"),",\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://nodejs.org/"}),"Node")," and the Browser, yet each platform is still\nevolving quickly. So we have to provide a mechanism to allow users to bind to\nthe native JS API quickly in userland."),(0,r.kt)("p",null,"There are lots of trade-off when designing such a FFI bridge between OCaml and\nthe JavaScript API. Below, we list a few key items which we think have an\nimportant impact on our design."),(0,r.kt)("h2",{id:"interop-design-constraints"},"Interop design constraints"),(0,r.kt)("h3",{id:"bucklescript-is-still-ocaml--reason"},"BuckleScript is still OCaml / Reason"),(0,r.kt)("p",null,"We are not inventing a new language. In particular, we can not change the\nconcrete syntax of OCaml. Luckily, OCaml introduced\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://caml.inria.fr/pub/docs/manual-ocaml/extn.html#sec260"}),"attributes")," and\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://caml.inria.fr/pub/docs/manual-ocaml/extn.html#sec262"}),"extension nodes"),"\nsince 4.02, which allows us to customize the language to a minor extent. To be\na good citizen in the OCaml community, all attributes introduced by\nBuckleScript are prefixed with ",(0,r.kt)("inlineCode",{parentName:"p"},"bs"),"."),(0,r.kt)("h3",{id:"bare-metal-efficiency-should-always-be-possible-for-experts-in-pure-ocaml"},"Bare metal efficiency should always be possible for experts in pure OCaml"),(0,r.kt)("p",null,"Efficiency is at the heart of BuckleScript's design philosophy, in terms of\nboth compilation speed and runtime performance. While there were other strongly\ntyped functional languages running on the JS platform before we made\nBuckleScript, one thing in particular that confused us was that in those\nlanguages, people have to write ",(0,r.kt)("inlineCode",{parentName:"p"},"native JS")," to gain performance. Our goal is\nthat when performance really matters, it is still possible for experts to write\npure OCaml without digging into ",(0,r.kt)("inlineCode",{parentName:"p"},"native JS"),", so users don't have to make a\nchoice between performance and type safety."),(0,r.kt)("h2",{id:"easy-interop-using-raw-js"},"Easy interop using raw JS"),(0,r.kt)("p",null,"BuckleScript allows users to insert raw JS using extension nodes directly.\nPlease refer to the\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://bucklescript.github.io/docs/en/embed-raw-javascript"}),"documentation"),"\nfor details. Here we only talk about one of the most used styles: inserting raw\nJS code as a function."),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),'let getSafe: (array(int), int) => int = [%raw\n  (a, b) => {|\n    if (b>=0 && b < a.length) {\n        return a [b]\n     }\n     throw new Error("out of range")\n  |}\n];\n\nlet v = [|1, 2, 3|]->getSafe(-1);\n')),(0,r.kt)("p",null,"Here the raw extension node asks the user to list the parameters and function\nstatement in raw JS syntax. The generated JS code is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'function getSafe (a,b){\n    if (b>=0 && b < a.length) {\n        return a [b]\n     }\n     throw new Error("out of range")\n  };\n\nvar v = getSafe(/* array */[\n      1,\n      2,\n      3\n    ], -1);\n')),(0,r.kt)("p",null,"Inserting raw JS code as a function has several advantages:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It is relatively safe; there is no variable name polluting."),(0,r.kt)("li",{parentName:"ul"},"It is quite expressive since the user can express everything inside the function body."),(0,r.kt)("li",{parentName:"ul"},"The compiler still has some knowledge about the function, for example, its arity.")),(0,r.kt)("p",null,"Some advice about using this style:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Always annotate the raw function with explicit type annotation."),(0,r.kt)("li",{parentName:"ul"},"When annotating raw JS, you can use polymorphic types, but don\u2019t create them when you don\u2019t really need them. In general, non polymoprhic type is safer and more efficient."),(0,r.kt)("li",{parentName:"ul"},"Write a unit test for the function.")),(0,r.kt)("p",null,"Note that a nice thing about this mechanism is that no separate JS file is\nneeded, so no change to the build system is necessary in most cases. By using\nthis mechanism, BuckleScript users can already deal with most bindings."),(0,r.kt)("h2",{id:"interop-via-attributes"},"Interop via attributes"),(0,r.kt)("p",null,"If you are a developer busy shipping, the mechanism above should cover almost\neverything you need. A minor disadvange of that mechanism is that it comes with\na cost: a raw function can not be inlined since it is JavaScript, so the\nBuckleScript compiler does not have a deep knowledge about the function."),(0,r.kt)("p",null,"To demonstrate interop via attributes, we are going to show a small example of\nbinding to JS ",(0,r.kt)("inlineCode",{parentName:"p"},"date"),". There are lots of advanced topics in the\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://bucklescript.github.io/docs/en/interop-overview"}),"documentation"),"; here\nwe are only talking about one of the most-used methods for interop."),(0,r.kt)("p",null,"The key idea is to bind your JS object as ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Abstract_data_type"}),"an abstract data\ntype")," where a data type is\ndefined by its behavior from the point of view of a user of the data, instead\nof the data type\u2019s concrete representations."),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),'type date;\n\n[@bs.new]\nexternal fromFloat : float => date = "Date" ;\n[@bs.send]\nexternal getDate : date => float = "getDate" ;\n[@bs.send]\nexternal setDate : date => float => unit = "setDate";\n\nlet date = fromFloat (10000.0);\ndate->setDate (3.0);\nlet d = date -> getDate;\n')),(0,r.kt)("p",null,"The preceding code generates the following JS. As you can see, the binding\nitself is zero cost and serves as formal documentation."),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"var date = new Date(10000);\ndate.setDate(3);\nvar d = date.getDate();\n")),(0,r.kt)("p",null,"A typical workflow is that we create an abstract data type, create bindings for\na \u201cmaker\u201d using ",(0,r.kt)("inlineCode",{parentName:"p"},"bs.new"),", and bind methods using ",(0,r.kt)("inlineCode",{parentName:"p"},"bs.send"),"."),(0,r.kt)("p",null,"Thanks to native support of abstract data types in OCaml, the interop is easy\nto reason about."),(0,r.kt)("p",null,"Some advice when using this style:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Again, you can use polymorphic types in your annotations, but don't create\npolymorphic types when you don't need them."),(0,r.kt)("li",{parentName:"ul"},"Write a unit test for each external.")),(0,r.kt)("p",null,"As a comparison, we can create the same binding using ",(0,r.kt)("inlineCode",{parentName:"p"},"raw"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"type date;\nlet fromFloat: float => date = [%raw d => {|return new Date(d)|}];\nlet getDate: date => float = [%raw d => {|return d.getDate()|}];\nlet setDate: (date, float) => unit = [%raw\n  (d, v) => {|\n   d.setDate(v);\n   return 0; // ocaml representation of unit\n|}\n];\n\nlet date = fromFloat(10000.);\ndate->setDate( 3.);\nlet d = date->getDate;\n")),(0,r.kt)("p",null,"The generated JS is as follows, and you can see the cost:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"function fromFloat (d){return new Date(d)};\n\nfunction getDate (d){return d.getDate()};\n\nfunction setDate (d,v){\n   d.setDate(v);\n   return 0; // ocaml representation of unit\n};\n\nvar date = fromFloat(10000);\n\nsetDate(date, 3);\n\nvar d = getDate(date);\n")))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2019-05-21",previewImg:null,title:"A High Level Overview of BuckleScript Interop with JS",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2019-05-21-ffi-overview.mdx"}},8972:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"bs-platform")," 5.0.5 (for OCaml 4.02.3) and 6.0.2 (for OCaml 4.06.1) is\nreleased."),(0,r.kt)("p",null,"A detailed list of changes is available\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/blob/master/Changes.md#505"}),"here")),(0,r.kt)("p",null,"It has some critical bug fixes that we suggest users to upgrade."),(0,r.kt)("p",null,"Some feature enhancement is described as below:"),(0,r.kt)("h2",{id:"user-land-c-stubs-polyfill"},"User land C stubs polyfill"),(0,r.kt)("p",null,"Previously, for existing OCaml libraries which rely on some C primitives, it\nhas to be patched in source level. In this release, user can provide such\nsupport independently without patching the source code."),(0,r.kt)("p",null,"Suppose you have a Reason module which relies on an C primitive as below:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),'external ff : (int,int) => int = "caml_fancy_add" ;\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"caml_fancy_add")," is a C function for native code, now we can provide this\nsupport in a js files, what user needs to do is adding ",(0,r.kt)("inlineCode",{parentName:"p"},"caml_fancy_add")," to a\nglobal variable like this"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"/**\n * @param {int} x\n * @param {int} y\n * @returns {int}\n *\n */\nrequire('bs-platform/lib/js/caml_external_polyfill.js').register('caml_fancy_add',function(x,y){\n  return + ((\"\"+x ) + (\"\"+y))\n})\n")),(0,r.kt)("p",null,"Note this is an experimental feature that we don't suggest users to use it\nextensively, it is provided as an escape hatch. We are also expecting feedback\nto see how we could improve it, so there might be some backward incompatible\nchanges."),(0,r.kt)("h2",{id:"a-new-warning-number-105"},"A new warning number 105"),(0,r.kt)("p",null,"Previously, there are some scenarios that the Js function name is inferred\nduring the interop."),(0,r.kt)("p",null,"For example"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-ocaml"}),'external f : int -> int = "" [@@bs.val]\n')),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),'[@bs.val] external f : int => int = ""\n')),(0,r.kt)("p",null,"Here the JS function name is inferred as ",(0,r.kt)("inlineCode",{parentName:"p"},"f")," which is the same as OCaml\nfunction name."),(0,r.kt)("p",null,"Such ffi declaration is fragile to refactoring when changing names of f, it\nwill also change the name of js function name which is probably not what user\nexpected."),(0,r.kt)("p",null,"105 warning number is to help warn against this case (turned on by default)."),(0,r.kt)("h2",{id:"simplified-debugger-mode"},"Simplified debugger mode"),(0,r.kt)("p",null,"Previously, user has to add ",(0,r.kt)("inlineCode",{parentName:"p"},"-bs-g")," flag to ",(0,r.kt)("inlineCode",{parentName:"p"},"bsc-flags")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"bsconfig.json")," and\nadd one line code to the main module. Such code change is no longer needed,\nonly the flag is needed."),(0,r.kt)("h2",{id:"build-performance-improvement"},"Build performance improvement"),(0,r.kt)("p",null,"We improved the build performance and simplified the design of the build\nsignificantly in this release, we will have a separate post about it."),(0,r.kt)("p",null,"Happy hacking!"))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2019-06-26",previewImg:null,badge:"release",title:"Announcing BuckleScript 5.0.5 and 6.0.2",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2019-06-26-bucklescript-release-5-0-5.mdx"}},23424:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"new-release"},"New Release"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"bs-platform")," 5.1.0 (for OCaml 4.02.3) and 6.1.0 (for OCaml 4.06.1) is ready\nfor testing."),(0,r.kt)("p",null,"You can install it via ",(0,r.kt)("inlineCode",{parentName:"p"},"npm i -g bs-platform@5.1.0")," (or ",(0,r.kt)("inlineCode",{parentName:"p"},"npm i -g\nbs-platform@6.1.0-dev.6"),")."),(0,r.kt)("p",null,"A detailed list of changes is available\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/blob/master/Changes.md#510"}),"here")),(0,r.kt)("p",null,"Some feature enhancements are described as follows:"),(0,r.kt)("h2",{id:"introducing-bsc-to-public"},"Introducing ",(0,r.kt)("inlineCode",{parentName:"h2"},"bsc")," to public"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"bsc")," is the underlying compiler which is invoked by ",(0,r.kt)("inlineCode",{parentName:"p"},"bsb"),". In this release we\nsimplified it a bit so that it can be used directly by customers for simple\ntasks. It is available after you have ",(0,r.kt)("inlineCode",{parentName:"p"},"bs-platform")," installed."),(0,r.kt)("p",null,"Suppose you have a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"test.re"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"let rec fib = n =>\n  switch (n) {\n  | 0\n  | 1 => 1\n  | n => fib(n - 1) + fib(n - 2)\n  };\nJs.log(fib(0));\n")),(0,r.kt)("p",null,"You can compile it directly via ",(0,r.kt)("inlineCode",{parentName:"p"},"bsc test.re"),", producing the following output:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"bucklescript.github.io>bsc test.re\n// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE\n'use strict';\nfunction fib(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return fib(n - 1 | 0) + fib(n - 2 | 0) | 0;\n  }\n}\nconsole.log(fib(0));\nexports.fib = fib;\n/*  Not a pure module */\n")),(0,r.kt)("p",null,"You can also get the inferred signature directly via ",(0,r.kt)("inlineCode",{parentName:"p"},"bsc -i test.re")),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"let fib: int => int;\n")),(0,r.kt)("p",null,"Or even better, you can do a one liner in bsc, via ",(0,r.kt)("inlineCode",{parentName:"p"},"-e")," option."),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"bucklescript>bsc -i -e 'let id = x => x'\nlet id: 'a => 'a;\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Note:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"bsc")," supports vanilla OCaml syntax as well, this is only recommended for\ntoying around, for serious development, ",(0,r.kt)("inlineCode",{parentName:"p"},"bsb")," is recommended.")),(0,r.kt)("h2",{id:"bstracing-to-visualize-build-profile"},(0,r.kt)("inlineCode",{parentName:"h2"},"bstracing")," to visualize build profile"),(0,r.kt)("p",null,"After you finish the build process, you can run ",(0,r.kt)("inlineCode",{parentName:"p"},"bstracing")," directly. This\ngenerates a data file called ",(0,r.kt)("inlineCode",{parentName:"p"},"tracing_${hour}_${minute}_${second}.json ")," which\ncan be loaded into chrome via ",(0,r.kt)("inlineCode",{parentName:"p"},"chrome://tracing"),"."),(0,r.kt)("p",null,"Below is a profile image that shows the tracing graph for a large project:"),(0,r.kt)("img",{src:"https://bucklescript.github.io/img/profile-1.png"}),(0,r.kt)("p",null,"And you can zoom-in to see more details:"),(0,r.kt)("img",{src:"https://bucklescript.github.io/img/profile-2.png"}),(0,r.kt)("h2",{id:"support-of-ppx-with-arguments"},"Support of ppx with arguments"),(0,r.kt)("p",null,"We extended the schema to support ppx with arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-json"}),'{\n  "ppx-specs": {\n      "type": "array",\n      "items": {\n          "oneOf" : [\n              {\n                  "type": "string" // single command\n              },\n              {\n                  "type" : "array", // command with args\n                  "items": {\n                      "type" : "string"\n                  }\n              }\n          ]\n      }\n  }\n}\n')),(0,r.kt)("h2",{id:"respect-node_path-when-resolving-dependent-modules"},"Respect ",(0,r.kt)("inlineCode",{parentName:"h2"},"NODE_PATH")," when resolving dependent modules"),(0,r.kt)("p",null,"Previously, ",(0,r.kt)("inlineCode",{parentName:"p"},"bsb")," was tied to npm package structures by searching\n",(0,r.kt)("inlineCode",{parentName:"p"},"node_modules"),". In this release, ",(0,r.kt)("inlineCode",{parentName:"p"},"bsb")," also tries to search paths listed in\n",(0,r.kt)("inlineCode",{parentName:"p"},"NODE_PATH")," so that ",(0,r.kt)("inlineCode",{parentName:"p"},"bsb")," is no longer tied to the npm or yarn package manager."),(0,r.kt)("h2",{id:"build-performance-improvement"},"Build performance improvement"),(0,r.kt)("p",null,"Yes, performance is increased with each release!"),(0,r.kt)("p",null,"Quite a lot of work was spent in house-keeping this release. We changed the\ninternal data representation to a more compact format. Here is the result of\nusing ",(0,r.kt)("inlineCode",{parentName:"p"},"bstracing")," to show a comparison of clean building a large project around\n(2 ",(0,r.kt)("em",{parentName:"p"}," 5 ")," 5 ",(0,r.kt)("em",{parentName:"p"}," 5 ")," 5 = 1250 files):"),(0,r.kt)("p",null,"Version 5.0.6 (around 4.8s)"),(0,r.kt)("img",{src:"https://bucklescript.github.io/img/profile-5.png"}),(0,r.kt)("p",null,"Version 5.1.0 (around 4.2s)"),(0,r.kt)("img",{src:"https://bucklescript.github.io/img/profile-4.png"}),(0,r.kt)("p",null,"Happy hacking!"))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2019-08-12",previewImg:null,badge:"release",title:"Announcing BuckleScript 5.1.0",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2019-08-12-bucklescript-release-5-1-0.mdx"}},53027:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"new-release"},"New Release"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"bs-platform")," 5.2.0/6.2.0 is released, it contains several major enhancement\nthat we would like to share with you."),(0,r.kt)("p",null,"You can install it via ",(0,r.kt)("inlineCode",{parentName:"p"},"npm i -g bs-platform@5.2.0")),(0,r.kt)("h2",{id:"local-module-compiled-into-object"},"Local module compiled into object"),(0,r.kt)("p",null,"OCaml has an ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://people.mpi-sws.org/~dreyer/thesis/old/thesis050405.pdf"}),"advanced module\nsystem")," for\npeople to structure large scale applications, it supports first class module\nand higher-order module system which is unique compared to other ML-like\nlanguages such as F# and Haskell."),(0,r.kt)("p",null,"In previous versions, BuckleScript compiled local modules into a JS array\nwhereby global modules (module produced by a file)were transformed into JS\nobjects."),(0,r.kt)("p",null,"When a local module is compiled into a JS array, the field name is stripped\naway, which makes debugging and JS interop difficult. To make the debugging\nexperience better, we instrumented the array with field names in debug mode,\nthis mitigated the debugging issue, but still present challenges for JS\ninterop."),(0,r.kt)("p",null,"In this release, the compiler generates uniform representation for global\nmodule and local module -- idiomatic JS object, this makes OCaml's module\nsystem more valuable to JS target."),(0,r.kt)("p",null,"Below is an image showing the diff in this release"),(0,r.kt)("img",{src:"https://bucklescript.github.io/img/functor.png"}),(0,r.kt)("p",null,"As you can see, the ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," module changed from an array into an JS object."),(0,r.kt)("h2",{id:"pattern-match-code-generation-with-annotations"},"Pattern match code generation with annotations"),(0,r.kt)("p",null,"BuckleScript aims to generate readable code."),(0,r.kt)("p",null,"OCaml has a sophiscated pattern match compiler, it generates well optimized\ncode, however, for complex pattern matching, the constructor name is lost on\nnative backend, this is also one of the very few case where we generate magic\nnumber in JS backend, this makes debugging particularly challenging for large\ncomplex pattern match."),(0,r.kt)("p",null,"In this release, we made such information available to JS backend so that we\nannotate the generated JS code with its names."),(0,r.kt)("p",null,"Below is an image showing the diff in this release"),(0,r.kt)("img",{src:"https://bucklescript.github.io/img/pattern-match.png"}),(0,r.kt)("p",null,"In the future, we will explore if we can produce such annotation in the runtime without losing efficiency."),(0,r.kt)("h2",{id:"code-generation-improvement-in-various-places"},"Code generation improvement in various places"),(0,r.kt)("p",null,"We care about the generated code quality, and will always keep improving it\nregardless how good it is."),(0,r.kt)("p",null,"In this release, we improved the code generation in quite a lot of places\nincluding lazy evaluation, if branches and pattern match."),(0,r.kt)("p",null,"In particular, we added a data-flow pass to eliminate non-necessary staticfail\ncase."),(0,r.kt)("img",{src:"https://bucklescript.github.io/img/staticfail.png"}),(0,r.kt)("h2",{id:"important-bug-fixes"},"Important bug fixes"),(0,r.kt)("p",null,"This release also comes with a couple of important bug fixes, in particular,\n#3805 the stale build issue and #3823 the interaction with reason langauge\nservice."),(0,r.kt)("h2",{id:"upcoming-breaking-changes"},"Upcoming breaking changes"),(0,r.kt)("p",null,"In next release, we plan to ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://reasonml.chat/t/ann-remove-deprecated-getters-in-deriving-abstract-after-5-2-0/1908"}),"remove deprecated\ngetters"),"."),(0,r.kt)("p",null,"A detailed list of changes is available\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/blob/master/Changes.md#520"}),"here")),(0,r.kt)("p",null,"Happy hacking!"))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2019-09-23",previewImg:null,badge:"release",title:"Announcing BuckleScript 5.2.0 / 6.2.0",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2019-09-23-bucklescript-release-5-2-0.mdx"}},42082:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Note this article is for library authors, it has something in depth which is\nnot necessary for people who use BuckleScript at daily work."),(0,r.kt)("p",null,"When we build some generic data structure, abstract over function is not\nenough. For example,  a type safe generic balanced AVL tree not only relies on\nthe types of a comparison function, but also the identity of such function. Two\nbalanced AVL trees which are initialized over same type of comparison function\nstill can not be mixed."),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"module Eq1 = {\n  let eq = (x, y) => x == y;\n};\n\nmodule Eq2 = {\n  let eq = (x, y) => x == y;\n};\n")),(0,r.kt)("p",null,"Take the two modules above for example, they have the same type, but we need a\nway to mark their identity so that data structures instantiated using them can\nnot be mixed."),(0,r.kt)("p",null,"A traditional way is using functor:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"module Make = (\n  Cmp: {\n    type t;\n    let eq: (t, t) => bool;\n  }) : {\n type key = Cmp.t;\n type coll;\n let empty: coll;\n let add: (coll, key) => coll;\n} => {\n  open Cmp;\n  type key = t;\n  type coll = list(key);\n  let empty = [];\n  let add = (y: coll, e: key) =>\n    if (List.exists(x => eq(x, e), y)) {\n      y;\n    } else {\n      [e, ...y];\n    };\n};\n\nmodule Ins1 = Make({\n  type t = int;\n  let eq = (x, y) => x == y;\n});\n\nmodule Ins2 = Make({\n  type t = int;\n  let eq = (x, y) => x * x == y * y;\n});\n")),(0,r.kt)("p",null,"By marking ",(0,r.kt)("inlineCode",{parentName:"p"},"coll")," as abstract type, when such functor is\ninitialized,",(0,r.kt)("inlineCode",{parentName:"p"},"Ins1.coll")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Ins2.coll")," are no longer the same."),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"let v = [Ins1.empty, Ins2.empty];\n")),(0,r.kt)("p",null,"When mixing them together, we get a type error"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"File ..., line 31, characters 21-31:\nError: This expression has type Ins2.coll\n       but an expression was expected of type Ins1.coll\n")),(0,r.kt)("p",null,"There are some issues with such encoding:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"From runtime point of view, ",(0,r.kt)("inlineCode",{parentName:"p"},"Ins1")," is initialized during runtime, its\nimplementation is a ",(0,r.kt)("em",{parentName:"p"},"big closure"),", which means even if you only use on\nfunction in ",(0,r.kt)("inlineCode",{parentName:"p"},"Ins1")," module, all functions will be linked in.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"From user point of view, people has to call ",(0,r.kt)("inlineCode",{parentName:"p"},"Ins1.add")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Ins2.add")," instead\nof calling ",(0,r.kt)("inlineCode",{parentName:"p"},"Ins.add"),", this makes code less polymorphic."))),(0,r.kt)("p",null,"Now we introduce another encoding, note it is quite sophiscated that is\nrecommended only for library authors"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"module Cmp: {\n  type cmp('a, 'id);\n  let eq: (cmp('a, 'id), 'a, 'a) => bool;\n  module Make: (\n    M: {\n       type t;\n       let eq: (t, t) => bool;\n     }\n  ) => {\n    type identity;\n    let eq: cmp(M.t, identity);\n  };\n} = {\n  type cmp('a, 'id) = ('a, 'a) => bool;\n  module Make = (\n    M: {\n     type t;\n     let eq: (t, t) => bool;\n    }\n  ) => {\n    type identity;\n    include M;\n  };\n  let eq = (cmp, x, y) => cmp(x, y); /* This could be inlined by using externals */\n};\n\nopen Cmp;\n\nmodule Coll: {\n  type coll('k, 'id);\n  let empty: cmp('k, 'id) => coll('k, 'id);\n  let add: (coll('k, 'id), 'k) => coll('k, 'id);\n} = {\n  type coll('k, 'id) = {\n    eq: cmp('k, 'id),\n    data: list('k),\n  };\n\n  let empty = (type t, type identity, eq: cmp(t, identity)) => {\n    data: [],\n    eq,\n  };\n  let add = (x: coll('k, 'id), y: 'k) =>\n    if (List.exists(a => Cmp.eq(x.eq, a, y), x.data)) {\n      x;\n    } else {\n      {\n        data: [y, ...x.data],\n        eq: x.eq,\n      };\n    };\n};\n")),(0,r.kt)("p",null,"The key is the construction of Cmp modules, we create an abstract type ",(0,r.kt)("inlineCode",{parentName:"p"},"cmp"),"\nwhich is signed by a phantom type as its identity, it is unique whenever user\ncreate it by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"Make")," functor. Here we are still using functor, but it is\nsmall functor."),(0,r.kt)("p",null,"The usage is as below:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"module S0 = Make({\n  type t = int;\n  let eq = (x, y) => x == y;\n});\n\nmodule S1 = Make({\n  type t = int;\n  let eq = (x, y) => x * x == y * y;\n});\n\nlet v0 = Coll.empty(S0.eq);\nlet v1 = Coll.empty(S1.eq);\n\nlet a0 = Coll.add(v0, 1);\nlet a1 = Coll.add(v1, 1);\n")),(0,r.kt)("p",null,"In practice, we can make use of first class modules to get rid of functors from\nend users, which is saved for readers."),(0,r.kt)("p",null,"When we mix ",(0,r.kt)("inlineCode",{parentName:"p"},"a0")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"a1"),", we will get a type error"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"File ..., line 71, characters 13-15:\nError: This expression has type (int, S1.identity) Coll.coll\n       but an expression was expected of type (int, S0.identity) Coll.coll\n       Type S1.identity is not compatible with type S0.identity\n")),(0,r.kt)("p",null,"As you read here, by using such encoding, the data structure is more\ngeneralized from user point of view. The generated JS code is not in a big\nclosure so that it can be dead code eliminated better."),(0,r.kt)("p",null,"This style is extensively used in Belt encoding, we  encourage you to have a\nlook at its implementation for better ideas."))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2019-10-16",previewImg:null,title:"Another way of encoding type identity for BuckleScript libraries without using big functor",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2019-10-16-another-encoding.mdx"}},8130:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"new-major-dev-release-available"},"New major dev release available"),(0,r.kt)("p",null,"The new major version of BuckleScript is coming\n-",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/pull/3968"}),"7.0.0-dev.1")," is now\nreleased for testing!"),(0,r.kt)("p",null,"We are maintaining ",(0,r.kt)("inlineCode",{parentName:"p"},"5.*")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"6.*")," for OCaml ",(0,r.kt)("inlineCode",{parentName:"p"},"4.02")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"4.06")," for a while,\nsince this release we are moving forward and focusing on release 7.* (for OCaml\n4.06)."),(0,r.kt)("p",null,"This is a major release comes with lots of nice features listed\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/blob/master/Changes.md"}),"here"),"."),(0,r.kt)("p",null,"We talk about some highlights here"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"refmt upgraded to latest, it comes with better error message")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"OCaml Records compiled into JS objects"))),(0,r.kt)("p",null,"This is one of the most desired features, it is finally landed."),(0,r.kt)("p",null,"See the generated code below for excitement!"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"type t = {\n  x: int,\n  y: int,\n  z: int,\n};\n\nlet obj = {x: 3, y: 2, z: 2};\n\nlet obj2 = {...obj, y: 4};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"var obj2 = {\n  x: 3,\n  y: 4,\n  z: 2\n};\n\nvar obj = {\n  x: 3,\n  y: 2,\n  z: 2\n};\n")),(0,r.kt)("p",null,"This new change makes record much more useful and its interaction with\n",(0,r.kt)("inlineCode",{parentName:"p"},"private")," type; unboxed option type will make interop with JS much nicer!"),(0,r.kt)("p",null,"As always, we continue improving our optimizer in various\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/pull/3966/files?file-filters%5B%5D=.js"}),"commits"),",\nwe belive that not only a better language but also an implementation of high\nquality is key to push typed functional programming into industry."),(0,r.kt)("p",null,"Happy hacking!"))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2019-11-18",previewImg:null,badge:"testing",title:"What's new in BuckleScript v7 (Part 1)",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2019-11-18-whats-new-in-7-pt1.mdx"}},25449:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"new-dev-release"},"New ",(0,r.kt)("inlineCode",{parentName:"h2"},"dev")," Release"),(0,r.kt)("p",null,"The second dev release\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/pull/3995"}),"7.0.0-dev.2")," is\nreleased for testing!"),(0,r.kt)("p",null,"As we mentioned in the ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://bucklescript.github.io/blog/2019/11/18/whats-new-in-7"}),"previous\npost"),", we\ncompile records into js objects in this release. This makes the generated code\nmore idiomatic, however, this is not enough to write idiomatic bindings to\nmanipulate arbitrary js objects, since the key of js objects can be arbitrary\nwhich is not expressible in ReasonML syntax, so we support user level\ncustomization now, which makes idiomatic bindings really easy."),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),'type entry = {\n  [@bs.as "EXACT_MAPPING_TO_JS_LABEL"]\n  x: int,\n  [@bs.as "EXACT_2"]\n  y: int,\n  z: obj,\n}\nand obj = {\n  [@bs.as "hello"]\n  hi: int,\n};\n\nlet f4 = ({x, y, z: {hi}}) => (x + y + hi) * 2;\n')),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"function f4(param) {\n  return (((param.EXACT_MAPPING_TO_JS_LABEL + param.EXACT_2 | 0) + param.z.hello | 0) << 1);\n}\n")),(0,r.kt)("p",null,"As you can see, you can manipulate js objects using Reason pattern match syntax, the generated\ncode is highly efficient, more importantly, bindings to JS will be significantly simplifie."),(0,r.kt)("p",null,"Happy Hacking."))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2019-11-28",previewImg:null,badge:"testing",title:"What's new in BuckleScript v7 (Part 2)",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2019-11-28-whats-new-in-7-pt2.mdx"}},84218:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"happy-holiday-release"},"Happy Holiday Release!"),(0,r.kt)("p",null,(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/pull/4062"}),"bs-platform@7.0.2-dev.1"),"\nis released for testing!"),(0,r.kt)("p",null,"Try it via"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"npm i -g bs-platform@7.0.2-dev.1\n")),(0,r.kt)("p",null,"This release contains several bug fixes for\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/facebook/reason"}),"refmt"),"(updated from 3.5.1 to 3.5.4). We\nalso spent quite some time improving the compiler performance. For example, we\noptimized our specialized hash based data structures, which means that we can\nexpect a 5% better build time performance. We would like to collect more\nbenchmark data, so we are happy for any feedback / benchmarks from our\ncommunity!"),(0,r.kt)("p",null,"A highlighting feature is that we added Generalized Unboxed Support (so called\n","[@unboxed]"," annotations). Here's a short definition from the official OCaml\nManual:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"unboxed can be used on a type definition if the type is a single-field record\nor a concrete type with a single constructor that has a single argument. It\ntells the compiler to optimize the representation of the type by removing the\nblock that represents the record or the constructor (i.e. a value of this type\nis physically equal to its argument). In the case of GADTs, an additional\nrestriction applies: the argument must not be an existential variable,\nrepresented by an existential type variable, or an abstract type constructor\napplied to an existential type variable.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),": The beforementioned restriction about GADTs only applies to OCaml's\nnative compiler, not to BuckleScript's JavaScript compilation. So we will get\nthe maximum value with less confusing error messages!"),(0,r.kt)("p",null,'The exciting thing about this feature is that we will now have more ways of\nexpressing our programs in our typical type safe records and variants without\nsacrificing on runtime performance ("zero cost interop").'),(0,r.kt)("p",null,"The best way to understand this feature is by looking at the following\nexamples:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Unboxed variants:")),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"[@unboxed]\ntype t = A(int);\nlet x = A(3);\n")),(0,r.kt)("p",null,"will translate to following JS:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"var x = 3;\n")),(0,r.kt)("p",null,'As you can see, we are "unboxing" the ',(0,r.kt)("inlineCode",{parentName:"p"},"int")," value from the internal variant\nrepresentation, so the variant will get completely invisible to the runtime.\nGreat for e.g. mapping to stringly typed JavaScript enums!"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Unboxed Records (1 field only)")),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),'[@unboxed]\ntype t2 = {f: string};\nlet x = {f: "foo"};\n')),(0,r.kt)("p",null,"will translate to following JS:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'var x = "foo";\n')),(0,r.kt)("p",null,'The same principle as with variants. Now a lot of people will probably ask:\n"Why would I ever want a 1 field record?". There are multiple reasons, one of\nthem would be a ',(0,r.kt)("inlineCode",{parentName:"p"},"ref")," type, which is just a syntax sugar for a ",(0,r.kt)("inlineCode",{parentName:"p"},"{ contents:\n'a}")," record."),(0,r.kt)("p",null,"Another use case is for expressing high rank polymorphism without cost:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"[@unboxed]\ntype r = {f: 'a. 'a => 'a};\nlet map_pair = (r, (p1, p2)) => (r.f(p1), r.f(p2));\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"'a. 'a => 'a")," describes a polymorphic function interface, where ",(0,r.kt)("inlineCode",{parentName:"p"},"'a"),"\ncan be called with many different types (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"f(1)")," and ",(0,r.kt)("inlineCode",{parentName:"p"},'f("hi")'),"). The\ncompiler will not try to lock ",(0,r.kt)("inlineCode",{parentName:"p"},"'a")," for the first type it sees (e.g. the ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),")\non the first call site. The parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"'a")," is therefore polymorphic!"),(0,r.kt)("p",null,"By ",(0,r.kt)("inlineCode",{parentName:"p"},"unboxing")," those records with one polymorphic function,  we will get rid of\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/issues/4058"}),"value restriction for our existing encoding of uncurried\nfunction"),", this will\nbe a major feature!"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Unboxed GADTs:")),(0,r.kt)("p",null,"Since GADTs are lesser known in Reason syntax, we also added some OCaml snippet\nto get a better idea of how the example data structure is defined."),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),'[@unboxed]\ntype t =\n  | Any (\'a) : t;\n\nlet array = [|Any(3), Any("a")|];\n')),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-ocaml"}),'(* OCaml *)\ntype t =\n  | Any : \'a -> t\n[@@unboxed]\n\nlet array = [|Any 3; Any "a"|]\n')),(0,r.kt)("p",null,"The examples above will translate to following JS:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'var array = [ 3, "a"];\n')),(0,r.kt)("p",null,"As you can already tell, this feature will give us way better possibilities to\ndo interop with polymorphic array representations in JavaScript (without losing\nany type safetiness!)."),(0,r.kt)("p",null,"As a more concrete use-case, this will give users the possibility to define\ntypes such as ",(0,r.kt)("inlineCode",{parentName:"p"},"int_or_string"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," Even if this GADT ",(0,r.kt)("inlineCode",{parentName:"p"},"t")," contains an ADT ",(0,r.kt)("inlineCode",{parentName:"p"},"Any"),", it doesn't mean that\nit's the same as ",(0,r.kt)("inlineCode",{parentName:"p"},"any")," in TypeScript. An ",(0,r.kt)("inlineCode",{parentName:"p"},"Any")," value is constrained to a\ncertain contract (",(0,r.kt)("inlineCode",{parentName:"p"},"'a -> t"),"), the array ",(0,r.kt)("inlineCode",{parentName:"p"},'[|Any(3), Any("a")|]')," is inferred as a\n",(0,r.kt)("inlineCode",{parentName:"p"},"array(t)"),". When users try to use ",(0,r.kt)("inlineCode",{parentName:"p"},"Any")," values, they need to unpack them,\nprocess the value inside, and repack them again. Pretty neat, right?"),(0,r.kt)("h3",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"This release will introduce the ",(0,r.kt)("inlineCode",{parentName:"p"},"[@unbox]")," annotation to give us better ways to\ndo zero cost interop with variants, records, higher kinded polymorphic\nfunctions, and GADTs. Under the hood improvements will give us better\nperformance as well!"),(0,r.kt)("p",null,"We are really excited about these changes, and we hope so are you. Please check\nout our newest ",(0,r.kt)("inlineCode",{parentName:"p"},"bs-platform@7.0.2-dev.1")," release and let us know if you find\nany issues!"),(0,r.kt)("p",null,"A detailed list of changes is available here:\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/blob/master/Changes.md#702"}),"https://github.com/BuckleScript/bucklescript/blob/master/Changes.md#702")),(0,r.kt)("p",null,"Happy hacking!"),(0,r.kt)("h3",{id:"appendix"},"Appendix"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"A sophiscated explanation on why ",(0,r.kt)("inlineCode",{parentName:"strong"},"unboxed")," lifts some OCaml's type system\nlimitations")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"structural types (objects, classes, polymorphic variants, functions, etc) in\nOCaml are regular types, ocaml always do the expansion when dealing with such\ntypes, there is some limitations for such structural types, for example, non\nregular definitions are not allowed. Non structural types (variants, records)\ndoes not have such limitations, with ",(0,r.kt)("inlineCode",{parentName:"p"},"unboxed"),", we can use non structural\ntypes as an indirection without changing its runtime representations.")))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2019-12-20",previewImg:null,badge:"release",title:"Announcing BuckleScript 7.0.2-dev.1",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2019-12-20-bucklescript-release-7-0-2.mdx"}},49651:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"about-this-release"},"About this Release"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"bs-platform@7.1.0")," is a major release. You can try it with ",(0,r.kt)("inlineCode",{parentName:"p"},"npm i -g\nbs-platform"),"!  (If you have permission issues, try ",(0,r.kt)("inlineCode",{parentName:"p"},"sudo npm i --unsafe-perm -g\nbs-platform"),")"),(0,r.kt)("p",null,"It was called 7.0.2 but bumped into 7.1.0 due to a soundness fix (a breaking\nchange) as follows:"),(0,r.kt)("p",null,"Previously, the empty array ",(0,r.kt)("inlineCode",{parentName:"p"},"[||]")," was polymorphic. This happens to be true,\nsince in native an array is not resizable, so users cannot do anything with it.\nBut in JS, we introduced a binding for ",(0,r.kt)("inlineCode",{parentName:"p"},"push")," which can change the size of an\narray dynamically. In this case, an empty array cannot be polymorphic any more."),(0,r.kt)("p",null,"Removing ",(0,r.kt)("inlineCode",{parentName:"p"},"push")," is possible, but it makes arrays in JS context less useful. To\nfix this issue while keeping ",(0,r.kt)("inlineCode",{parentName:"p"},"push"),", we make ",(0,r.kt)("inlineCode",{parentName:"p"},"[||]")," weakly typed so that its\ntype inference is deferred until the first time it is used. If it is never used\nacross the module, it has to be annotated with a concrete type; otherwise, the\ntype checker will complain."),(0,r.kt)("p",null,"Several highlighted features are listed as follows:"),(0,r.kt)("h2",{id:"raw-javascript-parsingchecking"},"Raw JavaScript Parsing/Checking"),(0,r.kt)("p",null,"BuckleScript allows users to embed raw JavaScript code as an escape hatch; it\nused to treat such piece of code as a black box."),(0,r.kt)("p",null,"In this release we vendor a JavaScript parser (thanks to\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/facebook/flow"}),"flowtype"),") for syntax checking and simple\nsemantics analysis over ",(0,r.kt)("inlineCode",{parentName:"p"},"raw"),". This is on-going work, but it is already useful\nnow."),(0,r.kt)("p",null,"First, we now report syntax errors properly for ",(0,r.kt)("inlineCode",{parentName:"p"},"raw"),"."),(0,r.kt)("p",null,"Second, for simple semantics analysis, we can tell whether the code inside raw\nis a function or not and the arity of raw function:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-ocaml"}),'let f = [%raw "function(x){return x}"]\n')),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),'let f = [%raw "function(x){return x}"];\n')),(0,r.kt)("p",null,"Now we know ",(0,r.kt)("inlineCode",{parentName:"p"},"f")," is a function declaration with no side effect; it can be\nremoved by the dead code analyzer if not used. We also know its arity so that\nwhen it's called we know whether it's fully applied or not."),(0,r.kt)("p",null,"Because this sort of information can be derived from ",(0,r.kt)("inlineCode",{parentName:"p"},"raw")," directly, the\nspecial ",(0,r.kt)("inlineCode",{parentName:"p"},"raw")," form we introduced as follows is no longer needed:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-ocaml"}),"let f = fun%raw x -> {|x|}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"let f = [%raw x => {|x|}];\n")),(0,r.kt)("p",null,"To reduce interop API surface, this feature will now be discouraged."),(0,r.kt)("p",null,"We're also exploring using such knowledge on JS literals and regexes checking."),(0,r.kt)("h2",{id:"unboxed-types"},"Unboxed Types"),(0,r.kt)("p",null,"One major feature introduced in this release is ",(0,r.kt)("strong",{parentName:"p"},"unboxed types")," which is\nblogged ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://bucklescript.github.io/blog/2019/12/20/release-7-02"}),"here"),"."),(0,r.kt)("h2",{id:"uniform-warning-system"},"Uniform Warning System"),(0,r.kt)("p",null,"Previously warnings are reported in two ways:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The OCaml compiler style: ",(0,r.kt)("inlineCode",{parentName:"li"},"-w +10")),(0,r.kt)("li",{parentName:"ul"},"Ad-hoc warnings introduced by flags ",(0,r.kt)("inlineCode",{parentName:"li"},"-bs-warn-unimplemented-external"))),(0,r.kt)("p",null,"In this release, we  make such integration so that BuckleScript warnings are\nhandled in the same way as OCaml's own warnings, for example, the warning\nattribute below can also turn off  BuckleScript warnings now."),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),'[@warning "-101"]; // file-level config\n')),(0,r.kt)("p",null,"Based on this effort, we have changed all BuckleScript warnings into OCaml\nstyle warnings to reduce user-level complexity."),(0,r.kt)("p",null,"The newly introduced warnings are listed via ",(0,r.kt)("inlineCode",{parentName:"p"},"bsc -warn-help"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"101 BuckleScript warning: Unused bs attributes\n102 BuckleScript warning: polymorphic comparison introduced (maybe unsafe)\n103 BuckleScript warning: about fragile FFI definitions\n104 BuckleScript warning: bs.deriving warning with customized message\n105 BuckleScript warning: the external name is inferred from val name is unsafe from refactoring when changing value name\n106 BuckleScript warning: Unimplemented primitive used:\n107 BuckleScript warning: Integer literal exceeds the range of representable integers of type int\n108 BuckleScript warning: Uninterpreted delimiters (for unicode)\n")),(0,r.kt)("p",null,"We also recommend users to turn on ",(0,r.kt)("inlineCode",{parentName:"p"},"warnerror")," and only disable warnings for\nsome specific files."),(0,r.kt)("p",null,"We've also upgraded the Reason parser ",(0,r.kt)("inlineCode",{parentName:"p"},"refmt")," to 3.6.0."),(0,r.kt)("p",null,"A full list of changes is available here:\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/blob/master/Changes.md#702"}),"https://github.com/BuckleScript/bucklescript/blob/master/Changes.md#702")))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2020-02-04",previewImg:null,tags:["Release"],title:"Announcing BuckleScript 7.1.0",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2020-02-04-bucklescript-release-7-1-0.mdx"}},32357:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction-to-union-types"},"Introduction to Union Types"),(0,r.kt)("p",null,(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/advanced-types.html#union-types"}),"Union\ntypes"),"\ndescribe a value that can be one of several types. In JS, it is common to use\nthe vertical bar (|) to separate each type, so ",(0,r.kt)("inlineCode",{parentName:"p"},"number | string | boolean"),"  is\nthe type of a value that can be a number, a string, or a boolean."),(0,r.kt)("p",null,"Following ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://bucklescript.github.io/blog/2019/12/20/release-7-02"}),"the last\npost")," since the\nintroduction of unboxed attributes in ",(0,r.kt)("inlineCode",{parentName:"p"},"7.1.0"),", we can create such types as\nfollows:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-ocaml"}),"type t =\n    | Any : 'a  -> t\n[@@unboxed]\nlet a (v : a) = Any v\nlet b (v : b) = Any v\nlet c (v : c) = Any v\n")),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"[@unboxed]\ntype t =\n  | Any('a): t;\nlet a = (v: a) => Any(v);\nlet b = (v: b) => Any(v);\nlet c = (v: c) => Any(v);\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Note:")," due to the ",(0,r.kt)("inlineCode",{parentName:"p"},"unboxed")," attribute, ",(0,r.kt)("inlineCode",{parentName:"p"},"Any a")," shares the same runtime\nrepresentation as ",(0,r.kt)("inlineCode",{parentName:"p"},"a"),"; however, we need to make sure that user can only\nconstruct values of type ",(0,r.kt)("inlineCode",{parentName:"p"},"a"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"b")," , or ",(0,r.kt)("inlineCode",{parentName:"p"},"c")," into type ",(0,r.kt)("inlineCode",{parentName:"p"},"t"),". By making use of the\nmodule system, we can achieve this:")),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-ocaml"}),"module A_b_c : sig\n  type t\n  val a : a -> t\n  val b : b -> t\n  val c : c -> t\nend= struct\ntype t =\n    | Any : 'a  -> t\n[@@unboxed]\nlet a (v : a) = Any v\nlet b (v : b) = Any v\nlet c (v : c) = Any v\nend\n")),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"module A_b_c: {\n  type t;\n  let a: a => t;\n  let b: b => t;\n  let c: c => t;\n} = {\n  [@unboxed]\n  type t =\n    | Any('a): t;\n  let a = (v: a) => Any(v);\n  let b = (v: b) => Any(v);\n  let c = (v: c) => Any(v);\n};\n")),(0,r.kt)("p",null,"What happens when we need to know specifically whether we have a value of type ",(0,r.kt)("inlineCode",{parentName:"p"},"a"),"? This is a case by case issue; it depends on whether there are some intersections in the runtime encoding of ",(0,r.kt)("inlineCode",{parentName:"p"},"a"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"b")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"c"),". For some primitive types, it is easy enough to use ",(0,r.kt)("inlineCode",{parentName:"p"},"Js.typeof")," to tell the difference between, e.g, ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,r.kt)("p",null,"Like ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-guards-and-differentiating-types"}),"type guards in typescript"),", we have to trust the user knowledge to differentiate between union types. However, such user level knowledge is isolated in a single module so that we can reason about its correctness locally."),(0,r.kt)("p",null,"Let's have a simple example, ",(0,r.kt)("inlineCode",{parentName:"p"},"number_or_string")," first:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-ocaml"}),'module Number_or_string : sig\n    type t\n    type case =\n        | Number of float\n        | String of string\n    val number : float -> t\n    val string : string -> t\n    val classify : t -> case\nend = struct\n    type t =\n        | Any : \'a -> t\n    [@@unboxed]\n    type case =\n        | Number of float\n        | String of string\n    let number (v : float) = Any v\n    let string (v : string) = Any v\n    let classify (Any v : t) : case =\n        if Js.typeof v = "number" then Number (Obj.magic v  : float)\n        else String (Obj.magic v : string)\nend\n')),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),'module Number_or_string: {\n  type t;\n  type case =\n    | Number(float)\n    | String(string);\n  let number: float => t;\n  let string: string => t;\n  let classify: t => case;\n} = {\n  [@unboxed]\n  type t =\n    | Any(\'a): t;\n  type case =\n    | Number(float)\n    | String(string);\n  let number = (v: float) => Any(v);\n  let string = (v: string) => Any(v);\n  let classify = (Any(v): t): case =>\n    if (Js.typeof(v) == "number") {\n      Number(Obj.magic(v): float);\n    } else {\n      String(Obj.magic(v): string);\n    };\n};\n')),(0,r.kt)("p",null,"Note that here we use ",(0,r.kt)("inlineCode",{parentName:"p"},"Obj.magic")," to do an unsafe type cast which relies on ",(0,r.kt)("inlineCode",{parentName:"p"},"Js.typeof"),". In practice, people may use ",(0,r.kt)("inlineCode",{parentName:"p"},"instanceof"),"; the following is an imaginary example:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-ocaml"}),"module A_or_b : sig\n    type t\n    val a : a -> t\n    val b : b -> t\n    type case =\n        | A of a\n        | B of b\n    val classify : t -> case\nend = struct\n    type t =\n        | Any : 'a -> t\n    [@@unboxed]\n    type case =\n        | A of a\n        | B of b\n    let a (v : a) = Any v\n    let b = (v : b) = Any v\n    let classify ( Any v : t)  =\n        if [%raw{|function (a) { return  a instanceof globalThis.A}|}] v then A (Obj.magic v : a)\n        else B (Obj.magic b)\nend\n")),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"module A_or_b: {\n  type t;\n  let a: a => t;\n  let b: b => t;\n  type case =\n    | A(a)\n    | B(b);\n  let classify: t => case;\n} = {\n  [@unboxed]\n  type t =\n    | Any('a): t;\n  type case =\n    | A(a)\n    | B(b);\n  let a = (v: a) => Any(v);\n  let b = (v: b) => Any(v);\n  let classify = (Any (v): t) =>\n    if ([%raw {|function (a) { return  a instanceof globalThis.A}|}](v)) {\n      A(Obj.magic(v): a);\n    } else {\n      B(Obj.magic(b));\n    };\n};\n")),(0,r.kt)("p",null,"Here we suppose ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," is of JS class type ",(0,r.kt)("inlineCode",{parentName:"p"},"A"),", and we use ",(0,r.kt)("inlineCode",{parentName:"p"},"instanceof")," to test it. Note we use some ",(0,r.kt)("inlineCode",{parentName:"p"},"unsafe")," code locally, but as long as such code is carefully reviewed, it has a safe boundary at the module level."),(0,r.kt)("p",null,"To conclude: thanks to ",(0,r.kt)("inlineCode",{parentName:"p"},"unboxed")," attributes and the module language, we introduce a systematic way to convert values from ",(0,r.kt)("inlineCode",{parentName:"p"},"union types")," (untagged union types) to ",(0,r.kt)("inlineCode",{parentName:"p"},"algebraic data types")," (tagged union types). This sort of conversion relies on user level knowledge and has to be reviewed carefully. For some cases where ",(0,r.kt)("inlineCode",{parentName:"p"},"classify")," is not needed, it can be done in a completely type safe way."))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2020-02-07",previewImg:null,title:"Union types in BuckleScript",description:"In our our 7.1.0 release we introduced the new [@unboxed] feature for better\nzero-cost interop with GADTs, Variants and single field records. Let's find\nout how this will help us expressing Union types with seamless interop!\n",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2020-02-07-union-types-in-bucklescript.mdx"}},42206:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"loading-stdlib-from-memory"},"Loading stdlib from memory"),(0,r.kt)("p",null,"In the next release, we are going to load stdlib from memory instead of from\nexternal files, which will make the BuckleScript toolchain more accessible and\nperformant."),(0,r.kt)("p",null,"You can try it via ",(0,r.kt)("inlineCode",{parentName:"p"},"npm i bs-platform@7.2.0-dev.4")),(0,r.kt)("h2",{id:"how-does-it-work"},"How does it work"),(0,r.kt)("p",null,"When the compiler compiles a module ",(0,r.kt)("inlineCode",{parentName:"p"},"test.ml"),", the module ",(0,r.kt)("inlineCode",{parentName:"p"},"Test")," will import\nsome modules from stdlib. This is inevitable since even basic operators in\nBuckleScript, for example ",(0,r.kt)("inlineCode",{parentName:"p"},"(+)"),", are defined in the Pervasives module, which is\npart of the stdlib."),(0,r.kt)("p",null,"Traditionally, the compiler will consult ",(0,r.kt)("inlineCode",{parentName:"p"},"Pervasives.cmi"),", which is a binary\nartifact describing the interface of the Pervasives module and\n",(0,r.kt)("inlineCode",{parentName:"p"},"Pervasives.cmj"),", which is a binary artifact describing the implementation of\nthe Pervasives module. ",(0,r.kt)("inlineCode",{parentName:"p"},"Pervasives.cm[ij]")," and other modules in stdlib are\nshipped together with the compiler."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"This traditional mode has some consequences:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The compiler is not stand-alone and relocatable. Even if we have the compiler\nprebuilt for different platforms, we still have to compile stdlib\npost-installation. ",(0,r.kt)("inlineCode",{parentName:"p"},"postinstall")," is supported by npm, but it has\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/issues/3213"}),"various"),"\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/issues/2799"}),"issues"),"\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/issues/3254"}),"against")," yarn.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"It's hard to split the compiler from the generated stdlib JS artifacts. When\na BuckleScript user deploys apps depending on BuckleScript, in theory, the app\nonly needs to deploy those generated JS artifacts; the native binary is not\nneeded in production. However, the artifacts are still loaded since they are\nbundled together. Allowing easy delivery of compiled code is one of the\ncommunity\u2019s most desired ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/issues/2772"}),"feature\nrequests"),"."))),(0,r.kt)("p",null,"In this release, we solve the problem by embedding the binary artifacts into\nthe compiler directly and loading it on demand."),(0,r.kt)("p",null,"To make this possible, we try to make the binary data platform agnostic and as\ncompact as possible to avoid size bloating. The entrance of loading cmi/cmj has\nto be adapted to this new way."),(0,r.kt)("p",null,"So whenever the compiler tries to load a module from stdlib, it will consult a\nlazy data structure in the compiler itself instead of consulting an external\nfile system."),(0,r.kt)("h2",{id:"what-are-the-benefits"},"What are the benefits?"),(0,r.kt)("h3",{id:"more-accessiblity"},"More accessiblity."),(0,r.kt)("p",null,"Package installation now becomes downloading for prebuilt platforms. In the\nfuture, we can make it installable from a system package manager as well. The\nsubtle interaction with ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/issues/2799"}),"yarn\nreinstall")," is also\nsolved once and for all."),(0,r.kt)("h3",{id:"easy-separation-between-compiler-and-js-artifacts"},"Easy separation between compiler and JS artifacts"),(0,r.kt)("p",null,"The compiler is just one relocatable file. This makes the separation between\nthe compiler and generated JS artifacts easier. The remaining work is mostly to\ndesign a convention between compiler and stdlib version schemes."),(0,r.kt)("h3",{id:"better-compilation-performance"},"Better compilation performance"),(0,r.kt)("p",null,"A large set of files is not loaded from the file system but rather from memory\nnow!"),(0,r.kt)("h3",{id:"fast-installation-and-reinstallation"},"Fast installation and reinstallation."),(0,r.kt)("p",null,"Depending on your network speed, the installation is reduced from 15\nseconds to 3 seconds. Reinstallation is almost a no-op now."),(0,r.kt)("h3",{id:"js-playground-is-easier-to-build"},"JS playground is easier to build"),(0,r.kt)("p",null,"We translate the compiler into JS so that\ndevelopers can play with it in the browser.  To make this happen, we used to\nfake the IO system; this not needed any more since no IO happens when compiling\na single file to a string."),(0,r.kt)("h2",{id:"some-internal-changes"},"Some internal changes"),(0,r.kt)("p",null,"To make this happen, the layout of binaries has been changed to the following\nstructure. It is ",(0,r.kt)("strong",{parentName:"p"},"not recommended")," that users depend on the layout, but ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/pull/4170#issuecomment-586959464"}),"it\nhappens"),".\nHere is the new layout:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"|-- bsb // node wrapper of bsb.exe\n|-- bsc // node wrapper of bsc.exe\n|\n|-- win32\n|     |-- bsb.exe\n|     |-- bsc.exe\n|\n|---darwin\n|     |-- bsb.exe\n|     |-- bsc.exe\n|\n|---linux\n|     |-- bsb.exe\n|     |-- bsc.exe\n\n")))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2020-02-20",previewImg:null,title:"Improving the Stdlib Loading mechanism",description:"We want to give you some insights on how we will improve the way BuckleScript\ncompiles and handles its stdlib modules.\n",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2020-02-20-loading-stdlib-in-memory.mdx"}},14421:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"about-the-release"},"About the Release"),(0,r.kt)("p",null,"Today we are proud to release ",(0,r.kt)("inlineCode",{parentName:"p"},"bs-platform 7.2"),"!"),(0,r.kt)("p",null,"For those unfamiliar with bs-platform, it is the platform for compiling\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://reasonml.github.io/"}),"ReasonML")," and ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://ocaml.org/"}),"OCaml")," to fast\nand readable JavaScript."),(0,r.kt)("p",null,"You can try it with ",(0,r.kt)("inlineCode",{parentName:"p"},"npm i bs-platform"),"!"),(0,r.kt)("h2",{id:"features"},"Features"),(0,r.kt)("h3",{id:"in-memory-loading-stdlib"},"In memory loading stdlib"),(0,r.kt)("p",null,"Since this release, the binary artifacts generated by the stdlib are loaded\nfrom memory instead of an external file systems, which means much faster\ncompilation and installation."),(0,r.kt)("p",null,"Previously we recommended installing ",(0,r.kt)("inlineCode",{parentName:"p"},"bs-platform")," globally to save on\ninstallation time."),(0,r.kt)("p",null,"However, with this release the installation is so fast that  we recommend\ninstalling it locally instead - per project - instead, as there's no additional\ncost, and it provides better isolation."),(0,r.kt)("p",null,"You can use it with a nice tool called\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://www.npmjs.com/package/npx"}),"npx"),", for example, ",(0,r.kt)("inlineCode",{parentName:"p"},"npx bsb"),"."),(0,r.kt)("p",null,"The installation is also compatible with ",(0,r.kt)("inlineCode",{parentName:"p"},"--ignore-scripts")," for major platforms\n(see ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://youtu.be/okrB3aJtUaw?t=921"}),"Richard Feldman's talk")," on the\nsecurity implications), and is more stable with\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/yarnpkg/yarn"}),"yarn")),(0,r.kt)("p",null,"More technical details can be found in this\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://bucklescript.github.io/blog/2020/02/20/loading-stdlib-in-memory"}),"post"),"."),(0,r.kt)("h3",{id:"let-private"},"let %private"),(0,r.kt)("p",null,"In OCaml's module system, everything is public by default, the only way to hide some values is by providing a separate signature to list public fields and their types:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"module A : { let b : int} = {\n    let a = 3 ;\n    let b = 4 ;\n}\n\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"let")," ",(0,r.kt)("inlineCode",{parentName:"p"},"%private")," gives you an option to mark private fields directly"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"module A  = {\n    let%private a  = 3;\n    let b  = 4;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"let%private")," also applies to file level modules, so in some cases, user does not need to provide a separate interface file just to hide some particular values."),(0,r.kt)("p",null,"Note interface files are still recommended as a general best practice since they give you better separate compilation units and also they're better for documentation. Still, ",(0,r.kt)("inlineCode",{parentName:"p"},"let%private")," is useful in the following scenarios:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Code generators. Some code generators want to hide some values but it is sometimes very hard or time consuming for code generators to synthesize the types for public fields.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Quick prototyping. During prototyping, we still want to hide some values, but the interface file is not stable yet, ",(0,r.kt)("inlineCode",{parentName:"p"},"let%private")," provide you such convenience."))),(0,r.kt)("h3",{id:"int64-performance-optimization"},"Int64 performance optimization"),(0,r.kt)("p",null,"We received feedback from some users that various Int64 operations became bottlenecks in their code performance, in particular ",(0,r.kt)("inlineCode",{parentName:"p"},"Int64.to_string"),"."),(0,r.kt)("p",null,"We responded to this, and after some hard work - but ",(0,r.kt)("em",{parentName:"p"},"without")," changing the underlying representation - our ",(0,r.kt)("inlineCode",{parentName:"p"},"Int64.to_string")," is even faster than ",(0,r.kt)("inlineCode",{parentName:"p"},"bigint")," for common inputs."),(0,r.kt)("p",null,"A micro-benchmark for comparison:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"running on 7.1\nInt64.to_string: 367.788ms # super positive number\nInt64.to_string: 140.451ms # median number\nInt64.to_string: 375.471ms # super negative number\n\nbigint\nInt64.to_string: 25.151ms\nInt64.to_string: 12.278ms\nInt64.to_string: 21.011ms\n\nlatest\nInt64.to_string: 43.228ms\nInt64.to_string: 5.764ms\nInt64.to_string: 43.270ms\n")),(0,r.kt)("p",null,"We also apply such optimizations to other Int64 operations."),(0,r.kt)("p",null,"Note that Int64 is implemented in OCaml itself without any raw JavaScript. This is case compelling hints that our optimizing compiler not only provides expressivity and type-safe guarantees, but also empowers users to write maintainable, ",(0,r.kt)("em",{parentName:"p"},"efficient")," code."),(0,r.kt)("h2",{id:"file-level-compilation-flags"},"File level compilation flags"),(0,r.kt)("p",null,"In this release, we also provide a handy flag to allow users to override some configurations at the file level."),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),'[@bs.config {flags: [|"-w", "a", "-bs-no-bin-annot"|]}]; // toplevel attributes\n')),(0,r.kt)("p",null,"A full list of changes is available here: ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/blob/master/Changes.md#72"}),"https://github.com/BuckleScript/bucklescript/blob/master/Changes.md#72")))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2020-03-12",previewImg:null,tags:["Release"],title:"Announcing BuckleScript 7.2",description:"This release will give us some small quality of life improvements for tool\nbuilders, better performance, and a new let %private modifier for hiding\nmodule functionality.\n",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2020-03-12-bucklescript-release-7-2.mdx"}},42896:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/facebook/reason"}),"ReasonML")," is a\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Currying"}),"curried")," language, while Js is an\nuncurried language. When compiling ReasonML into Js, there's lots of headache\ndue to the semantics mismatch."),(0,r.kt)("p",null,"After several years of research and development, we will finally reach a new\nmilestone in our next release: adding a lightweight uncurried calling\nconvention to ReasonML."),(0,r.kt)("h2",{id:"why-we-need-native-uncurried-calling-convention"},"Why we need native uncurried calling convention"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"The curried call is inherently slower than the uncurried call.")),(0,r.kt)("p",null,"A native implementation of curried call like ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://www.purescript.org/"}),"purescript")," does will generate very slow code:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"let curriedFunction = x => y => z => x + y +z ;\nlet curriedApply = curriedFunction(1)(2)(3); // memory allocation triggered\n")),(0,r.kt)("p",null,"BuckleScript does tons of optimizations and very aggressive arity inference so that the curried function is compiled into a multiple-arity function, and when the application is supplied with the exact arguments -- which is true in most cases, it is applied like normal functions."),(0,r.kt)("p",null,"However, such optimization does not apply to high order functions:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"let highOrder = (f,a,b)=> f (a, b)\n// can not infer the arity of `f` since we know\n// nothing about the arity of `f`, unless\n// we do the whole program optimization\n")),(0,r.kt)("p",null,"In cases where arity inference does not help, the arity guessing has to be delayed into the runtime."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Bindings to JS world:")),(0,r.kt)("p",null,"When we create bindings for high order functions in the JS world, we would like to have native uncurried functions which behave the same as JS world -- no semantics mismatch."),(0,r.kt)("h2",{id:"generalized-uncurried-calling-convention-in-this-release"},"Generalized uncurried calling convention in this release"),(0,r.kt)("p",null,"Before release 7.3, we had introduced uncurried calling convention, however, it has serious limitations -- uncurried functions can not be polymorphic, it does not support labels, the error\nmessage leaks the underlying encoding -- now all those limitations are gone!"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Previously:")),(0,r.kt)("img",{class:"my-4",src:"https://bucklescript.github.io/img/poly-error.png"}),(0,r.kt)("img",{src:"https://bucklescript.github.io/img/label-error.png"}),(0,r.kt)("img",{src:"https://bucklescript.github.io/img/recursive-error.png"}),(0,r.kt)("p",null,"The error messages above are cryptic and hard to understand. And the limitation of not supporting recursive functions make uncurried support pretty weak."),(0,r.kt)("p",null,"Now those limitations are all gone, you can have polymorphic uncurried recursive functions and it support labels."),(0,r.kt)("img",{src:"https://bucklescript.github.io/img/uncurry-label.png"}),(0,r.kt)("img",{src:"https://bucklescript.github.io/img/recursive.png"}),(0,r.kt)("p",null,"The error message is  also enhanced significantly"),(0,r.kt)("h3",{id:"when-the-uncurried-function-is-used-in-curried"},"When the uncurried function is used in curried"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"let add = (. x, y ) => x + y;\n\nlet u = add (1, 2)\n")),(0,r.kt)("p",null,"The old error message:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"Error: This expression has type (. int, int) => int\n    This is not a function; it cannot be applied.\n")),(0,r.kt)("p",null,"The new error message"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"Error: This function has uncurried type, it needs to be applied in ucurried style\n")),(0,r.kt)("h3",{id:"when-the-curried-function-is-used-in-the-uncurried-context"},"When the curried function is used in the uncurried context"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"let add = ( x, y ) => x + y;\n\nlet u = add (.1, 2)\n")),(0,r.kt)("p",null,"The old error message:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"Error: This expression has type (int, int) => int\n    but an expression was expected of type (. 'a, 'b) => 'c\n")),(0,r.kt)("p",null,"The new error message:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"Error: This function is a curried function where an uncurried function is expected\n")),(0,r.kt)("h3",{id:"when-arity-mismatch"},"When arity mismatch"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"let add = (. x, y ) => x + y;\n\nlet u = add (.1, 2,3)\n")),(0,r.kt)("p",null,"The old message:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"Error: This expression has type (. int, int) => int\n    but an expression was expected of type (. 'a, 'b, 'c) => 'd\n    These two variant types have no intersection\n")),(0,r.kt)("p",null,"The new message:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"Error: This function has arity2 but was expected arity3\n")),(0,r.kt)("p",null,"Note the generalized uncurry support also applies to objects, so that you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"obj##meth (~label1=a,~label2=b)"),"."),(0,r.kt)("p",null,"The only thing where the uncurried call is not supported is optional arguments, if users are mostly targeting JS runtime, we suggest you can try uncurry by default and would like to hear your feedback!"),(0,r.kt)("p",null,"You can already test it today by ",(0,r.kt)("inlineCode",{parentName:"p"},"npm install bs-platform@7.3.0-dev.1")," (Windows support will be coming soon)."))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2020-03-26",previewImg:null,title:"Generalized Uncurry Support in 7.3",description:"",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2020-03-26-generalize-uncurry.mdx"}},96698:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"We are happy to announce that ",(0,r.kt)("inlineCode",{parentName:"p"},"bs-platform@7.3")," is available for testing, you\ncan try it with ",(0,r.kt)("inlineCode",{parentName:"p"},"npm install bs-platform@7.3.1"),"."),(0,r.kt)("p",null,"For those unfamiliar with bs-platform, it is the platform for compiling\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://reasonml.github.io/"}),"ReasonML")," and ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://ocaml.org/"}),"OCaml")," to fast\nand readable JavaScript."),(0,r.kt)("p",null,"This is a major release with some highlighted features as below:"),(0,r.kt)("h2",{id:"generalized-uncurry-calling-convention-support"},"Generalized uncurry calling convention support"),(0,r.kt)("p",null,"You can use an uncurried function as conveniently as a curried one now, this is\nan exciting change that we wrote a ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://bucklescript.github.io/blog/2020/03/26/generalize-uncurry"}),"separate\npost")," for\ndetails."),(0,r.kt)("p",null,"For uncurried support, we also fixed a long standing\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/issues/4274"}),"issue")," so that type\ninference follows naturally using the new encoding."),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"bar\n -> Belt.Array.mapU((.b)=>b.foo /*no type annotation needed */)\n")),(0,r.kt)("h2",{id:"the-unit-value-now-compiles-to-undefined"},"The ",(0,r.kt)("inlineCode",{parentName:"h2"},"unit")," value now compiles to ",(0,r.kt)("inlineCode",{parentName:"h2"},"undefined")),(0,r.kt)("p",null,"In ReasonML, when a function does not return any meaningful value, it returns a\nvalue that is ",(0,r.kt)("inlineCode",{parentName:"p"},"()")," of type ",(0,r.kt)("inlineCode",{parentName:"p"},"unit"),". In native backend, the dummy value ",(0,r.kt)("inlineCode",{parentName:"p"},"()")," is\ncompiled into a const zero. We used to inherit this in JS backend as well.\nHowever, this is a semantics mismatch since in JS, if the function does not\nreturn anything, it defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),". In this release, we make it more\nconsistent with JS: compiling ",(0,r.kt)("inlineCode",{parentName:"p"},"()")," into ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),". Since in JS, ",(0,r.kt)("inlineCode",{parentName:"p"},"return\nundefined")," can be ignored in tail position, this leads to some other nice\nenhancement."),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"let log = x => Js.log(x)\n")),(0,r.kt)("p",null,"The generated code used to be"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"function log(x){\n    console.log(x);\n    return /* () */ 0;\n}\n")),(0,r.kt)("p",null,"It's now"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"function log(x){\n    console.log(x)\n}\n")),(0,r.kt)("h2",{id:"various-improvements-in-code-generation"},"Various improvements in code generation"),(0,r.kt)("p",null,"We have increased the readability of the generated code in several common\nplaces, we believe that we reached ",(0,r.kt)("em",{parentName:"p"},"an important milestone")," that if you write\ncode using features that have counterparts in JS, the generated code is\nreadable. This is not a small achievement given that quite a lot of the\ncompiler code base is shared between native backend and JS backend."),(0,r.kt)("p",null,"There are some features that are not available in JS, for example, complex\npattern matches, the readability of those pieces of generated code will\ncontinue being improved."),(0,r.kt)("p",null,"Take several enhancement below as  examples:"),(0,r.kt)("h3",{id:"meaningful-pattern-match-variable-names"},"Meaningful pattern match variable names"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"let popUndefined = s =>\n  switch (s.root) {\n  | None => Js.undefined\n  | Some(x) =>\n    s.root = x.tail;\n    Js.Undefined.return(x.head);\n  };\n")),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-diff"}),"function popUndefined(s) {\n-  var match = s.root;\n-  if (match !== null) {\n-    s.root = match.tail;\n-    return match.head;\n+  var x = s.root;\n+  if (x !== undefined) {\n+    s.root = x.tail;\n+    return x.head;\n   }\n\n }\n")),(0,r.kt)("p",null,"When pattern match against a compounded expression, the compiler used to use a\ntemporary name ",(0,r.kt)("inlineCode",{parentName:"p"},"match"),", now we employ better heuristics to generate meaningful\nnames for such temporary variables."),(0,r.kt)("h3",{id:"eliminate-intermediate-variable-names-when-inlining"},"Eliminate intermediate variable names when inlining"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-diff"})," function everyU(arr, b) {\n   var len = arr.length;\n-  var arr$1 = arr;\n   var _i = 0;\n-  var b$1 = b;\n-  var len$1 = len;\n   while(true) {\n     var i = _i;\n-    if (i === len$1) {\n+    if (i === len) {\n       return true;\n-    } else if (b$1(arr$1[i])) {\n-      _i = i + 1 | 0;\n-      continue ;\n-    } else {\n+    }\n+    if (!b(arr[i])) {\n       return false;\n     }\n+    _i = i + 1 | 0;\n+    continue ;\n   };\n }\n")),(0,r.kt)("p",null,"The above diff is the generated code for ",(0,r.kt)("inlineCode",{parentName:"p"},"Belt.Array.everyU"),", the intermediate\nvariables were introduced when inlining an auxiliary function, such duplication\nwere removed in this release."),(0,r.kt)("h3",{id:"flatten-ifelse-branch-making-use-of-jss-early-return-idiom"},"Flatten if/else branch making use of JS's ",(0,r.kt)("inlineCode",{parentName:"h3"},"early return")," idiom"),(0,r.kt)("p",null,"Take the same diff from above, you will notice that the second ",(0,r.kt)("inlineCode",{parentName:"p"},"else")," following\n",(0,r.kt)("inlineCode",{parentName:"p"},"if(..) continue")," is removed."),(0,r.kt)("p",null,"Below are similar diffs benefiting from such enhancement:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-diff"})," function has(h, key) {\n@@ -133,21 +123,18 @@ function has(h, key) {\n   var nid = Caml_hash_primitive.caml_hash_final_mix(Caml_hash_primitive.caml_hash_mix_string(0, key)) & (h_buckets.length - 1 | 0);\n   var bucket = h_buckets[nid];\n   if (bucket !== undefined) {\n-    var key$1 = key;\n     var _cell = bucket;\n     while(true) {\n       var cell = _cell;\n-      if (cell.key === key$1) {\n+      if (cell.key === key) {\n         return true;\n-      } else {\n-        var match = cell.next;\n-        if (match !== undefined) {\n-          _cell = match;\n-          continue ;\n-        } else {\n-          return false;\n-        }\n       }\n+      var nextCell = cell.next;\n+      if (nextCell === undefined) {\n+        return false;\n+      }\n+      _cell = nextCell;\n+      continue ;\n     };\n   } else {\n     return false;\n@@ -155,17 +142,17 @@ function has(h, key) {\n }\n")),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-diff"}),'--- a/lib/js/belt_List.js\n+++ b/lib/js/belt_List.js\n@@ -15,9 +15,8 @@ function head(x) {\n function headExn(x) {\n   if (x) {\n     return x[0];\n-  } else {\n-    throw new Error("headExn");\n   }\n+  throw new Error("headExn");\n }\n')),(0,r.kt)("h3",{id:"for-loop-minor-enhancement"},"For loop minor-enhancement"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-diff"})," function shuffleInPlace(xs) {\n   var len = xs.length;\n-  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n+  for(var i = 0; i < len; ++i){\n     swapUnsafe(xs, i, Js_math.random_int(i, len));\n   }\n-  return /* () */0;\n+\n }\n")),(0,r.kt)("p",null,"Reason's ",(0,r.kt)("inlineCode",{parentName:"p"},"for .. in")," only provide closed interval iterating, so it is quite\ncommon to write ",(0,r.kt)("inlineCode",{parentName:"p"},"for (i in 0 to Array.length(x) - 1) { .. }"),", we did the\ntweaking above to make the generated code more readable."),(0,r.kt)("p",null,"A full list of changes is available in our ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/blob/master/Changes.md#73"}),"Changelog\nfile"),"."))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2020-04-13",previewImg:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1587472539/Reason%20Association/reasonml.org/reasonml_art1_1280_zfwnyo.png",articleImg:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1587024325/Reason%20Association/reasonml.org/jessica-knowlden-WVC6iAZHP0k-unsplash_t86jzt.jpg",badge:"release",title:"Announcing BuckleScript 7.3",description:"Featuring major improvements like Generalized Uncurry Convention Support and\nunit value to undefined compilation.\n",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2020-04-13-bucklescript-release-7-3.mdx"}},51889:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"upcoming-changes"},"Upcoming Changes"),(0,r.kt)("p",null,"We just recently made some significant improvements with our new exception encoding and we find it so exciting that we want to highlight the changes and explain a little bit how exceptions work when compiling to JS."),(0,r.kt)("p",null,"The new encoding allows us to provide proper, clear stacktrace information whenever a Reason/OCaml exception is thrown. This is particularly important when you have some code running in production that needs to collect those stacktrace for diagnostics."),(0,r.kt)("p",null,"What's the difference?"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"exception My_exception { x : int};\n\nlet loop = () => {\n for (i in 0 to 100) {\n   if (i == 10) {\n     raise (My_exception { x : i})\n   };\n };\n};\nloop ();\n")),(0,r.kt)("p",null,"When we compile and run this piece of code with the old exception encoding, this is what we'd get:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"exn_demo$node src/exn_demo.bs.js\n\n/Users/hongbozhang/git/exn_demo/src/exn_demo.bs.js:11\n      throw [\n      ^\n[ [ 'Exn_demo.My_exception', 1, tag: 248 ], 10 ]\n")),(0,r.kt)("p",null,"With our new improvements, we now get way better results:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"bucklescript$node jscomp/test/exn_demo.js\n\n/Users/hongbozhang/git/bucklescript/jscomp/test/exn_demo.js:10\n      throw {\n      ^\n{\n  RE_EXN_ID: 'Exn_demo.My_exception/1',\n  x: 10,\n  Error: Error\n      at loop (/Users/hongbozhang/git/bucklescript/jscomp/test/exn_demo.js:13:20)\n      at Object.<anonymous> (/Users/hongbozhang/git/bucklescript/jscomp/test/exn_demo.js:21:1)\n      at ...\n}\n")),(0,r.kt)("p",null,"That's basically it! Furthermore in this post, we want to give you some insights on how the data representation of exceptions looks like, and how it has been changed to expose useful stacktraces."),(0,r.kt)("h2",{id:"why-it-is-tricky-to-preserve-stack-traces-in-reasonml-exceptions"},"Why it is tricky to preserve stack-traces in ReasonML exceptions?"),(0,r.kt)("p",null,'Whenever you are using a Reason / OCaml exception (a so called "native exception"), you are actually using a data structure which is not the same as a JS runtime exception. That means that each exception representation invokes a different stacktrace handling mechanism:'),(0,r.kt)("p",null,"In JS, the stacktrace is collected immediately when an Error object is created / thrown, while in native Reason / OCaml, such data is not attached to the exception object at all (you can't just access ",(0,r.kt)("inlineCode",{parentName:"p"},"e.stack")," to retrieve the stacktrace). This is because collecting the stacktrace in a native environment highly depends on the runtime support (e.g. if a flag was provided to attach the stacktrace data)."),(0,r.kt)("p",null,"Our goal was to provide a way to get the same stacktrace for native exceptions as you would with JS exceptions. This is all part of our on-going work to plan and implement the optimal encoding for all the different ReasonML data types for the JS runtime (just like with our previous changes to the ",(0,r.kt)("inlineCode",{parentName:"p"},"bool"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"unit")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"records")," representation as well)."),(0,r.kt)("h2",{id:"whats-the-classical-reasonml-exception-encoding"},"What's the classical ReasonML exception encoding?"),(0,r.kt)("p",null,"In ReasonML, an exception is basically structured data. Let's have a look at the two exception definitions below:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"exception A of { x : int , y : string}\nexception B\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"exception A")," is encoded as an array of 3 slots. The first slot is a block by itself (called an ",(0,r.kt)("em",{parentName:"p"},"identity block"),"), while the second slot is for field x and the third slot for field y."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"exception B")," is just the identity block."),(0,r.kt)("p",null,'The identity block is an array of 2 slots. The first slot is a string like "B", while the second slot is a unique integer.\nIn more detail, the native array will also have a magic tag 248 attached which is not relevant for our purposes though.'),(0,r.kt)("h2",{id:"whats-the-new-exception-encoding"},"What's the new exception encoding?"),(0,r.kt)("p",null,"We had to simplify and unify the encoding for the different exception cases to make it possible to compile exceptions into an object instead of an array. Let's take a look at the two exception values below for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),'A ({ x : 1, y : "x"})\nB\n')),(0,r.kt)("p",null,"The two values will be compiled into"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'{RE_EXN_ID : "A/uuid", x : 1, y : "x" }\n{RE_EXN_ID : "B/uuid"}\n')),(0,r.kt)("p",null,"As you can see, all exceptions (no matter with or without payload) share the same encoding."),(0,r.kt)("p",null,"What will happen when you raise an exception?"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),'raise (A {x : 1 , y : "x"})\n')),(0,r.kt)("p",null,"It generates following JS:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'throw {RE_EXN_ID: "A/uuid", x : 1 , y : "x", Error : new Error ()}\n')),(0,r.kt)("p",null,"The output above shows that we are now able to attach the stacktrace as an ",(0,r.kt)("inlineCode",{parentName:"p"},"Error")," attribute very easily, since every exception is now an object instead of an array. Really cool!"),(0,r.kt)("p",null,"It's important to note that a stacktrace will only be attached ",(0,r.kt)("em",{parentName:"p"},"when you raise an exception"),". In other words, the stacktrace will not be attached just by creating an exception (which is different to JS'es ",(0,r.kt)("inlineCode",{parentName:"p"},"new Error()")," behavior)."),(0,r.kt)("h2",{id:"what-does-that-mean-for-js-interop"},"What does that mean for JS interop?"),(0,r.kt)("p",null,"Note that in the JS world, users can pretty much throw any value they want. It is even totally valid to ",(0,r.kt)("inlineCode",{parentName:"p"},"throw undefined"),". In ReasonML, when you try to catch an exception, the compiler will convert any arbitrary value to a ReasonML exception behind the scene:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If it is already a ReasonML exception, then the conversion will be a no-op (no runtime cost)"),(0,r.kt)("li",{parentName:"ul"},"Otherwise it will be wrapped as a ",(0,r.kt)("inlineCode",{parentName:"li"},"Js.Exn.Error obj"))),(0,r.kt)("p",null,"Here is an example on how you'd access the exception value within a Reason ",(0,r.kt)("inlineCode",{parentName:"p"},"try")," expression:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reason"}),"try (someJSFunctionThrowing()) {\n| Not_found => ..  // catch  reasonml exception 1\n| Invalid_argument =>  // catch  reasonml exception 2\n| Js.Exn.Error (obj) => ... // catch js exception\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"obj")," value in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Js.Exn.Error")," branch is an opaque type to maintain type soundness, so if you need to interact with this value, you need to classify it into a concrete type first."),(0,r.kt)("h2",{id:"caveat"},"Caveat"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Please note that it's not allowed to rely on the key name ",(0,r.kt)("inlineCode",{parentName:"p"},"RE_EXN_ID"),". It's an implementation detail which will probably be changed into a symbol in the future.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Don't over-use exceptions, remember exceptions should only be used in exceptional cases like division by zero. Whenever you  try to express erroneous results, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"option")," type instead."))),(0,r.kt)("h2",{id:"bonus"},"Bonus"),(0,r.kt)("p",null,"Now with our new exception encoding in place, a hidden feature called ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://caml.inria.fr/pub/docs/manual-ocaml/extensiblevariants.html"}),"extensible variant")," suddenly got way more interesting as well. Practically speaking, native exceptions are actually a special form of an extensible variant, so both are benefiting from the same representation changes!"),(0,r.kt)("p",null,"Happy hacking and we would like your feedback!"))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2020-05-06",previewImg:null,title:"New Exception Encoding in BuckleScript",description:"Highlights of our newest changes to the internal representation of exceptions\nand how it will provide better stacktraces to our users.\n",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2020-05-06-a-story-of-exception-encoding.mdx"}},20619:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return p}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=n(53254),l=(o.createElement,{});function p(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"hello-world"},"Hello World!"),(0,r.kt)("p",null,"We are happy to finally show off our brand new blog system for ",(0,r.kt)("inlineCode",{parentName:"p"},"reasonml.org"),". It unifies all the previous articles from the different Reason, BuckleScript, and ReasonReact websites and also acts as a communication channel for community and documentation updates as well."),(0,r.kt)("p",null,"We also wanted to take the chance to give you a thorough update on what is going on in the ",(0,r.kt)("inlineCode",{parentName:"p"},"reasonml.org")," project. A lot has happened in the past few months and we'd love to talk about it!"),(0,r.kt)("p",null,"So in the next few days and weeks we will release a series of blog posts to highlight different parts of the documentation platform and to give the community some vision on where we are heading (feel free to subscribe to our ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://reasonml.org/blog/feed.xml"}),"RSS feed")," or ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://twitter.com/ReasonAssoc"}),"Twitter")," for future updates)."),(0,r.kt)("p",null,"In Part 1, we'll start from the very beginning, for those who don't know about this project yet or haven't seen ",(0,r.kt)("inlineCode",{parentName:"p"},"reasonml.org")," before."),(0,r.kt)("h2",{id:"why-does-this-project-exist"},"Why Does This Project Exist?"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"reasonml.org")," project was kicked off in October 2019 as part of the\n",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://www.reason-association.org/projects/better-learning-materials-and-tools"}),'"Better Learning Materials and\nTools"'),"\nprogram, around one week before ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://reason-conf.us"}),"ReasonConf US 2019")," happened in\nChicago."),(0,r.kt)("p",null,"It was initiated by the ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://www.reason-association.org"}),"Reason Association")," and funded by ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://ahrefs.com"}),"Ahrefs")," / the ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://tezos.foundation/"}),"Tezos Foundation")," to finally tackle the most challenging issue that many companies, community members, and newcomers have faced from the beginning of the Reason project: The lack of guidance and the confusing documentation architecture of the Reason ecosystem."),(0,r.kt)("p",null,"This project is really exciting for us, since it allows us to create a documentation website that is tailored to the language's needs."),(0,r.kt)("p",null,"We can make documentation changes across the whole platform in one atomic PR, cross-link or refactor resources without a fear of outdated links, and most importantly: We don't force any visitors to switch between websites when looking for specific Reason resources."),(0,r.kt)("p",null,"This entirely eliminates the need for content duplication in each sub project website, like the syntax, compiler, reason-react bindings, blog posts etc. and centralises the maintenance efforts to a single repository."),(0,r.kt)("p",null,"It gives users a big-picture overview of the core Reason ecosystem as well as a better understanding on what the platform is about."),(0,r.kt)("p",null,"Last but not least, ",(0,r.kt)("inlineCode",{parentName:"p"},"reasonml.org")," is built on Reason & BuckleScript as well, leading by example and dog-fooding along the way - spotting issues in newer compiler and syntax releases before they hit our users."),(0,r.kt)("p",null,"We also give the community more power to chime in and take ownership over the documentation, and offer enough human capacity to collaborate on PRs (give guidance, help refine written texts, give early feedback), which is at the heart of  great Open Source!"),(0,r.kt)("h2",{id:"what-weve-accomplished"},"What We've Accomplished"),(0,r.kt)("p",null,"Building a documentation platform for a whole language ecosystem involves a lot of different disciplines. For this article we will cover three major topics: Structure & Design, the API Docs and the Reason Ecosystem Docs."),(0,r.kt)("h3",{id:"the-structure-and-design"},"The Structure and Design"),(0,r.kt)("p",null,"The initial work was mostly about understanding the information architecture, relevant documentation dependencies, and finding all the relevant resources across different websites and blog posts. We have also spent a great amount of time finding a proper design language to visually codify different areas of the platform into a distinctive color scheme."),(0,r.kt)(s.Z,{withShadow:!0,src:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1588606133/Reason%20Association/reasonml.org/reasonml-org-color-palette-retina_x4r7ob.jpg",caption:"Current state of the reasonml.org color palette",mdxType:"Image"}),(0,r.kt)("p",null,"Surprisingly for us, the navigation and sitemap turned out to be the hardest part to figure out. We had to craft long-lived URLs that would work across multiple versions of the Reason compiler and standard library, had to do research about future localization possibilities, understand the guts and limits of different documentation tools such as docusaurus, find a way to enable component based theming, and then put everything in a layout that actually worked across all sorts of devices without being too cluttered or confusing."),(0,r.kt)("p",null,"Our core value is great UX, and so we naturally brought on an UI / UX / Brand designer to our team who has done an amazing job of putting our ideas into a practical and simple design (the design mockup is openly accessible ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://xd.adobe.com/spec/1cd19c3a-a0bb-4f93-4e11-725589888696-6ae0/grid"}),"here"),") and we are quite pleased with the current results. Additionally we regularly sync up with individuals from the Reason / BuckleScript teams to gather feedback."),(0,r.kt)("p",null,"We also focused a lot on early feedback from the community, so we regularly ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://twitter.com/ReasonAssoc/status/1227135707602399232"}),"posted mockup images on Twitter")," and Discord to get an idea on what people liked / disliked. Turned out there was a lot to fix (colors, layouts, navigation items,..). We fine tuned the designs and went on with the technical details."),(0,r.kt)("h3",{id:"improving-the-api-docs-belt--js"},"Improving the API Docs (Belt / JS)"),(0,r.kt)("p",null,"The current ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://bucklescript.github.io/bucklescript/api/index_modules.html"}),"official BuckleScript's API docs")," aren't visually stunning, but they ",(0,r.kt)("em",{parentName:"p"},"are")," important for getting things done as a user. The docs are maintained within the BuckleScript repository, and there was no process to make sure the documentation site remained up to date with each BuckleScript release. It also presented a huge bottleneck for anyone hoping to contribute from the outside. So ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://twitter.com/nikgraf"}),"Nik Graf")," bit the bullet, did the massive amount of grunt work to extract all the available modules and function headers into hand curated markdown files, and organize them into easily-maintained documents from a technical writer's perspective."),(0,r.kt)("p",null,"So we now have most of BuckleScript v7's ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"/docs/manual/latest/api/belt"}),"JS / Belt module")," documented."),(0,r.kt)("p",null,"We are now working on further automating the process for generating BuckleScript documentation by adding JSON export functionality to ",(0,r.kt)("inlineCode",{parentName:"p"},"odoc"),". As soon as this is done, we will upstream our latest hand curated changes to the BuckleScript inline documentation and also give better guidance on contributing to the JS / Belt documentation in the source code as well."),(0,r.kt)("h3",{id:"all-docs-in-one-place"},"All Docs in One Place"),(0,r.kt)("p",null,"Our goal is to have a properly curated, well structured and streamlined overview for all core resources of the Reason platform. So we relocated all the information from the ReasonML, BuckleScript, ReasonReact and GenType website to the reasonml.org codebase."),(0,r.kt)(s.Z,{withShadow:!0,src:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1588605830/Reason%20Association/reasonml.org/reasonml-org-structure-retina_rjhvta.jpg",caption:"First hand-sketches of the reasonml.org structure",mdxType:"Image"}),(0,r.kt)("p",null,"It didn't take long until we realized that we can't just keep the upstream version in its original form, so we started to make adaptations where it made sense. We also accepted new additions from the community, such as explanations about ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"/docs/manual/latest/function#signatures-and-type-annotations"}),"function signatures on optional arguments")," in the Reason manual, or a new decorator overview in the BuckleScript section."),(0,r.kt)("p",null,"That said, we do keep track of new changes on the upstream sources and cherry-pick changes if necessary. To make this process more transparent, we introduced a version table on our ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"/"}),"startpage")," to make it easier to see the latest cherry-pick commit for each resource (ReasonML, BuckleScript, etc.)."),(0,r.kt)("h3",{id:"so-is-reasonmlorg-always-up-to-date"},"So Is reasonml.org Always Up to Date?"),(0,r.kt)("p",null,"Yep. Everything you can find on this platform (plus some extra content) is already available and regularly synced with the official resources. We're also keeping an eye out for how reasonml.org could potentially even replace them in the future."),(0,r.kt)("p",null,"In case you want to contribute new documentation, we encourage you to open a PR on the ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/reason-association/reasonml.org"}),"reasonml.org repo"),". In case you open a PR on the original source, be aware that those will probably take longer to be merged, since the code owners of these codebases are pretty busy."),(0,r.kt)("h3",{id:"should-i-share-reasonmlorg-urls"},"Should I Share reasonml.org URLs?"),(0,r.kt)("p",null,"We encourage you to share links to reasonml.org, but please note that our platform is still in a pre-release phase. The final permalink structure might change and some content might be relocated or removed, so don't rely too much on the URL structure just yet."),(0,r.kt)("p",null,"We will try to put a banner on the website soon to prevent confusion."),(0,r.kt)("h2",{id:"what-is-still-missing"},"What is still missing?"),(0,r.kt)("p",null,"So far following features are still missing:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Full Page Search"),(0,r.kt)("li",{parentName:"ul"},"Reason Playground"),(0,r.kt)("li",{parentName:"ul"},"Full API Docs")),(0,r.kt)("p",null,"We'll go into more detail in our future posts. Stay tuned!"),(0,r.kt)("h2",{id:"upcoming-next"},"Upcoming Next"),(0,r.kt)("p",null,'This article is part of the "State of reasonml.org 2020-Q2" series, which will cover following topics (please stay tuned for the upcoming posts):'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Part 2) ",(0,r.kt)("a",(0,a.Z)({parentName:"strong"},{href:"/blog/state-of-reasonml-org-2020-q2-pt2"}),"Higher Quality Docs")),(0,r.kt)("br",null),"How we automate things to improve docs quality and how we make sure that PRs get merged."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Part 3) ",(0,r.kt)("a",(0,a.Z)({parentName:"strong"},{href:"/blog/state-of-reasonml-org-2020-q2-pt3"}),"Future Tools for the Community")),(0,r.kt)("br",null),"How we'll generate API docs with our new ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/reason-association/doc-tools"}),"doc-tools")," and how the new Playground will look like"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Part 4) It's all Opinions"),(0,r.kt)("br",null),'We\'ll dive into our documentation philosophy, our vision of the Reason Platform and ideas on how to tackle the "Reason Native" documentation.'),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"The progress on ",(0,r.kt)("inlineCode",{parentName:"p"},"reasonml.org")," has been fantastic so far. Even though the current global health situation pushed us a bit behind our original schedule with the Reason playground, etc, we are still quite happy with the outcome and we hope you are as well!"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"reasonml.org")," is still a work in progress and there is, of course, ",(0,r.kt)("em",{parentName:"p"},"much")," to build before reaching the first official release. Until then, we would love for you to give it a try and let us know what you think, either by opening an issue, or even a PR."),(0,r.kt)("p",null,"In case you have any questions or comments, make sure to let us know in the ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://discord.gg/reasonml"}),"Reason Discord")," ",(0,r.kt)("inlineCode",{parentName:"p"},"#docs")," channel!"),(0,r.kt)("p",null,"Happy docs browsing!"),(0,r.kt)("h2",{id:"acknowledgements"},"Acknowledgements"),(0,r.kt)("p",null,"We want to thank everyone who helped us reporting issues, adding new or missing information, giving feedback and joining our discussions and welcome every new contributor for the future as well!"),(0,r.kt)("p",null,"Also a special thanks to everyone committing time and code into the reasonml.org codebase (in no particular order):"),(0,r.kt)("p",null,"nikgraf, jdeisenberg, johnridesabike, baransu, sync, lessp, fhammerschmidt, cknitt, tsnobip, tatchi, wontheone1, theshortcut, sgrove, a-c-sreedhar-reddy, believer, vasco3, smlmrkhlms"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"If we forgot to mention someone (because it slipped through our git logs) please let us know and we will add your name!")))}p.isMDXComponent=!0,p.frontmatter={author:"ryyppy",date:"2020-05-06",previewImg:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1588759056/Reason%20Association/reasonml.org/state-of-reasonml-org-q2-2020_ngvmtc.jpg",articleImg:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1588599051/Reason%20Association/reasonml.org/state-of-reasonml-pt1-hero_m3n6wy.jpg",title:"State of reasonml.org 2020-Q2 / Pt. 1",description:"A report on recent achievements in the reasonml.org project and what\nto expect in the future. The first part is an introduction to our project.\n",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2020-05-06-state-of-reasonml-org-2020-q2-pt1.mdx"}},47929:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"higher-quality-docs"},"Higher Quality Docs"),(0,r.kt)("p",null,"In our ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"/blog/state-of-reasonml-org-2020-q2-pt1"}),"previous blogpost")," we talked about the rationale and general concepts of the ",(0,r.kt)("inlineCode",{parentName:"p"},"reasonml.org")," project. In this post we want to highlight how we make sure that our documentation is easy to manage and easy to refactor."),(0,r.kt)("h2",{id:"automatic-quality-assurance"},"Automatic Quality Assurance"),(0,r.kt)("p",null,"When we extracted the API docs from the BuckleScript codebase into markdown files, we noticed that a substantial number of examples in the JS / Belt module did not compile when we tried to copy them in a different file (mostly due to missing context, or not fully qualified module references). One can guess how many people have been frustrated with compiler errors. For a project of the depth and scope of BuckleScript, automating away these sorts of mistakes is critical so the core team can continue focusing on delivering faster compile times and more features."),(0,r.kt)("p",null,"To tackle this issue, we built a simple mechanism to automatically verify every API example. It extracts all the ",(0,r.kt)("inlineCode",{parentName:"p"},"reason example")," code fences from the markdown, and then compiles them with BuckleScript."),(0,r.kt)("p",null,"A markdown example with a code snippet might look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"some text with some broken `List.head` example:\n\n```reason example\nBelt.List.head([]); /* None */\nList.head([1, 2, 3]); /* This should actually be Belt.List */\n```\n")),(0,r.kt)("p",null,"Running the test with the broken example would produce:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-sh"}),"node scripts/test-examples.js \"pages/apis/latest/belt/list.mdx\"\n\nTesting example in 'pages/apis/latest/belt/list.mdx' on line 23...\nTesting example in 'pages/apis/latest/belt/list.mdx' on line 43...\nTesting example in 'pages/apis/latest/belt/list.mdx' on line 57...\n\n-------Results for 'pages/apis/latest/belt/list.mdx'----------\npages/apis/latest/belt/list.mdx:23 => ok\npages/apis/latest/belt/list.mdx:43 => failed\npages/apis/latest/belt/list.mdx:57 => ok\n...\npages/apis/latest/belt/list.mdx:1054 => ok\npages/apis/latest/belt/list.mdx:1078 => ok\npages/apis/latest/belt/list.mdx:1110 => ok\n-----------\nSummary:\nTotal Examples: 56\nFailed: 1\nSuccess: 55\n\nTip: You can also run tests just for specific files / globs:\n`node scripts/test-examples.js \"pages/belt_docs/array.mdx\"`\n\n-----------\nError Preview:\n\n  We've found a bug for you!\n  pages/apis/latest/belt/list.mdx: 46:1-9\n\n  1 \u2502 Belt.List.head([]); /* None */\n  2 \u2502\n  3 \u2502 List.head([1, 2, 3]); /* Some(1) */\n\n  The value head can't be found in List\n")),(0,r.kt)("p",null,"As you can see, the error points you to the right error location within the ",(0,r.kt)("inlineCode",{parentName:"p"},"list.mdx")," file by replacing the relative snippet line number with the absolute line number of the mdx file."),(0,r.kt)("p",null,"A full run of the example test suite on current master yields following results:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-sh"}),"Total Examples: 693\nFailed: 0\nSuccess: 693\n")),(0,r.kt)("p",null,"Leveraging the machines do the hard work of tracking and verifying nearly 700 snippets means that the rest of us can invest in higher-level experiences."),(0,r.kt)("p",null,"We also created a test to verify hyperlinks that cross-reference to other relative pages, which makes it hard to link to non-existing pages within reasonml.org."),(0,r.kt)("p",null,"As an example, this is how a hyperlink to a non-existent page will be reported:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-sh"}),"node scripts/test-hrefs.js\n-------Results for './pages/markdown-guide.mdx'----------\n./pages/markdown-guide.mdx:14 => ok\n./pages/markdown-guide.mdx:14 => failed / Unknown href './doesnt-exist' in line 14:52\n-----------\nSummary:\nTotal Links: 1125\nFailed: 1\nSuccess: 1125\n\nTip: You can also run tests just for specific files / globs:\n`node scripts/test-hrefs.js \"pages/belt_docs/*.mdx\"`\n\n-----------\nError Preview:\n./pages/markdown-guide.mdx: Unknown href './doesnt-exist' in line 14:52\n")),(0,r.kt)("p",null,"Here are the statistics for all internal cross-links within the boundaries of the documentation platform:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-sh"}),"Total Links: 1125\nFailed: 0\nSuccess: 1125\n")),(0,r.kt)("p",null,"The summary reports 1125 relative links that point to different sections on reasonml.org. This includes relative hrefs such as ",(0,r.kt)("inlineCode",{parentName:"p"},"../javascript/my-file"),' or "global paths" such as ',(0,r.kt)("inlineCode",{parentName:"p"},"/docs/javascript/latest/my-file")," etc."),(0,r.kt)("p",null,"With example / hyperlink tests in place, contributors were able to jump in and fix outstanding errors in all our API docs, e.g. see PR ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/reason-association/reasonml.org/pull/43/files"}),"43"),", ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/reason-association/reasonml.org/pull/47/files"}),"47"),", ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/reason-association/reasonml.org/pull/48/files"}),"48"),"."),(0,r.kt)("p",null,"This feature itself already showcases the value we provide with our new platform. Our goal is to make contributions and doc updates almost frictionless. We can even use this mechanism to test e.g. major compiler upgrades."),(0,r.kt)("p",null,"All the tests run automatically on CI, and since we are using NextJS to build our platform, we also offer live preview deployments for each PR which makes it easier for maintainers and contributors to spot visual regressions as well."),(0,r.kt)("h3",{id:"why-are-the-api-docs-maintained-in-markdown"},"Why are the API Docs Maintained in Markdown?"),(0,r.kt)("p",null,"You might ask yourself why we did the markdown extraction process in the first place. As for right now, the tool for generating documentation from code comments, called ",(0,r.kt)("inlineCode",{parentName:"p"},"odoc"),", is not capable of generating simple structured data, such as JSON."),(0,r.kt)("p",null,"Since ",(0,r.kt)("inlineCode",{parentName:"p"},"odoc")," data is pretty complex, the only output format right now is plain ",(0,r.kt)("strong",{parentName:"p"},"Html"),". You probably have seen ",(0,r.kt)("inlineCode",{parentName:"p"},"odoc")," generated Html already, such as the ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://reasonml.github.io/api/index"}),"Reason API docs")," on reasonml.github.io."),(0,r.kt)("p",null,"We want to achieve better UX and integrate the documentation seamlessly in our design system and application. In our next post of the series, we will explain how we'll achieve this with the aid of our ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/reason-association/doc-tools"}),"doc-tools")," project."),(0,r.kt)("h2",{id:"time-commitment-and-the-contribution-process"},"Time Commitment and the Contribution Process"),(0,r.kt)("p",null,"So far we've mostly been talking about what ",(0,r.kt)("em",{parentName:"p"},"we")," did and what technical tools ",(0,r.kt)("em",{parentName:"p"},"we")," build. Actually we think it's more important to talk more about ",(0,r.kt)("em",{parentName:"p"},"you"),", the community, taking part in all of this."),(0,r.kt)("p",null,"Right now, the official documentation websites are maintained by the Reason / BuckleScript core team. Some websites are part of the source code repository, such as ReasonReact, some are separate. Issue trackers are flooded with requests, and the maintainers only have a limited amount of time to tackle them. We try to share the burden by slowly but steadily taking over the documentation part so the core team can focus on improving the compiler speed or shipping new features."),(0,r.kt)("p",null,"Also knowing just one project well is not enough to build a documentation platform for the whole ecosystem. For instance, it doesn't make sense to only write about Reason syntax features when most of the interesting features are coupled to the Reason JS compiler (BuckleScript)."),(0,r.kt)("p",null,"We tried our best to raise enough funding and set our budgets in a way that allows us to allocate time and resources to work ",(0,r.kt)("em",{parentName:"p"},"full time")," on the documentation for 2020. That means that we can build up competences with a holistic view on the whole Reason platform, and can spend enough time on reviewing PRs, giving feedback and allocating tasks. We also want to make sure to lower the bus factor by adding more core documentation maintainers in the future. Continuous and deep collaboration, proper guidance and mutual trust will be the foundation for this."),(0,r.kt)("p",null,"To wrap things up, we think that we'll be able to establish a reliable documentation focused culture to share responsibilities within the community. That said, we'll try to be clear on our processes and goals, since we believe these are key aspects for successful collaboration."),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"In this article we described how test automation across the whole Reason documentation platform can help us to proactively detect and fix errors. We also explained how we'll improve the contribution process for community curated docs."),(0,r.kt)("p",null,"In case you have any questions or comments, make sure to let us know in the ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://discord.gg/reasonml"}),"Reason Discord")," ",(0,r.kt)("inlineCode",{parentName:"p"},"#docs")," channel!"),(0,r.kt)("p",null,"Happy docs browsing!"),(0,r.kt)("h2",{id:"upcoming-posts"},"Upcoming Posts"),(0,r.kt)("p",null,'This article is part of the "State of reasonml.org 2020-Q2" series (please stay tuned for the upcoming posts):'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Part 3) ",(0,r.kt)("a",(0,a.Z)({parentName:"strong"},{href:"/blog/state-of-reasonml-org-2020-q2-pt3"}),"Future Tools for the Community"),":"),"\nHow we'll generate API docs with our new ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/reason-association/doc-tools"}),"doc-tools")," and how the new Playground will look like"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Part 4) It's all Opinions:"),'\nWe\'ll dive into our documentation philosophy, our vision of the Reason Platform and ideas on how to tackle the "Reason Native" documentation.'),(0,r.kt)("h2",{id:"previous-posts"},"Previous Posts"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Part 1) ",(0,r.kt)("a",(0,a.Z)({parentName:"strong"},{href:"/blog/state-of-reasonml-org-2020-q2-pt1"}),"Introduction to reasonml.org")))))}l.isMDXComponent=!0,l.frontmatter={author:"ryyppy",date:"2020-05-11",previewImg:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1588759056/Reason%20Association/reasonml.org/state-of-reasonml-org-q2-2020_ngvmtc.jpg",articleImg:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1588865899/Reason%20Association/reasonml.org/state-of-reasonml-2020-q2-pt2-articleimg_rmeaka.jpg",title:"State of reasonml.org 2020-Q2 / Pt. 2",description:"A report on recent achievements in the reasonml.org project. This part is all\nabout quality assurance and time commitment.\n",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2020-05-11-state-of-reasonml-org-2020-q2-pt2.mdx"}},16754:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return p}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=n(53254),l=(o.createElement,{});function p(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"future-tools-for-the-community"},"Future Tools for the Community"),(0,r.kt)("p",null,"In ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"/blog/state-of-reasonml-org-2020-q2-pt2"}),"part 2")," of this blog series, we talked about the automation process for quality assurance within the documentation platform itself, and how we want to improve the collaboration process for our contributors."),(0,r.kt)("p",null,"This article will cover some features and exciting ideas we have been working on for quite a while now. Even though these features are not fully implemented yet, we still think it's important to communicate the whole spectrum of the project."),(0,r.kt)("h2",{id:"generating-full-api-docs"},"Generating Full API Docs"),(0,r.kt)("p",null,"As we already mentioned in our previous posts, the API documentation is currently maintained by hand, and we only offer documentation for the ",(0,r.kt)("inlineCode",{parentName:"p"},"Js")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Belt")," module, since they are the most relevant for BuckleScript development."),(0,r.kt)("p",null,"This will change as soon as our ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/reason-association/doc-tools"}),"doc-tools")," are ready to be used."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"doc-tools")," project includes a CLI that enables us to easily run the odoc toolchain on the BuckleScript repository to generate JSON data, which will be our foundation for statically generated, good looking, and interactive doc pages within NextJS (see ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation"}),"SSG"),"). The project is managed and developed by ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/rizo"}),"rizo"),". You can find more information about it ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://www.reason-association.org/projects/doc-tools"}),"here"),"."),(0,r.kt)("p",null,"We are aware that there is more software doing similar things, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"redoc")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"bs-doc"),", the latter acting as the driver for odoc within a BuckleScript project. Since our goal is to have a battle-tested, well-integrated and easy to use tool for odoc JSON generation, we will first start testing ",(0,r.kt)("inlineCode",{parentName:"p"},"doc-tools")," by generating the API docs for ",(0,r.kt)("inlineCode",{parentName:"p"},"reasonml.org")," before making it available to the broader community."),(0,r.kt)("p",null,"As soon as we figured out the details (e.g. the right JSON data model), we will have a better idea on how to build useful infrastructure around it. For instance, we thought about designing a customizable ReasonReact component library that allows consumers to build their own custom odoc data based UI for their own projects."),(0,r.kt)("p",null,"There's a lot of potential, but one needs to think about easy to use API design first and then test it thoroughly before public release."),(0,r.kt)("h2",{id:"search"},"Search"),(0,r.kt)("p",null,"We don't have any ",(0,r.kt)("strong",{parentName:"p"},"search functionality")," yet, and this will take some more time to implement. We looked for indexing services that can cover both, the prose text and API documentation to put search results in a more refined context."),(0,r.kt)("p",null,"There were some solutions, but still, Algolia turned out to be the best candidate with its smallest pricing tier. We don't want to rely on the Algolia OSS webscraping API, since it doesn't give us enough control on manipulating the search results, and we need more control if we want to be able to design a custom search experience."),(0,r.kt)(s.Z,{src:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1589267400/Reason%20Association/reasonml.org/search-mockup_bdms5r.jpg",withShadow:!0,caption:"A unified search overlay mockup for prose & API content",mdxType:"Image"}),(0,r.kt)("p",null,"We did the ground work for our search feature and we will get into more detail as soon as we are able to generate API docs with our aforementioned ",(0,r.kt)("inlineCode",{parentName:"p"},"doc-tools"),". Like with the API docs, we'll first need the doc-tools infrastructure so we can generate indexable data for Algolia as well."),(0,r.kt)("h2",{id:"playground"},"Playground"),(0,r.kt)("p",null,"We also invested a lot of time into thinking about the future of the Reason playground from a UX perspective. Our most important goal is to make it possible to switch BuckleScript versions on demand. We also wanted the relevant Reason version to be part of the playground bundle."),(0,r.kt)(s.Z,{src:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1589268285/Reason%20Association/reasonml.org/playground-mockup_symtzn.jpg",withShadow:!0,caption:"UI mockup for the new playground (Desktop version)",mdxType:"Image"}),(0,r.kt)("p",null,"Users should always know what version of BuckleScript / Reason is running when writing and sharing code, and the code written on a playground should be runnable with an equivalent bs-platform setup on a local machine. Right now, ",(0,r.kt)("inlineCode",{parentName:"p"},"reasonml.github.io/try")," uses different refmt.js / playground bundle versions, which makes it really hard to write reproducible code for the same BuckleScript version."),(0,r.kt)("p",null,"Switchable BuckleScript versions will help tremendously with the testing process for new BuckleScript beta releases. Within BuckleScript, we already started integrating the Refmt API into the bucklescript js_of_ocaml entry-point and refactoring the bundle API to access Reason / BuckleScript version more easily. In the next step we will start implementing the Playground web-app on ",(0,r.kt)("inlineCode",{parentName:"p"},"reasonml.org/try"),". You can find the mockups here: ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://xd.adobe.com/spec/1cd19c3a-a0bb-4f93-4e11-725589888696-6ae0/screen/e8559ac4-5e35-430b-83f3-e4ad8c1e274c/Reason-1400-Playground"}),"Desktop")," / ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://xd.adobe.com/spec/1cd19c3a-a0bb-4f93-4e11-725589888696-6ae0/screen/adfe80dc-6bc1-40a5-9975-aa062e63cdc5/Reason-Playground"}),"Mobile"),"."),(0,r.kt)("p",null,"Design & UX will play an important role here. Users should be able to use the playground on a mobile device as well, making the process of sharing / editing code snippets, while on the go, way easier."),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"You now know what new features to expect for ",(0,r.kt)("inlineCode",{parentName:"p"},"reasonml.org"),", such as the new Reason Playground or the ",(0,r.kt)("inlineCode",{parentName:"p"},"doc-tools")," project for extracting JSON data from module documentation in BuckleScript projects and we hope you are as excited as we are!"),(0,r.kt)("p",null,"In case you have any questions or comments, make sure to let us know in the ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://discord.gg/reasonml"}),"Reason Discord")," ",(0,r.kt)("inlineCode",{parentName:"p"},"#docs")," channel!"),(0,r.kt)("p",null,"Happy documentation browsing!"),(0,r.kt)("h2",{id:"upcoming-posts"},"Upcoming Posts"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Part 4) It's all Opinions:"),'\nWe\'ll dive into our documentation philosophy, our vision of the Reason Platform and ideas on how to tackle the "Reason Native" documentation.'),(0,r.kt)("h2",{id:"previous-posts"},"Previous Posts"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Part 1) ",(0,r.kt)("a",(0,a.Z)({parentName:"strong"},{href:"/blog/state-of-reasonml-org-2020-q2-pt1"}),"Introduction to reasonml.org"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Part 2) ",(0,r.kt)("a",(0,a.Z)({parentName:"strong"},{href:"/blog/state-of-reasonml-org-2020-q2-pt1"}),"Higher Quality Docs")))))}p.isMDXComponent=!0,p.frontmatter={author:"ryyppy",date:"2020-05-12",previewImg:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1588759056/Reason%20Association/reasonml.org/state-of-reasonml-org-q2-2020_ngvmtc.jpg",title:"State of reasonml.org 2020-Q2 / Pt. 3",description:"A report on recent achievements in the reasonml.org project. In this part we\ntalk about upcoming tools and features.\n",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2020-05-12-state-of-reasonml-org-2020-q2-pt3.mdx"}},49155:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Recently we made some significant improvements with our new encoding for lazy values, and we find it so exciting that we want to highlight the changes. The new encoding generates very idiomatic JS output like hand-written code."),(0,r.kt)("p",null,"For people who are not familiar with lazy evaluation, it is documented ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"/docs/manual/latest/lazy-values"}),"here"),"."),(0,r.kt)("h2",{id:"comparison-between-the-old-and-new-lazy-encoding"},"Comparison between the old and new lazy encoding"),(0,r.kt)("p",null,"Let's take an example, and see how the old encoding of a lazy value would look like:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reasonml"}),'let lazy1 = lazy {\n    "Hello, lazy" -> Js.log;\n     1\n}; // create a lazy value\n\nlet lazy2 = lazy 3 ; // artifical lazy values for demo purpose\n\nJs.log2 (lazy1, lazy2); // logging the lazy values\n\nlet (lazy la, lazy lb) = (lazy1, lazy2); // pattern match to force evaluation\n\nJs.log2 (la, lb); // logging forced values\n')),(0,r.kt)("p",null,"When compiled and run in ",(0,r.kt)("inlineCode",{parentName:"p"},"node"),", the runtime representation of our lazy values will look something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-bash"}),"lazy_demo$node src/lazy_demo.bs.js\n[ [Function], tag: 246 ] 3 # logging the output of two lazy blocks\nHello, lazy # lazy1, laz2 evaluated forced by pattern match, hence logging\n1 3 #logging the evaluated lazy block\n")),(0,r.kt)("p",null,"With the new encoding, the output of the same example code would look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-bash"}),"{ RE_LAZY_DONE: false, value: [Function: value] } { RE_LAZY_DONE: true, value: 3 } # logging block one with new encoding\nHello, lazy\n1 3\n")),(0,r.kt)("p",null,"As you can see, with the new encoding, no magic tags like 246  appear, and the lazy status is clearly marked via ",(0,r.kt)("inlineCode",{parentName:"p"},"RE_LAZY_DONE: (true | false) "),"."),(0,r.kt)("p",null,"In fact, the code quality of our generated ",(0,r.kt)("inlineCode",{parentName:"p"},"bs.js")," files has also improved. Going back to our old version, the generated JS would look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'var lazy1 = Caml_obj.caml_lazy_make((function (param) {\n        console.log("Hello, lazy");\n        return 1;\n      }));\n\nconsole.log(lazy1, 3);\n\nvar la = CamlinternalLazy.force(lazy1);\n\nvar lb = CamlinternalLazy.force(3);\n\nconsole.log(la, lb);\n\nvar lazy2 = 3;\n')),(0,r.kt)("p",null,"In our new version with all the new changes to the lazy encoding, the output is way more simplified:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'var lazy1 = {\n  RE_LAZY_DONE: false,\n  value: (function () { // closure now is uncurried arity-0 function\n      console.log("Hello, lazy");\n      return 1;\n    })\n};\n\nvar lazy2 = {\n  RE_LAZY_DONE: true,\n  value: 3\n};\n\nconsole.log(lazy1, lazy2);\n\nvar la = CamlinternalLazy.force(lazy1);\n\nvar lb = CamlinternalLazy.force(lazy2);\n\nconsole.log(la, lb);\n')),(0,r.kt)("h2",{id:"what-changes-did-we-make"},"What changes did we make?"),(0,r.kt)("p",null,"In the native runtime environment, the encoding of lazy values is rather complicated:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It is an array, which is not friendly for debugging in JS context."),(0,r.kt)("li",{parentName:"ul"},"It has some special tags which are not meaningful, for example, magic number 246, in JS context."),(0,r.kt)("li",{parentName:"ul"},"It tries to unbox lazy values with the help of the native garbage collector (GC). However, this behavior does not make sense in a JS runtime environment since the JSVM does not expose its GC semantics. Keeping that behavior would only introduce more complexity for the JS side.")),(0,r.kt)("p",null,"So in our current master branch, we drastically simplified our lazy encoding scheme to optimize for the JS runtime as much as possible:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The encoding is uniform; it is always an object of two key value pairs. One is ",(0,r.kt)("inlineCode",{parentName:"p"},"RE_LAZY_DONE")," to mark its status,\nthe other is either a closure or an evaluated value.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The compiler optimization still kicks in at compile time: if it knows a lazy value is already evaluated or does not need to be evaluated, it will promote its status to be 'done'. However, unlike in a native environment, unboxing is not happening. This makes sense since the most interesting unboxing scenarios only happen during runtime and not during compile time (a scenario which is impossible in the JSVM)."))),(0,r.kt)("p",null,"With the new encoding, ",(0,r.kt)("inlineCode",{parentName:"p"},"lazy")," is now way more viable for JS usage, so we encourage our users to use it whenever it is convenient!"),(0,r.kt)("h2",{id:"caveats"},"Caveats:"),(0,r.kt)("p",null,"Don't rely on the special name ",(0,r.kt)("inlineCode",{parentName:"p"},"RE_LAZY_DONE")," for JS interop; we may change it to a symbol in the future."))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2020-05-15",previewImg:null,title:"New Lazy Encoding in BuckleScript",description:"Highlights of our newest changes to the internal representation of lazy values\nand how it will benefit our users.\n",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2020-05-15-a-story-of-lazy-encoding.mdx"}},98162:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return p}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=n(53254),l=(o.createElement,{});function p(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"its-all-opinions"},"It's all Opinions"),(0,r.kt)("p",null,'This is the final part of our "State of reasonml.org Q1-2020" series. In ',(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"/blog/state-of-reasonml-org-2020-q2-pt3"}),"part 3"),", we gave our readers some insights on advanced features we've been working on for ",(0,r.kt)("inlineCode",{parentName:"p"},"reasonml.org")," and showed how our tools might help the community to build better documentation experiences themselves."),(0,r.kt)("p",null,"Apart from the general progress perspective of the ",(0,r.kt)("inlineCode",{parentName:"p"},"reasonml.org")," project, we also want to give you some more context on how we envision the documentation landscape for the Reason language in the near future. It should give you a perspective on how we see things, and we hope it will kick off some constructive community discussions on where things should be heading."),(0,r.kt)("h3",{id:"our-focus-web-development"},"Our Focus: Web Development"),(0,r.kt)("p",null,"Our goal is to increase the number of Reason developers by focusing on the biggest market for the language, which is the JS / React ecosystem."),(0,r.kt)("p",null,"Thinking back to when Reason got its first massive surge in traction around 2017, the primary motivation around adoption was its JS-dev friendly nature, with good JS interop and superb React support. Many people spoke at conferences and meetups because they were really excited about having a strongly typed language, with the right level of escape hatches to allow seamless interop with existing JS."),(0,r.kt)("p",null,"We had ",(0,r.kt)("em",{parentName:"p"},"massive")," success with ReasonConf 2018, which was mainly targeted at complete Reason beginners, and experienced JS developers. The demand was huge, and actually still is!"),(0,r.kt)("h4",{id:"what-about-native-compilation"},"What about Native Compilation?"),(0,r.kt)("p",null,"Reason is often advertised as an alternative syntax to OCaml. The native story was always a big part of its marketing scheme, so we took the time to really think about what use-cases we can really cover with the native (OCaml) platform and explain what we believe would be a good strategy to push the Reason platform further."),(0,r.kt)("p",null,"First of all, there are companies relying on the OCaml stack every day for crunching numbers and building reliable systems, like Ahrefs and JaneStreet, and some of them either use Reason just as an alternative syntax to OCaml, or they use Reason together with BuckleScript to build JS applications. They have the resources, company culture and the right level of OCaml knowledge to make that work."),(0,r.kt)("p",null,"Reason / BuckleScript and Reason / OCaml are pretty different though, not only tooling wise, but they also come with different community conventions and different roadmaps which are hard to unify. The effort making it work would extremely limit our actual potential to grow the language and community."),(0,r.kt)("p",null,"Companies and Products like ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://darklang.com/"}),"Darklang")," and ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://www.onegraph.com/"}),"OneGraph")," demonstrated with years of struggle and effort that native can eventually be used for web development, but the situation is still far from ideal. It requires a lot of resilience and dedication to make it work. ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://www.youtube.com/watch?v=EnPodoPzimE"}),"Paul Biggar")," and ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://www.youtube.com/watch?v=Lv2QCq6ZBPs"}),"Sean Grove")," talked about that topic (and all the problems along the way) in detail at ReasonConfUS 2019."),(0,r.kt)("p",null,"So what we think is that Reason Native has very specific use-cases that compiled JavaScript could not cover. Its biggest potential today lies in building Reason / OCaml related development tools (CLIs, parsers, ppxes, etc), since they are really fast and the library support for building e.g. CLIs is actually good."),(0,r.kt)("p",null,"In the app development space, for many companies the BuckleScript / NodeJS / ElectronJS platform is still perceived as a safer bet and easier to justify for managers and tech leads. For what we know from our discussions is that the most important question on tech stack were mostly about using TypeScript / Flow or Reason (BuckleScript) and not about choosing JS vs native."),(0,r.kt)("p",null,"There needs to be a clearer separation between both platforms (JS and OCaml), a stronger focus on the JS use-case and clear instructions on getting into native, for those who are ready to do so and need the extra performance."),(0,r.kt)("h4",{id:"marketing-and-newcomer-sustainability"},"Marketing and Newcomer Sustainability"),(0,r.kt)("p",null,"In the past few months, we observed more and more newcomers getting into the BuckleScript platform to build ReasonReact applications. Those Reason developers also started to talk more about Reason at JS conferences, meetups and ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://youtu.be/0Usnsda0WDo"}),"podcasts"),", which caused yet another wave of newcomers joining the Discord chat to ask for guidance, which is a great virtuous cycle (fun fact: it also seems we just hit the ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://discordapp.com/channels/235176658175262720/235176658175262720/702838691227369502"}),"10k users mark"),")!"),(0,r.kt)("p",null,'Fair enough, the only "real numbers and statistics" we can showcase are vague, but still interesting: Just typing in ',(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://www.youtube.com/results?search_query=reasonml"}),'"reasonml" on Youtube')," shows a list of videos mostly targeted to JS audiences."),(0,r.kt)(s.Z,{src:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1589389901/Reason%20Association/reasonml.org/youtube-search-reasonml_prnsfk.jpg",withShadow:!0,caption:"Top hits on Youtube for 'reasonml' (not logged in, anonymous browser session)",mdxType:"Image"}),(0,r.kt)("p",null,'To put this in relation to some "high volume" ',(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://www.youtube.com/channel/UCtFP_Hn5nIbZY4Xi47qfHhw?view_as=subscriber"}),"ReasonConf")," viewing numbers: Our best performing videos are our ReasonConf keynotes (2018: 3.3k, 2019: 4,3k, 2019 US: 18k). These are relatively low numbers in comparison to talks like ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://www.youtube.com/watch?v=EmBzyBQU760"}),"ReasonML for skeptics by Eric Shaefer"),", ticking in at 6.4k views (",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://reactday.berlin/"}),"React Day Berlin"),") and Ken Wheeler's ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://www.youtube.com/watch?v=lzEweA7RPi0"}),"ReasonML is Serious Business")," at React Rally 2018, which accumulated a pretty huge number of 15k views."),(0,r.kt)("p",null,"The same goes for other JS focused talks, such as ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://www.youtube.com/watch?v=xGN4BMPbk7Q"}),"GOTO2019 - ReasonML: React as a Language and what the Future looks like")," by Peter Piekarczyk (5.8k views) or high volume JS related Youtube channels like Fun Fun Function ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://www.youtube.com/watch?v=6MSksJhPcVA"}),"building a speed typing game with ReasonML and Comic Sans as editor font")," (19.8k views). There's still a ton more resources about ReasonML we didn't mention, since we were just talking about the first few Youtube hits there."),(0,r.kt)("p",null,"Apart from all that Youtube viewing numbers, many of you who spend a lot of time in our community channels already may have noticed that there seems to be more interaction happening, and we strongly believe this is related to the stronger marketing focus on the JS part, pulling in interested folks to build React applications in Reason. Even if all of this is just solely about web development, we also think that the OCaml community greatly benefited from this visibility boost as well."),(0,r.kt)("p",null,"Hopefully for the future, with a unified documentation platform and blog as a central communication channel, it will be easier to conduct polls or capture web traffic for more concrete factual data. To move beyond our current stage where we are all largely guesstimating, we need to align our resources and put a focus on one specific goal, to be able to build a solid foundation the Reason platform can further grow on."),(0,r.kt)("h3",{id:"separating-the-documentation-for-js-and-native"},"Separating the Documentation for JS and Native"),(0,r.kt)("p",null,"So what about the native documentation then? ",(0,r.kt)("inlineCode",{parentName:"p"},"reasonml.org"),' reserved a spot for the Native platform, but it requires a lot of dedicated work to "Reasonify" most OCaml platform resources first.'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Documentation would include:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Reasonified OCaml manual"),(0,r.kt)("li",{parentName:"ul"},"esy & opam"),(0,r.kt)("li",{parentName:"ul"},"dune"),(0,r.kt)("li",{parentName:"ul"},"ppxes"),(0,r.kt)("li",{parentName:"ul"},"js_of_ocaml"),(0,r.kt)("li",{parentName:"ul"},"etc.")),(0,r.kt)("p",null,"We strongly believe that it's not viable to teach the Reason language while it requires you to know the in's and out's of OCaml as well. Learning one language is hard enough, so we shouldn't confront newcomers with leaky abstractions without any preparations."),(0,r.kt)("p",null,"Our proposal (to the community) was to further promote Reason a JS-first language, but still have ",(0,r.kt)("inlineCode",{parentName:"p"},"Reason Native")," as the ace-up-our-sleeve for doing deep level work in tooling or building more performant binaries."),(0,r.kt)("p",null,"Please be aware that we are not the ones to make a final decision on this: In the interest of serving one community well, we've chosen to make this one experience delightful. And after several months of tinkering with documentation concepts, this is the best we have produced."),(0,r.kt)("p",null,"That said, ",(0,r.kt)("strong",{parentName:"p"},"we are looking for contributors"),' to help us with the documentation of the "Reason Native" section, since it requires a ton of work, knowledge and dedication to split the workload into a list of actionables and to coordinate the technical writing.'),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"Building documentation is not only a technical challenge, it's also about having a proper vision and putting focus on certain aspects of the language. We should not only think about technical ingenuity, but also keep an eye on bringing in more people. Our hopes is that we can break the complexity of understanding the language by focusing on a single use-case, then later branch out to more complex areas in well isolated manners, as soon as we get ready for prime time."),(0,r.kt)("p",null,"We want Reason to be a web developer friendly language, but we also want to be able to document the Native parts in a way that can be understood without any OCaml knowledge, and for that we'll need help from experienced and ambitious native toolchain users to make this happen."),(0,r.kt)("p",null,'This is the end of our "State of reasonml.org Q1-2020" series. We hope you have a better understanding on what\'s going on in ',(0,r.kt)("inlineCode",{parentName:"p"},"reasonml.org")," and will try to keep our processes transparent with future blog posts as well."),(0,r.kt)("p",null,"In case you have any questions or comments, make sure to let us know in the ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://discord.gg/reasonml"}),"Reason Discord")," ",(0,r.kt)("inlineCode",{parentName:"p"},"#docs")," channel!"),(0,r.kt)("p",null,"Happy documentation browsing!"),(0,r.kt)("h2",{id:"previous-posts"},"Previous Posts"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Part 1) ",(0,r.kt)("a",(0,a.Z)({parentName:"strong"},{href:"/blog/state-of-reasonml-org-2020-q2-pt1"}),"Introduction to reasonml.org"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Part 2) ",(0,r.kt)("a",(0,a.Z)({parentName:"strong"},{href:"/blog/state-of-reasonml-org-2020-q2-pt1"}),"Higher Quality Docs"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Part 3) ",(0,r.kt)("a",(0,a.Z)({parentName:"strong"},{href:"/blog/state-of-reasonml-org-2020-q2-pt3"}),"Future Tools for the Community")))))}p.isMDXComponent=!0,p.frontmatter={author:"ryyppy",date:"2020-05-15",previewImg:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1588759056/Reason%20Association/reasonml.org/state-of-reasonml-org-q2-2020_ngvmtc.jpg",articleImg:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1589395424/Reason%20Association/reasonml.org/state-of-reasonml-pt4-articleimg_jnp5mj.jpg",title:"State of reasonml.org 2020-Q2 / Pt. 4",description:"A report on recent achievements in the reasonml.org project.\nThis is the final part of the series about our vision of a more accessible Reason platform.\n",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2020-05-15-state-of-reasonml-org-2020-q2-pt4.mdx"}},68068:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In the next version of BuckleScript, we will make several major changes to tweak the data representation for various data types,\nmaking them more idiomatic and debugger friendly."),(0,r.kt)("p",null,"Note: since V8 or other JavaScript engines are tweaked to make idiomatic JS code run fast, these changes also results in faster running code."),(0,r.kt)("p",null,"Another property, for a compiled language like BuckleScript,\nis that we can reason about ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Inline_caching"}),"IC")," friendliness by just looking at the type definitions locally;\nthis is very helpful for advanced users to write performance predictable JS code."),(0,r.kt)("p",null,"This is a nice ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://mrale.ph/blog/2012/06/03/explaining-js-vms-in-js-inline-caches.html"}),"introduction")," to inline caching if you are unfamiliar with this topic,\nor you can skip the section about IC and come back later when you get more familiar."),(0,r.kt)("p",null,"Note: this article is quite dense, so  we will skip the old encoding."),(0,r.kt)("h2",{id:"record-stable"},"Record (stable)"),(0,r.kt)("p",null,"BuckleScript has compiled records to idiomatic JS objects since ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://bucklescript.github.io/blog/2019/11/18/whats-new-in-7"}),"version 7"),". This is great for performance and debugging.\nWe also support label renaming to shorten field names to save space."),(0,r.kt)("p",null,"Take the code below for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reasonml"}),'type int64 = {\n    loBits : int [@bs.as "lo"],\n    hiBits : int [@bs.as "hi]\n}\nlet value = {hiBits : 33 , loBits : 32 };\nlet rand = ({loBits; hiBits}) => loBits + hiBits;\n')),(0,r.kt)("p",null,"It will generate JS output as below:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"var value = {lo : 32, hi : 33}\nfunction rand (param){\n    return param.lo + param.hi\n}\n")),(0,r.kt)("p",null,"If users want to make it even  shorter, in next version, they can choose to compile record as an array, as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reasonml"}),'type int64 = {\n     [@bs.as "0"] loBits : int,\n    [@bs.as "1"] hiBits : int\n}\nlet value = {hiBits : 33 , loBits : 32 };\nlet rand = ({loBits, hiBits}) => loBits + hiBits;\n')),(0,r.kt)("p",null,"This produces the following JS output:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"var value = [32,33]\nfunction rand(param){\n    return param[0] + param[1]\n}\n")),(0,r.kt)("p",null,"The label renaming techniques can be applied systematically using a syntactic macro;\nin the future we may provide an advanced mode to apply it automatically. Another nice property is that\nonly the type definition needs to be adapted; other parts of code remain untouched."),(0,r.kt)("h3",{id:"ic-friendliness"},"IC friendliness"),(0,r.kt)("p",null,"Records are always in a perfect position for Inline Caching(IC); the compiler can ensure all generated records are of the same shape."),(0,r.kt)("h2",{id:"variant-internal"},"Variant (internal)"),(0,r.kt)("p",null,"This encoding for variants may be  subject to change in the future, but it is so simple that it makes sense for users to have a basic understanding."),(0,r.kt)("p",null,"Take the following type definition, for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reasonml"}),"type t =\n  | Black(t, int, t)\n  | Red(t, int, t)\n  | Empty;\nlet empty = Empty  ;\nlet v0 = Black (empty, 3, empty);\nlet v1 = Red (empty, 3, empty);\n")),(0,r.kt)("p",null,"The generated JS code would be:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"var empty =/*Empty*/ 0;\nvar v0  = {TAG : 0/*Black*/, _0 : /*Empty*/ 0 , _1 : 3 , _2 : /*Empty */ 0};\nvar v1 = {TAG : 1/*Red*/, _0 : /*Empty*/ 0 , _1 : 3 , _2 : /*Empty */ 0};\n")),(0,r.kt)("p",null,"As you can see, variants are divided into two categories.\nVariants which do not have a payload are compiled into a number starting from 0,\nwhile variants which have a payload are compiled into an object which has the first slot named ",(0,r.kt)("inlineCode",{parentName:"p"},"TAG")," and the following slots named as ",(0,r.kt)("inlineCode",{parentName:"p"},"_0"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"_1")," .."),(0,r.kt)("h3",{id:"variant-with-inline-records"},"variant with inline records"),(0,r.kt)("p",null,"Users can give names to the payload, and the compiler respects those names. However, we don't support user-level renaming, i.e, using ",(0,r.kt)("inlineCode",{parentName:"p"},"bs.as"),", at this time."),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reasonml"}),"type t =\n  | Black ({l:t, value: int, r: t})\n  | Red({l:t, value: int, r: t})\n  | Empty;\nlet empty = Empty  ;\nlet v0 = Black ({l:empty, value: 3, r:empty});\nlet v1 = Red ({l:empty, value:3, r: empty});\n")),(0,r.kt)("p",null,"The generated JS code would be:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"var empty =/*Empty*/ 0;\nvar v0  = {TAG : 0/*Black*/, l: /*Empty*/ 0 , value : 3 , r: : /*Empty */ 0};\nvar v1 = {TAG : 1/*Red*/, l : /*Empty*/ 0 , value : 3 , r : /*Empty */ 0};\n")),(0,r.kt)("h3",{id:"special-case-when-the-number-of-variants-which-has-payload-is-only-1"},"Special case when the number of variants which has payload is only 1."),(0,r.kt)("p",null,"Take the types below for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reasonml"}),"type list =\n    | Nil\n    | Cons (int , list);\n")),(0,r.kt)("p",null,"Since only one variant has a payload, the compiler does not need  add ",(0,r.kt)("inlineCode",{parentName:"p"},"TAG")," when we destructure the data for pattern matching.\nThus, the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reasonml"}),"let u = Cons(1,Nil)\n")),(0,r.kt)("p",null,"will generate the following JS output:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"var u = {_0: 1, _1 : /*Nil*/ 0 }; // No TAG data.\n")),(0,r.kt)("h3",{id:"specialized-for-immutable-list"},"Specialized for immutable list"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"list")," type is a built-in type; its type definition is similar to this :"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reasonml"}),"type t ('a) =\n    | []\n    | (::) ('a , t ('a))\n")),(0,r.kt)("p",null,"Without any customization, this would generate JS objects with indexes like ",(0,r.kt)("inlineCode",{parentName:"p"},"_0"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"_1"),", etc.\nSince lists are so pervasive, we provide some special treatment so that"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reasonml"}),"let u = [0,1,2,3]\n")),(0,r.kt)("p",null,"Will generate js code as below:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"var u = {hd : 0, {tl : {hd : 1, {tl : {hd: 2, {tl : {hd :3 , tl : /*[]*/0 }}}}}}}\n")),(0,r.kt)("p",null,"This is a minor change; we changed the name of ",(0,r.kt)("inlineCode",{parentName:"p"},"_0")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"hd")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"_1")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"tl"),"."),(0,r.kt)("h3",{id:"ic-friendliness-1"},"IC friendliness"),(0,r.kt)("p",null,"Types that have only one variant with a payload are in a perfect position for IC."),(0,r.kt)("p",null,"The number of variants which does not carry payload will not affect IC, since the pattern match will do a split first."),(0,r.kt)("p",null,"Types with variants that have the same number of payloads, such as the red-black-tree example above, are also in a perfect position for IC."),(0,r.kt)("p",null,"For other cases, it will hit a polymorphic IC in the V8 jit compiler, this is not the fastest running case."),(0,r.kt)("p",null,"Note that you can always tweak the variant layout to make it IC friendly. For example, you can always introduce one level\nof indirection to make all variants share the same number of payloads:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reasonml"}),"type t =\n    | A0 (a0) // 1 payload\n    | A1 (a1) // 1 payload\n    | A2 (a2) // 1 payload\n    | C0\n    | C1\n    | C2 // This will not affect IC\n")),(0,r.kt)("h3",{id:"variant-in-debug-mode"},"Variant in debug mode"),(0,r.kt)("p",null,"Note we only generate constructor names in comments for debugging.\nWhen constructor names are attached to the data, it will be more useful for debugging. When debug mode is activated using ",(0,r.kt)("inlineCode",{parentName:"p"},"-bs-g"),","),(0,r.kt)("p",null,"The generated code will be changed from below"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"var v0  = {TAG : 0/*Black*/, _0 : /*Empty*/ 0 , _1 : 3 , _2 : /*Empty */ 0};\n")),(0,r.kt)("p",null,"to"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'var v0  = {TAG : 0, _0 : /*Empty*/ 0 , _1 : 3 , _2 : /*Empty */ 0, [Symbol.for("name")]: "Black"};\n')),(0,r.kt)("h2",{id:"polymorphic-variant-internal"},"Polymorphic-variant (internal)"),(0,r.kt)("p",null,"Polymorphic variants allow users to use the types without declaring them first:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reasonml"}),"let u = 3 -> `hello\n")),(0,r.kt)("p",null,"It will generate"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"var u = {HASH : MAGIC_NUMBER, VAL: 3 }\n")),(0,r.kt)("p",null,"The field of ",(0,r.kt)("inlineCode",{parentName:"p"},"HASH")," is the hash of name ",(0,r.kt)("inlineCode",{parentName:"p"},'"hello"'),", while the ",(0,r.kt)("inlineCode",{parentName:"p"},"VAL")," is the payload"),(0,r.kt)("h3",{id:"ic-friendliness-2"},"IC friendliness"),(0,r.kt)("p",null,"Polymorphic variants are always in a perfect position for IC, the compiler can ensure all generated objects are of the same shape.\nThis is because the payload is not unpacked; it is always just one payload."),(0,r.kt)("h3",{id:"polymorphic-variant-in-debug-mode"},"Polymorphic variant in debug mode"),(0,r.kt)("p",null,"In debug mode, similar to variant, we carry the name in generated code for debugging,"),(0,r.kt)("p",null,"So instead of"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"var u = {HASH : MAGIC_NUMBER, VAL: 3 }\n")),(0,r.kt)("p",null,"It will generate"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'var u = {HASH : MAGIC_NUMBER, VAL: 3 , [Symbol.for("name")] : "hello"}\n')),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"BuckleScript users will  profit from better runtime performance and a better debugging experience for various data types, such as variants,\nexceptions, lazy values and more since version 8.0."),(0,r.kt)("p",null,"Happy Hacking!"))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2020-06-22",previewImg:null,title:"Make generated JavaScript Inline Caching friendly using types in BuckleScript version 8",description:"Highlights of our newest changes to the internal representation\nand how they will benefit our users.\n",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2020-06-22-overview-of-new_encoding.mdx"}},32954:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Update / August 13th 2020:"),"\nBuckleScript is now called ReScript, more infos ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"/blog/bucklescript-is-rebranding"}),"here"),".")),(0,r.kt)("h2",{id:"whats-new"},"What's new?"),(0,r.kt)("p",null,"The release of BuckleScript 8.1 contains a new important addition: we've rewritten the vendored Reason syntax parser and printer."),(0,r.kt)("p",null,"The rewrite was done by a community member of ours, ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://twitter.com/_binary_search"}),"Maxim"),". Maxim was a main contributor to the old Reason repo, and together we've reached the conclusion a while ago that the codebase needed a revamp. After wrestling with it for the longest time, we've settled on a low-key rewrite."),(0,r.kt)("p",null,"Syntax discussions have always been churny, so we didn't want to prematurity announce something before it's ready for proper critiques. After testing this extensively; we now deem it solid enough for your consumption."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Here's what you need to know:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The new syntax comes directly with your BuckleScript >=8.1 installation. You won't have to install anything else. It does not depend on the old ",(0,r.kt)("inlineCode",{parentName:"li"},"refmt"),"."),(0,r.kt)("li",{parentName:"ul"},"There are a few differences in syntax between the Reason syntax, documented in the ",(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"/docs/manual/v8.0.0/migrate-from-bucklescript-reason"}),"migration docs"),"."),(0,r.kt)("li",{parentName:"ul"},"The migration docs also guides you toward converting your codebase to the new syntax, file by file or project by project."),(0,r.kt)("li",{parentName:"ul"},"This syntax isn't available on Reason native compilation."),(0,r.kt)("li",{parentName:"ul"},"As always, check our documentation's Editor Plugins section for your editor's support of this new syntax."),(0,r.kt)("li",{parentName:"ul"},"To avoid conflict, we've employed the new file extensions ",(0,r.kt)("inlineCode",{parentName:"li"},".res")," and ",(0,r.kt)("inlineCode",{parentName:"li"},".resi"),", for implementation and interface respectively."),(0,r.kt)("li",{parentName:"ul"},"This means the syntax sits alongside the existing Reason and ml syntax. Your existing code will keep working!"),(0,r.kt)("li",{parentName:"ul"},"Issues for the new syntax go ",(0,r.kt)("a",(0,a.Z)({parentName:"li"},{href:"https://github.com/rescript-lang/syntax"}),"here"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"This is how it looks like:")),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res"}),'// src/example.res\n\nif hasEaten {\n  Js.log("more dessert please")\n} else {\n  Js.log("dessert please")\n}\n\nlet message = j`Hello ${userName->Js.String.toUpperCase}!`\n\ntype student<\'extraInfo> = {\n  name: string,\n  age: int,\n  otherInfo: \'extraInfo,\n}\n\n@bs.val external window: {..} = "window"\n\nwindow["addEventListener"]("focus", onFocus)\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Here is an example of an error message:")),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"  Syntax error!\n  src/test.res:7:31-8:0\n\n  5 \u2502 }\n  6 \u2502\n  7 \u2502 let message = j`hello ${world}!\n  8 \u2502\n\n  Did you forget to close this template expression with a backtick?\n")),(0,r.kt)("p",null,"The short version: install ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"mailto:bs-platform@8.1"}),"bs-platform@8.1")," or later, create a new ",(0,r.kt)("inlineCode",{parentName:"p"},".res")," file in your new/existing project, then have fun!"),(0,r.kt)("p",null,"Quality-wise, the parser now features excellent error messages, is noticeably faster on projects of all scales, and should be much more robust. The rearchitecture also allows us to release in a more professional manner. We'll go into more details on the motivation and architecture in the future when the syntax pans out well; hopefully, these will prove to be ",(0,r.kt)("strong",{parentName:"p"},"very")," interesting and illuminating for all engineers. Stay tuned!"),(0,r.kt)("p",null,"Maxim's effort is our community at its best and we hope that you'll enjoy his work as much as we did!"),(0,r.kt)("p",null,"Stay safe!"))}l.isMDXComponent=!0,l.frontmatter={author:"chenglou",date:"2020-07-01",previewImg:"https://res.cloudinary.com/dmm9n7v9f/image/upload/v1587472539/Reason%20Association/reasonml.org/reasonml_art1_1280_zfwnyo.png",badge:"release",title:"A New Syntax for BuckleScript",description:"First announcements on our latest efforts for a better syntax parser.\n",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2020-07-01-bucklescript-8-1-new-syntax.mdx"}},12649:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Update / August 13th 2020:"),"\nBuckleScript is now called ReScript. More infos ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"/blog/bucklescript-is-rebranding"}),"here"))),(0,r.kt)("h2",{id:"a-statement-for-the-future"},"A Statement for the Future"),(0,r.kt)("p",null,"Our ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"/blog/bucklescript-8-1-new-syntax"}),"new ReScript syntax announcement")," generated lots of good feedback, but also raised some concerns from community members whose use-cases still align with our goal, but sometimes extend outside of it, and who are worried about further commitments to the ecosystem in the face of new unknowns."),(0,r.kt)("p",null,"This post is dedicated to answer some commons questions regarding trust, breakages, and future investment."),(0,r.kt)("h2",{id:"q--a"},"Q & A"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"What is the new syntax called?")),(0,r.kt)("p",null,"It's called ReScript. The extension is ",(0,r.kt)("inlineCode",{parentName:"p"},".res")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".resi")," (reminiscent of Reason) as to not overload various existing tools operating on ",(0,r.kt)("inlineCode",{parentName:"p"},".ml")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".re"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Will BuckleScript break my existing code?")),(0,r.kt)("p",null,"No. This new syntax is purely additive. It sits beside the existing OCaml and Reason syntax inside BuckleScript. We ",(0,r.kt)("strong",{parentName:"p"},"won't")," remove OCaml and Reason support from BuckleScript for a long time, whatever the surface emphasis might be."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Will I be able to continue writing OCaml/Reason and compile to JS in the future?")),(0,r.kt)("p",null,"It follows from our previous guarantee that yes, you will still be able to. If BuckleScript ",(0,r.kt)("em",{parentName:"p"},"ever")," starts removing language features, it'll be on the ",(0,r.kt)("inlineCode",{parentName:"p"},".res")," syntax level; this means that you can just keep writing in OCaml and Reason syntax to access the complete set of OCaml features that BuckleScript supports today."),(0,r.kt)("p",null,"BuckleScript will also continue to acquire upstream OCaml features whenever relevant, just like today."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"What about the AST? Will this new syntax prompt the move to a non-OCaml AST?")),(0,r.kt)("p",null,"No, since that'd break existing ppxes (e.g. internationalization, graphql). If we feel the need to adopt a new AST in the future, it'll again be purely additive."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Will there be a migration script to convert our code to the new syntax?")),(0,r.kt)("p",null,"Yes, very soon, from both OCaml and Reason. We wanted to gather the community feedback before finalizing it. So far, many changes proposed by members ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/syntax/issues/8"}),"have")," ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/syntax/pull/12"}),"been")," ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/syntax/issues/7"}),"great"),"!"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"What's the editor tooling story?")),(0,r.kt)("p",null,"Currently, highlighting of ",(0,r.kt)("inlineCode",{parentName:"p"},".res")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".resi")," is supported on most editors. We will be adding code intelligence support (type-driven autocomplete, type hint, diagnosis panel) back, to the same level as Reason and more (thanks to the syntax's tighter integration with BuckleScript now)."),(0,r.kt)("p",null,"We will be adding these in Reason-language-server, so the editing setup won't need to change. We as first party don't work on ocaml's language server."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"We now have 3 syntaxes to worry about.")),(0,r.kt)("p",null,"The plan is to emphasize the new syntax and focus our tooling around it. It'll be confusing to temporarily have different syntaxes in the same codebase, but that's the cost of a proper migration support. We hope this is transient; it's darkest before the dawn."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"How do we address the fragmentation of the community by the new syntax?")),(0,r.kt)("p",null,"Folks who have been in the community for a while know that there have always been opposing philosophies regarding newcomer funneling, tooling emphasis, library preferences, etc. The new syntax raised these opposing voices, but did not create them; it's only been released for two days, after all."),(0,r.kt)("p",null,"Rather, it's more accurate to say a few pieces of shared infrastructure held opposing forces together. This is true when Reason spun off from OCaml's engineering, and true when BuckleScript entered the picture."),(0,r.kt)("p",null,"We can't realistically always release new features that are a fusion/compromise of various philosophies, but that's exactly what we've been trying our best to do for the past few years. This syntax is a departure from that (much tighter integration with BS, more JavaScript/TypeScript-friendly philosophy, many fewer compromises, etc.). We believe that its quality so far speaks for the decisions even if its stance generated worries."),(0,r.kt)("p",null,"Since even before the open sourcing of Reason, the team has been evaluating the proper management and division of the community. If a proper separation means each subset of the community can live more harmoniously within themselves, with less noise, while still enjoying the technical infra support we've provided and have promised to continue providing above, then we're willing to explore that possibility."),(0,r.kt)("p",null,"Worth emphasizing for the last time: your code keeps working. Your future code will also keep working."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"The new changes make me worried about the (potential lack of) the team's future support I'm going to receive.")),(0,r.kt)("p",null,"Consider that the new syntax is written by a ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/iwankaramazow/"}),"community member")," of ours, outside of the official Reason team."),(0,r.kt)("p",null,"This means we get back ",(0,r.kt)("em",{parentName:"p"},"more"),", not less, time and energy that we can reinvest (thank you again, ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://twitter.com/_binary_search"}),"Maxim"),"!)."),(0,r.kt)("p",null,"Consider also that with the release of this new syntax, people's entire toolchain, from BuckleScript to syntax to ReasonReact to editor tooling, has now become primarily community-owned, with much less reliance on the company (while retaining the same energy devoted to said projects by the company)."),(0,r.kt)("p",null,"We hope you can see how this is a net engineering & bus factor increase, and a good justification to keep investing into the ecosystem rather than less. Again: same amount of company engineering effort and ",(0,r.kt)("em",{parentName:"p"},"more")," community engineering effort, in the most prominent parts."),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"Hopefully this post helped assuage certain concerns regarding future support and investment. More importantly, let's not forget to enjoy all the awesome improvements in BuckleScript 8.1; let the code speak for itself! And let's continue shipping great products!"),(0,r.kt)("p",null,"Stay tuned and let us know in the ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://forum.rescript-lang.org"}),"Discourse Forum")," what you think!"))}l.isMDXComponent=!0,l.frontmatter={author:"chenglou","co-authors":["ryyppy"],date:"2020-07-06",title:"A Note on BuckleScript's New Syntax and Its Future Support Commitments",description:"This post clarifies the goals and commitments of the BuckleScript compiler toolchain\nand gives more context on what to expect in the future.\n",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2020-07-06-a-note-on-bucklescripts-future-commitments.mdx"}},36754:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"new-release"},"New Release"),(0,r.kt)("p",null,"We are happy to announce BuckleScript 8.1.1, which features syntax tweaks to the ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://reasonml.org/blog/bucklescript-8-1-new-syntax"}),"newly released syntax")," and also adds new capabilities for converting and formatting your code via the ",(0,r.kt)("inlineCode",{parentName:"p"},"bsc")," command."),(0,r.kt)("p",null,"There are no breaking changes. You can install it with ",(0,r.kt)("inlineCode",{parentName:"p"},"npm install bs-platform@8.1.1"),"."),(0,r.kt)("h2",{id:"newest-syntax-tweaks"},"Newest Syntax Tweaks"),(0,r.kt)("p",null,"Based on the ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://reasonml.chat/t/bucklescript-8-1-new-syntax-option"}),"feedback thread")," from our ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://reasonml.org/blog/bucklescript-8-1-new-syntax"}),"previous new BuckleScript syntax announcement"),", we've made some tweaks:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"list[1, 2, 3]")," is now ",(0,r.kt)("inlineCode",{parentName:"li"},"list{1, 2, 3}"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"`hello \ud83d\udc4b ${message}`")," quoted string now supports proper unicode and type-safe interpolation.")),(0,r.kt)("p",null,"Small changes, big difference. This release also marks our syntax's ",(0,r.kt)("strong",{parentName:"p"},"feature freeze")," for existing features: updates to the syntax in the near to medium term only be additive or contain bug fixes, no breaking changes."),(0,r.kt)("h2",{id:"a-new-converter-and-formatter-flag-for-bsc"},"A New Converter and Formatter Flag for ",(0,r.kt)("inlineCode",{parentName:"h2"},"bsc")),(0,r.kt)("p",null,"We added a new experimental flag ",(0,r.kt)("inlineCode",{parentName:"p"},"-fmt"),", which allows you to  format any ",(0,r.kt)("inlineCode",{parentName:"p"},".res"),"/",(0,r.kt)("inlineCode",{parentName:"p"},".resi")," file, or convert any ",(0,r.kt)("inlineCode",{parentName:"p"},".re"),"/",(0,r.kt)("inlineCode",{parentName:"p"},".rei"),"/",(0,r.kt)("inlineCode",{parentName:"p"},".ml"),"/",(0,r.kt)("inlineCode",{parentName:"p"},".mli")," file to the new syntax."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Usage:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"bsc -fmt MyFile.res")," will print out the pretty printed content of ",(0,r.kt)("inlineCode",{parentName:"p"},"MyFile.res")," to stdout."),(0,r.kt)("p",null,"To convert any Reason or OCaml file, just pipe the output to a new ",(0,r.kt)("inlineCode",{parentName:"p"},"res")," file: ",(0,r.kt)("inlineCode",{parentName:"p"},"node_modules/.bin/bsc -fmt src/Button.re > src/Button.res")),(0,r.kt)("p",null,"Please note that this CLI flag is still experimental until we settle on the final API (e.g. we want to add support for passing additional parameters to the formatter, such as accepting stdin)."),(0,r.kt)("p",null,"We are happy for feedback! Make sure to use ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://reasonml.chat/t/the-formatter-converter-for-the-new-syntax-is-available-for-testing/2423"}),"this forum post")," for general discussions, or the ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/syntax"}),"new syntax")," issue trackers for bug reports."),(0,r.kt)("p",null,"Enjoy!"))}l.isMDXComponent=!0,l.frontmatter={author:"chenglou",date:"2020-07-17",badge:"release",title:"BuckleScript 8.1.1 released",description:"New Syntax Tweaks, Formatter and Converter",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2020-07-17-bucklescript-release-8-1-1.mdx"}},4629:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"string-literal-types-in-bucklescript"},"String literal types in BuckleScript"),(0,r.kt)("p",null,(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/advanced-types.html#string-literal-types"}),"String literal types")," were introduced by TypeScript to model\nJavaScript behavior, it's a relatively new concept since most type systems are runtime encoding agnostic. However, to smooth the user experience when writing\nbindings to existing JS API, we are introducing string literal types which are unique in several behaviors compared with TypeScript: they support type inference,\npattern matching and can be attached to data."),(0,r.kt)("h2",{id:"vanilla-string-literal-types"},"Vanilla string literal types"),(0,r.kt)("p",null,"The notation in Reason for string literal types is like this: ","`",(0,r.kt)("inlineCode",{parentName:"p"},"hello"),', which will be compiled into "hello".\nThe difference is that ',"`",(0,r.kt)("inlineCode",{parentName:"p"},"hello")," is given a type so that you can not mix it with other strings."),(0,r.kt)("p",null,"Take the following code snippet as an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reasonml"}),"let encoding = (enc) =>\n  switch (enc) {\n  | `utf8 => 0\n  | `ascii => 1\n  | `utf16 => 2\n  };\n")),(0,r.kt)("p",null,"It will be compiled into"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'function encoding(en) {\n  if (en === "ascii") {\n    return 1;\n  } else if (en === "utf16") {\n    return 2;\n  } else {\n    return 0;\n  }\n}\n')),(0,r.kt)("p",null,"If you pass a random encoding, e.g, ",(0,r.kt)("inlineCode",{parentName:"p"},"encoding (`ucs32)"),", you get a type error:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{}),"This expression has type [> `ucs32 ]\n       but an expression was expected of type [< `ascii | `utf16 | `utf8 ]\n       The second variant type does not allow tag(s) `ucs32\n")),(0,r.kt)("p",null,"Another thing you can observe from the generated JS is that since the compiler can guarantee that the input could only be ",(0,r.kt)("inlineCode",{parentName:"p"},"`utf8, `ascii,`utf16"),', it will skip the comparison with "utf8" when the first two are compared.'),(0,r.kt)("p",null,"If we add a wild card to match any encoding"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reasonml"}),"let encoding = (enc) =>\n  switch (enc) {\n  | `utf8 => 0\n  | `ascii => 1\n  | `utf16 => 2\n  | _ => 3\n  };\n")),(0,r.kt)("p",null,"It will generate JS as below:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'function encoding(en) {\n  if (en === "utf8") {\n    return 0;\n  } else if (en === "ascii") {\n    return 1;\n  } else if (en === "utf16") {\n    return 2;\n  } else {\n    return 3;\n  }\n}\n')),(0,r.kt)("h2",{id:"declaring-types-for-string-literal-types"},"Declaring types for string literal types"),(0,r.kt)("p",null,"Note that all string literal types can be inferred.\nThis is very convenient for you when you are doing development. When things get more stable, it would be nice to give string literal types a name as below:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reasonml"}),"type utf = [\n  | `utf8\n  | `utf19\n];\ntype ascii = [\n  | `ascii\n]\n\n")),(0,r.kt)("p",null,"You can also embed string literal types directly inside other types without declaring it first:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reasonml"}),"type t = {\n  encodings : list([ | `utf8 | `ascii ])\n}\n")),(0,r.kt)("p",null,"The cool thing is that you can create union types by simply putting the types together:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reasonml"}),"type encoding = [\n  | utf\n  | ascii\n]\n")),(0,r.kt)("p",null,"The compiler even supports sugar over named string literal types:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reasonml"}),'let classify = (enc) =>\n  switch (enc) {\n  | #utf => "utf" // string literals belong to utf type\n  | #ascii => "ascii" // string literals belog to ascii type\n  };\n')),(0,r.kt)("p",null,"The compiler would generate well optimized code as below:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'function classify(enc) {\n  if (enc === "ascii") {\n    return "ascii";\n  } else {\n    return "utf";\n  }\n}\n')),(0,r.kt)("h2",{id:"string-literal-types-in-bindings"},"String literal types in bindings"),(0,r.kt)("p",null,"Since string literal types are just strings after type checking, you can use them to\nbind to js libraries directly without any conversion, as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reasonml"}),'type encoding = [\n  | `hex\n  | `utf8\n  | `ascii\n  | `latin1\n  | `ucs2\n  | `base64\n  | `binary\n  | `utf16le\n];\n\n[@bs.val] [@bs.module "fs"]\nexternal readFileSync: (string, encoding) => string = "readFileSync";\n')),(0,r.kt)("h2",{id:"string-literal-types-attached-to-data"},"String literal types attached to data"),(0,r.kt)("p",null,"Since Reason is a typed language, you can not mix data of different types in a collection."),(0,r.kt)("p",null,"For example, you will get a type error when writing code like this: ",(0,r.kt)("inlineCode",{parentName:"p"},'[ 3, "3" ]'),"."),(0,r.kt)("p",null,"The deep reason is that if the compiler allows you to do such things after you box different types of data in a single collection, it is hard to give such collection a type and process it later."),(0,r.kt)("p",null,"With string literal types, you can do things like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reasonml"}),'[ 3 -> `Int , "3" -> `String ]\n')),(0,r.kt)("p",null,"Note the generated code for ",(0,r.kt)("inlineCode",{parentName:"p"},'3 -> `Int`, "3"-> `String')," would be:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'{ NAME: "Int", VAL : 3}\n{ NAME: "String", VAL : "3"}\n')),(0,r.kt)("p",null,"And you can also write code to process such collections:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reasonml"}),"let handle = (xs) =>\n  Belt.List.map(\n    xs,\n    (param) => switch(param){\n    | `Int(n) => n\n    | `String(s) => String.length(s)\n    },\n  );\n")),(0,r.kt)("p",null,"The generated code would be:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'function handle(xs) {\n  return Belt_List.map(xs, function (param) {\n    if (param.NAME === "Int") {\n      return param.VAL;\n    } else {\n      return param.VAL.length;\n    }\n  });\n}\n')),(0,r.kt)("p",null,"To conclude, string literal types give users a convenient way to mix data with different types and process it via pattern matching later."),(0,r.kt)("h2",{id:"declaring-types-for-string-literal-types-attached-to-data"},"Declaring types for string literal types attached to data"),(0,r.kt)("p",null,"Type inference is great during development. Users can also write down the formal types for string literal types attached to data:"),(0,r.kt)("pre",null,(0,r.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-reasonml"}),"type number_or_string = [\n  | `Int(int)\n  | `String(string)\n];\n")),(0,r.kt)("h2",{id:"further-reading"},"Further reading"),(0,r.kt)("p",null,"Here we only cover most daily usage of string literal types.\nFor more advanced usage, see ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://caml.inria.fr/pub/docs/manual-ocaml/lablexamples.html#s%3Apolymorphic-variants"}),"here"),".\nThe type theory is almost the same, however, we adapt it to make sure it is compiled into string literals to match the JS runtime."))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2020-07-28",previewImg:null,title:"Introducing string literal types in BuckleScript version 8.2",description:"Highlights of our newest changes to the internal representation\nand how they will benefit our users.\n",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2020-07-28-string-literal-types-in-reason.mdx"}},12058:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var a=n(22122),i=n(17375),o=n(67294),r=n(3905),s=(o.createElement,{});function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"new-release"},"New Release"),(0,r.kt)("p",null,"We are happy to announce BuckleScript 8.2, which comes with a great feature: string literal types."),(0,r.kt)("p",null,"This is an exciting feature so we wrote a ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://reasonml.org/blog/string-literal-types-in-reason"}),"dedicated blog post")," about it."),(0,r.kt)("p",null,"Besides the exciting string literal types, this release continues to deliver better compilation performance. Some internal data structures underlying the compiler were tweaked. This led to an overall compiler memory usage reduction of about 40%."),(0,r.kt)("p",null,"Thanks to the integration of Flow parser, we are able to make the JS interop ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/issues/4463"}),"more safe and expressive")),(0,r.kt)("p",null,"The full changes are listed ",(0,r.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/BuckleScript/bucklescript/blob/master/Changes.md"}),"here")),(0,r.kt)("p",null,"Enjoy!"))}l.isMDXComponent=!0,l.frontmatter={author:"hongbo",date:"2020-08-03",badge:"release",title:"BuckleScript 8.2 released",description:"New release 8.2",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/_blogposts/archive/2020-08-03-bucklescript-release-8-2.mdx"}},14163:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/[slug]",function(){return n(7780)}])}},function(e){e.O(0,[49774,36146,43481,53706,25396,21504,8792,13692,49225],(function(){return t=14163,e(e.s=t);var t}));var t=e.O();_N_E=t}]);