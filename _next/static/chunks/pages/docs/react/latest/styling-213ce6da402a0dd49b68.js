(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[71414],{22122:function(e,t,n){"use strict";function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}n.d(t,{Z:function(){return a}})},17375:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}n.d(t,{Z:function(){return a}})},3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"===typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,y=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(y,i(i({ref:t},p),{},{components:n})):a.createElement(y,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"===typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"===typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},96086:function(e){"use strict";var t=Object.assign.bind(Object);e.exports=t,e.exports.default=e.exports},11155:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return s}});var a=n(22122),r=n(17375),o=n(67294),i=n(3905),l=(o.createElement,{});function s(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"styling"},"Styling"),(0,i.kt)("p",null,"React comes with builtin support for inline styles, but there are also a number of third party libraries for styling React components. You might be comfortable with a specific setup, like:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Global CSS / CSS modules"),(0,i.kt)("li",{parentName:"ul"},"CSS utility libraries (",(0,i.kt)("inlineCode",{parentName:"li"},"tailwindcss"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"tachyons"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"bootstrap")," etc.)"),(0,i.kt)("li",{parentName:"ul"},"CSS-in-JS (",(0,i.kt)("inlineCode",{parentName:"li"},"styled-components"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"emotion"),", etc.)")),(0,i.kt)("p",null,"If they work in JS then they almost certainly work in ReScript. In the next few sections, we've shared some ideas for working with popular libraries. If you're interested in working with one you don't see here, search the ",(0,i.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://rescript-lang.org/packages"}),"package index")," or post in ",(0,i.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://forum.rescript-lang.org"}),"the forum"),"."),(0,i.kt)("h2",{id:"inline-styles"},"Inline Styles"),(0,i.kt)("p",null,"This is the most basic form of styling, coming straight from the 90ies. You can apply a ",(0,i.kt)("inlineCode",{parentName:"p"},"style")," attribute to any DOM element with our ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactDOM.Style.make")," API:"),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res"}),'<div style={ReactDOM.Style.make(~color="#444444", ~fontSize="68px", ())} />\n')),(0,i.kt)("p",null,"It's a ",(0,i.kt)("a",(0,a.Z)({parentName:"p"},{href:"/docs/manual/latest/function#labeled-arguments"}),"labeled")," (therefore typed) function call that maps to the familiar style object ",(0,i.kt)("inlineCode",{parentName:"p"},"{color: '#444444', fontSize: '68px'}"),". For every CSS attribute in the CSS specfication, there is a camelCased label in our ",(0,i.kt)("inlineCode",{parentName:"p"},"make")," function."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note")," that ",(0,i.kt)("inlineCode",{parentName:"p"},"make")," returns an opaque ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactDOM.Style.t")," type that you can't read into. We also expose a ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactDOM.Style.combine")," that takes in two ",(0,i.kt)("inlineCode",{parentName:"p"},"style"),"s and combine them."),(0,i.kt)("h3",{id:"escape-hatch-unsafeaddprop"},"Escape Hatch: ",(0,i.kt)("inlineCode",{parentName:"h3"},"unsafeAddProp")),(0,i.kt)("p",null,"The above ",(0,i.kt)("inlineCode",{parentName:"p"},"Style.make")," API will safely type check every style field! However, we might have missed some more esoteric fields. If that's the case, the type system will tell you that the field you're trying to add doesn't exist. To remediate this, we're exposing a ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactDOM.Style.unsafeAddProp")," to dangerously add a field to a style:"),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res"}),'let style =\n  ReactDOM.Style.make(\n    ~color="red",\n    ~padding="10px",\n    (),\n  )->ReactDOM.Style.unsafeAddProp("-webkit-animation-name", "moveit")\n')),(0,i.kt)("h2",{id:"global-css"},"Global CSS"),(0,i.kt)("p",null,"Use a ",(0,i.kt)("inlineCode",{parentName:"p"},"%%raw")," expression to import CSS files within your ReScript / React component code:"),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-rescript"}),"// in a CommonJS setup\n%%raw(\"require('./styles/main.css')\")\n\n// or with ES6\n%%raw(\"import './styles/main.css'\")\n")),(0,i.kt)("h2",{id:"css-modules"},"CSS Modules"),(0,i.kt)("p",null,(0,i.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/css-modules/css-modules"}),"CSS modules")," can be imported like any other JS module. The imported value is a JS object, with attributes equivalent to each classname defined in the CSS file."),(0,i.kt)("p",null,"As an example, let's say we have a CSS module like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-css"}),"/* styles.module.css */\n\n.root {\n  color: red\n}\n")),(0,i.kt)("p",null,"We now need to create a module binding that imports our styles as a JS object: "),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res"}),'// {..} means we are handling a JS object with an unknown\n// set of attributes\n@module external styles: {..} = "./styles.module.css"\n\n// Use the obj["key"] syntax to access any classname within our object\nlet app = <div className={styles["root"]} />\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"{..}")," is an open ",(0,i.kt)("a",(0,a.Z)({parentName:"p"},{href:"/docs/manual/latest/object#type-declaration"}),"JS object type"),", which means the type checker will not type check correct classname usage. If you want to enforce compiler errors, replace ",(0,i.kt)("inlineCode",{parentName:"p"},"{..}")," with a concrete JS object type, such as ",(0,i.kt)("inlineCode",{parentName:"p"},'{"root": string}'),"."),(0,i.kt)("h2",{id:"css-utility-libraries"},"CSS Utility Libraries"),(0,i.kt)("h3",{id:"tailwind"},"Tailwind"),(0,i.kt)("p",null,"CSS utility libraries like ",(0,i.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://tailwindcss.com"}),"TailwindCSS")," usually require some globally imported CSS."),(0,i.kt)("p",null,"First, create your TailwindCSS main entrypoint file:"),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-css"}),"/* main.css */\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n")),(0,i.kt)("p",null,"Then, import your ",(0,i.kt)("inlineCode",{parentName:"p"},"main.css")," file in your ReScript / React application:"),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res"}),"// src/App.res\n\n%%raw(\"import './main.css'\")\n")),(0,i.kt)("p",null,"Utilize ReScript's pattern matching and string interpolations to combine different classnames:"),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res"}),'@react.component\nlet make = (~active: bool) => {\n  let activeClass = if active {\n    "text-green-600"\n  }\n  else {\n    "text-red-600"\n  }\n\n  <div className={`border-1 border-black ${activeClass}`}>\n    {React.string("Hello World")}\n  </div>\n}\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Hint:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"rescript-lang.org")," actually uses TailwindCSS under the hood! Check out our ",(0,i.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/rescript-association/rescript-lang.org"}),"codebase")," to get some more inspiration on usage patterns.")),(0,i.kt)("h2",{id:"css-in-js"},"CSS-in-JS"),(0,i.kt)("p",null,"There's no way we could recommend a definitive CSS-in-JS workflow, since there are many different approaches on how to bind to CSS-in-JS libraries (going from simple to very advanced)."),(0,i.kt)("p",null,"For demonstration purposes, let's create some simple bindings to e.g. ",(0,i.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://emotion.sh/docs/introduction"}),(0,i.kt)("inlineCode",{parentName:"a"},"emotion"))," (as described ",(0,i.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/bloodyowl/rescript-react-starter-kit/blob/eca7055c59ba578b2d1994fc928d8f541a423e74/src/shared/Emotion.res"}),"here"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res"}),'// src/Emotion.res\n\n@module("@emotion/css") external css: {..} => string = "css"\n@module("@emotion/css") external rawCss: string => string = "css"\n@module("@emotion/css") external keyframes: {..} => string = "css"\n@module("@emotion/css") external cx: array<string> => string = "cx"\n\n@module("@emotion/css") external injectGlobal: string => unit = "injectGlobal"\n')),(0,i.kt)("p",null,"This will give you straight-forward access to ",(0,i.kt)("inlineCode",{parentName:"p"},"emotion"),"'s apis. Here's how you'd use them in your app code:"),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res"}),'let container = Emotion.css({\n  "color": "#fff",\n  "backgroundColor": "red"\n})\n\nlet app = <div className={container} />\n')),(0,i.kt)("p",null,"You can also use submodules to organize your styles more easily:"),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res"}),'module Styles = {\n  open Emotion\n  let container = css({\n    "color": "#fff",\n    "backgroundColor": "red"\n  })\n  // your other declarations\n}\n\nlet app = <div className={Styles.container} />\n')),(0,i.kt)("p",null,"Please note that this approach will not check for invalid css attribute names. If you e.g. want to make sure that only valid CSS attributes are being passed, you could define your ",(0,i.kt)("inlineCode",{parentName:"p"},"css")," function like this as well:"),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res"}),'@module("@emotion/css") external css: React.Style.t => string = "css"\n\n// Usage is slightly different (and probably less ergonomic)\nlet container = ReactDOM.Style.make(~padding="20px", ())->css;\n\nlet app = <div\n  className={container}\n/>\n')),(0,i.kt)("p",null,"Here we used the already existing ",(0,i.kt)("inlineCode",{parentName:"p"},"React.Style.t")," type to enforce valid CSS attribute names.\nLast but not least, you can also bind to functions that let you use raw CSS directly:"),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res"}),"let container = Emotion.rawCss(`\n  color: #fff;\n  background-color: red;\n`)\n\nlet app = <div className={container} />\n")),(0,i.kt)("p",null,"Please keep in mind that there's a spectrum on how type-safe an API can be (while being more / less complex to handle), so choose a solution that fits to your team's needs."))}s.isMDXComponent=!0,s.frontmatter={title:"Styling",description:"Styling in ReScript & React",canonical:"/docs/react/latest/styling",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/react/latest/styling.mdx"}},47404:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/react/latest/styling",function(){return n(11155)}])}},function(e){e.O(0,[49774],(function(){return t=47404,e(e.s=t);var t}));var t=e.O();_N_E=t}]);