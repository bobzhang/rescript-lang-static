(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[80681],{22122:function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,{Z:function(){return r}})},17375:function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}n.d(t,{Z:function(){return r}})},3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"===typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),f=p(n),m=o,d=f["".concat(c,".").concat(m)]||f[m]||u[m]||i;return n?r.createElement(d,a(a({ref:t},s),{},{components:n})):r.createElement(d,a({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"===typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"===typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},96086:function(e){"use strict";var t=Object.assign.bind(Object);e.exports=t,e.exports.default=e.exports},87144:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return c}});var r=n(22122),o=n(17375),i=n(67294),a=n(3905),l=(i.createElement,{});function c(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"automatic-interface-generation"},"Automatic Interface Generation"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: this feature currently does not work for new projects!")),(0,a.kt)("p",null,'"Interface files" (',(0,a.kt)("inlineCode",{parentName:"p"},".resi"),' files) are the "public description" of their corresponding "implementation files" (',(0,a.kt)("inlineCode",{parentName:"p"},".ml"),", ",(0,a.kt)("inlineCode",{parentName:"p"},".re"),"), exposed as documentation, and containing nothing but type declarations. Since a file is a module, an interface file is essentially a ",(0,a.kt)("a",(0,r.Z)({parentName:"p"},{href:"https://reasonml.github.io/docs/en/module.html#signatures"}),"module signature"),"."),(0,a.kt)("h2",{id:"tips--tricks"},"Tips & Tricks"),(0,a.kt)("p",null,"You don't have to explicitly write an interface file; by default, one will be inferred from the implementation file (just like how a module's type can be inferred when you hover over it) and ",(0,a.kt)("strong",{parentName:"p"},"every binding from the file will be exported"),". We do encourage that, after you finish iterating on your project:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Explicitly add interface files to the files meant to be public"),(0,a.kt)("li",{parentName:"ul"},"Add docblock comments on top of each binding to serve as documentation"),(0,a.kt)("li",{parentName:"ul"},"Make some types abstract, and simply don't expose every binding from the interface file")),(0,a.kt)("p",null,"Some types will have to be copy pasted from the implementation file, which gets tedious. This is why we let you ",(0,a.kt)("strong",{parentName:"p"},"automatically generate interface files"),", after which you can tweak whatever you want."),(0,a.kt)("p",null,"For a file ",(0,a.kt)("inlineCode",{parentName:"p"},"src/MyUtils.ml"),", run:"),(0,a.kt)("pre",null,(0,a.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-sh"}),"bsc lib/bs/src/MyUtils-MyProject.cmi\n")),(0,a.kt)("p",null,"Where ",(0,a.kt)("inlineCode",{parentName:"p"},"MyProject")," is your project's namespace. If it's not enabled, it'll be just ",(0,a.kt)("inlineCode",{parentName:"p"},"MyUtils.cmi"),"). ",(0,a.kt)("inlineCode",{parentName:"p"},".cmi")," is the ReScript file that contains some ",(0,a.kt)("a",(0,r.Z)({parentName:"p"},{href:"https://reasonml.github.io/community/faq#compiled-files"}),"compiled type info"),"."),(0,a.kt)("p",null,"The above command outputs a boilerplate ",(0,a.kt)("inlineCode",{parentName:"p"},".mli")," interface to stdout (old ml syntax)."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"If you don't have ",(0,a.kt)("inlineCode",{parentName:"em"},"bsc")," globally available, use the ones provided locally in ",(0,a.kt)("inlineCode",{parentName:"em"},"node_modules/bs-platform/lib/bsc.exe")),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note"),": the generated boilerplate might contain the strings ",(0,a.kt)("inlineCode",{parentName:"p"},'"BS-EXTERNAL"')," or ",(0,a.kt)("inlineCode",{parentName:"p"},'"ReScript External"'),". This happens when you've used ",(0,a.kt)("inlineCode",{parentName:"p"},"@bs")," externals in your implementation file. It's a temporary flaw; you need to manually turn these ",(0,a.kt)("inlineCode",{parentName:"p"},'"BS-EXTERNAL"')," back into the right ",(0,a.kt)("inlineCode",{parentName:"p"},"@bs")," externals for now. We'll correct this in the future."))}c.isMDXComponent=!0,c.frontmatter={__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/reason-compiler/latest/automatic-interface-generation.mdx"}},61762:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/reason-compiler/latest/automatic-interface-generation",function(){return n(87144)}])}},function(e){e.O(0,[49774],(function(){return t=61762,e(e.s=t);var t}));var t=e.O();_N_E=t}]);