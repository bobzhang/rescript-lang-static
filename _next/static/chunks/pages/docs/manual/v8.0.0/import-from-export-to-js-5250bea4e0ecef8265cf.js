(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[80699],{22122:function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,{Z:function(){return r}})},17375:function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}n.d(t,{Z:function(){return r}})},3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return s},kt:function(){return c}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"===typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=u(n),c=a,f=d["".concat(p,".").concat(c)]||d[c]||m[c]||o;return n?r.createElement(f,l(l({ref:t},s),{},{components:n})):r.createElement(f,l({ref:t},s))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"===typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"===typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},96086:function(e){"use strict";var t=Object.assign.bind(Object);e.exports=t,e.exports.default=e.exports},25418:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return s}});var r,a=n(22122),o=n(17375),l=n(67294),i=n(3905),p=(l.createElement,r="CodeTab",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)}),u={};function s(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"import-fromexport-to-js"},"Import from/Export to JS"),(0,i.kt)("p",null,"You've seen how ReScript's idiomatic ",(0,i.kt)("a",(0,a.Z)({parentName:"p"},{href:"import-export.md"}),"Import & Export")," works. This section describes how we work with importing stuff from JavaScript and exporting stuff for JavaScript consumption."),(0,i.kt)("h2",{id:"import-from-javascript"},"Import From JavaScript"),(0,i.kt)("h3",{id:"import-a-javascript-modules-content"},"Import a JavaScript Module's Content"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"bs.module")," ",(0,i.kt)("a",(0,a.Z)({parentName:"p"},{href:"external.md"}),"external"),":"),(0,i.kt)(p,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re"}),'// Import nodejs\' path.dirname\n[@bs.module "path"] external dirname: string => string = "dirname";\nlet root = dirname("/User/github"); // returns "User"\n')),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-ml"}),'(* Import nodejs\' path.dirname *)\nexternal dirname: string -> string = "dirname" [@@bs.module "path"]\nlet root = dirname "/User/github" (* returns "User" *)\n')),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'var Path = require("path");\nvar root = Path.dirname("/User/github");\n'))),(0,i.kt)("p",null,"Here's what the ",(0,i.kt)("inlineCode",{parentName:"p"},"external")," does:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'[@bs.module "path"]'),": pass the name of the JS module as a string; in this case, ",(0,i.kt)("inlineCode",{parentName:"li"},'"path"'),". The string can be anything: ",(0,i.kt)("inlineCode",{parentName:"li"},'"./src/myJsFile"'),", ",(0,i.kt)("inlineCode",{parentName:"li"},'"@myNpmNamespace/myLib"'),", etc."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"external"),": the general keyword for declaring a value that exists on the JS side."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dirname"),": the binding name you'll use on the ReScript side."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string => string"),": the type signature of ",(0,i.kt)("inlineCode",{parentName:"li"},"dirname"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'= "dirname"'),": the name of the variable inside the ",(0,i.kt)("inlineCode",{parentName:"li"},"path")," JS module. There's repetition in writing the first and second ",(0,i.kt)("inlineCode",{parentName:"li"},"dirname"),", because sometime the binding name you want to use on the ReScript side is different than the variable name the JS module exported.")),(0,i.kt)("h3",{id:"import-a-javascript-module-itself-commonjs"},"Import a JavaScript Module Itself (CommonJS)"),(0,i.kt)("p",null,"By omitting the string argument to ",(0,i.kt)("inlineCode",{parentName:"p"},"bs.module"),", you bind to the whole JS module:"),(0,i.kt)(p,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re"}),'[@bs.module] external leftPad: string => int => string = "./leftPad";\nlet paddedResult = leftPad("hi", 5);\n')),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-ml"}),'external leftPad: string -> int -> string = "./leftPad" [@@bs.module]\nlet paddedResult = leftPad "hi" 5\n')),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'var LeftPad = require("./leftPad");\nvar paddedResult = LeftPad("hi", 5);\n'))),(0,i.kt)("h3",{id:"import-a-javascript-module-itself-es6-module-format"},"Import a JavaScript Module Itself (ES6 Module Format)"),(0,i.kt)("p",null,"If your JS project is using ES6, you're likely using Babel to compile it to regular JavaScript. Babel's ES6 default export actually exports the default value under the name ",(0,i.kt)("inlineCode",{parentName:"p"},"default"),". You'd bind to it like this:"),(0,i.kt)(p,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re"}),'[@bs.module "./student"] external studentName: string = "default";\nJs.log(studentName);\n')),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-ml"}),'external studentName: string = "default" [@@bs.module "./student"]\nlet () = Js.log studentName\n')),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'var Student = require("./student");\nconsole.log(Student.default);\n'))),(0,i.kt)("h2",{id:"export-to-javascript"},"Export To JavaScript"),(0,i.kt)("p",null,"As mentioned in ReScript's idiomatic ",(0,i.kt)("a",(0,a.Z)({parentName:"p"},{href:"import-export.md"}),"Import & Export"),", every let binding and module is exported by default to other ReScript modules. If you open up the compiled JS file, you'll see that these values can also directly be used by another ",(0,i.kt)("em",{parentName:"p"},"JavaScript")," file too."),(0,i.kt)("p",null,"We support 2 JS export formats:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"CommonJS (usable from JS as ",(0,i.kt)("inlineCode",{parentName:"li"},"require('myFile')"),")."),(0,i.kt)("li",{parentName:"ul"},"ES6 modules (usable from JS as ",(0,i.kt)("inlineCode",{parentName:"li"},"import * from 'myFile'"),").")),(0,i.kt)("p",null,"The output format is ",(0,i.kt)("a",(0,a.Z)({parentName:"p"},{href:"build-configuration.md#package-specs"}),"configurable in bsb"),"."),(0,i.kt)("h3",{id:"export-an-es6-default-value"},"Export an ES6 default value"),(0,i.kt)("p",null,"If your JS project is using ES6 modules, you're likely exporting & importing some default values:"),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'// student.js\nexport default name = "Al";\n')),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"// teacher.js\nimport studentName from 'student.js';\n")),(0,i.kt)("p",null,"Technically, since a ReScript file maps to a module, there's no such thing as \"default\" export, only named ones. However, we've made an exception to support default module when you do the following:"),(0,i.kt)(p,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re"}),'/* FavoriteStudent.re */\nlet default = "Bob";\n')),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re"}),'(* FavoriteStudent.re *)\nlet default = "Bob"\n')),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'var $$default = "Bob";\n\nexports.$$default = $$default;\nexports.default = $$default;\nexports.__esModule = true;\n'))),(0,i.kt)("p",null,"You can then require the default as normal JS side:"),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"// teacher2.js\nimport studentName from 'FavoriteStudent.js';\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note"),": the above JS snippet ",(0,i.kt)("em",{parentName:"p"},"only")," works if you're using that ES6 import/export syntax in JS. If you're still using ",(0,i.kt)("inlineCode",{parentName:"p"},"require"),", you'd need to do:"),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"let studentName = require('FavoriteStudent').default;\n")))}s.isMDXComponent=!0,s.frontmatter={title:"Import from / Export to JS",description:"Importing / exporting JS module content in ReScript",canonical:"/docs/manual/latest/import-from-export-to-js",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v8.0.0/import-from-export-to-js.mdx"}},26626:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v8.0.0/import-from-export-to-js",function(){return n(25418)}])}},function(e){e.O(0,[49774],(function(){return t=26626,e(e.s=t);var t}));var t=e.O();_N_E=t}]);