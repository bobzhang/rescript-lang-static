(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[65268],{22122:function(e,n,t){"use strict";function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}t.d(n,{Z:function(){return r}})},17375:function(e,n,t){"use strict";function r(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}t.d(n,{Z:function(){return r}})},3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"===typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(t),d=a,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return t?r.createElement(h,s(s({ref:n},p),{},{components:t})):r.createElement(h,s({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"===typeof e||a){var o=t.length,s=new Array(o);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"===typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},96086:function(e){"use strict";var n=Object.assign.bind(Object);e.exports=n,e.exports.default=e.exports},57231:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return p}});var r,a=t(22122),o=t(17375),s=t(67294),i=t(3905),l=(s.createElement,r="CodeTab",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)}),c={};function p(e){var n=e.components,t=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"exception"},"Exception"),(0,i.kt)("p",null,"Exceptions are just a special kind of variant, thrown in ",(0,i.kt)("strong",{parentName:"p"},"exceptional")," cases (don't abuse them!)."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)(l,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re"}),"let getItem = (items) =>\n  if (callSomeFunctionThatThrows()) {\n    // return the found item here\n    1;\n  } else {\n    raise(Not_found);\n  };\n\nlet result =\n  try (getItem([|1, 2, 3|])) {\n  | Not_found => 0 /* Default value if getItem throws */\n  };\n")),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-ml"}),"let getItem items =\n  if callSomeFunctionThatThrows () then\n    (* return the found item here *)\n    1\n  else\n    raise Not_found\n\nlet result =\n  try getItem [|1; 2; 3|] with\n  | Not_found -> 0 (* Default value if getItem throws *)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'function getItem(items) {\n  if (callSomeFunctionThatThrows()) {\n    return 1;\n  }\n  throw {\n    RE_EXN_ID: "Not_found",\n    Error: new Error()\n  };\n}\n\nvar result;\n\ntry {\n  result = getItem([1, 2, 3]);\n} catch (raw_exn) {\n  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n  if (exn.RE_EXN_ID === "Not_found") {\n    result = 0;\n  } else {\n    throw exn;\n  }\n}\n'))),(0,i.kt)("p",null,"Note that the above is just for demonstration purposes; in reality, you'd return an ",(0,i.kt)("inlineCode",{parentName:"p"},"option(int)")," directly from ",(0,i.kt)("inlineCode",{parentName:"p"},"getItem")," and avoid the ",(0,i.kt)("inlineCode",{parentName:"p"},"try")," altogether."),(0,i.kt)("p",null,"You can directly match on exceptions ",(0,i.kt)("em",{parentName:"p"},"while")," getting another return value from a function:"),(0,i.kt)(l,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re"}),'switch (List.find(i => i === theItem, myItems)) {\n| item => Js.log(item)\n| exception Not_found => Js.log("No such item found!")\n};\n')),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-ml"}),'let () = match List.find (fun i -> i == theItem) myItems with\n| item -> Js.log item\n| exception Not_found ->\n  Js.log "No such item found!"\n')),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'var exit = 0;\n\nvar item;\n\ntry {\n  item = List.find(function(i) {\n    return i === theItem;\n  }, myItems);\n  exit = 1;\n}\ncatch (raw_exn){\n  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n  if (exn.RE_EXN_ID === "Not_found") {\n    console.log("No such item found!");\n  } else {\n    throw exn;\n  }\n}\n\nif (exit === 1) {\n  console.log(item);\n}\n'))),(0,i.kt)("p",null,"You can also make your own exceptions like you'd make a variant (exceptions need to be capitalized too)."),(0,i.kt)(l,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re"}),'exception InputClosed(string);\n// later on\nraise(InputClosed("The stream has closed!"));\n')),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-ml"}),'exception InputClosed of string\n(* later on *)\nraise(InputClosed "The stream has closed!")\n')),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'var Caml_exceptions = require("./stdlib/caml_exceptions.js");\n\nvar InputClosed = Caml_exceptions.create("MyFile.InputClosed");\n\nthrow {\n  RE_EXN_ID: InputClosed,\n  _1: "The stream has closed!",\n  Error: new Error()\n};\n'))),(0,i.kt)("h2",{id:"catching-js-exceptions"},"Catching JS Exceptions"),(0,i.kt)("p",null,"To distinguish between JavaScript exceptions and ReScript exceptions, ReScript namespaces JS exceptions under the ",(0,i.kt)("inlineCode",{parentName:"p"},"Js.Exn.Error(payload)")," variant. To catch an exception thrown from the JS side:"),(0,i.kt)(l,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re"}),'try (someJSFunctionThatThrows()) {\n| Js.Exn.Error(obj) =>\n  switch (Js.Exn.message(obj)) {\n  | Some(m) => Js.log("Caught a JS exception! Message: " ++ m)\n  | None => ()\n  }\n};\n')),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-ml"}),'let () = try someJSFunctionThatThrows () with\n| Js.Exn.Error obj ->\n  match Js.Exn.message obj with\n  | Some m -> Js.log ("Caught a JS exception! Message: " ^ m)\n  | None -> ()\n')),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'var Js_exn = require("./stdlib/js_exn.js");\nvar Caml_js_exceptions = require("./stdlib/caml_js_exceptions.js");\n\ntry {\n  someJSFunctionThatThrows();\n} catch (raw_obj) {\n  var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);\n  if (obj.RE_EXN_ID === Js_exn.$$Error) {\n    var m = obj._1.message;\n    if (m !== undefined) {\n      console.log("Caught a JS exception! Message: " + m);\n    }\n  } else {\n    throw obj;\n  }\n}\n'))),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"obj")," here is of type ",(0,i.kt)("inlineCode",{parentName:"p"},"Js.Exn.t"),", intentionally opaque to disallow illegal operations. To operate on ",(0,i.kt)("inlineCode",{parentName:"p"},"obj"),", do like the code above by using the standard library's ",(0,i.kt)("a",(0,a.Z)({parentName:"p"},{href:"api/js/exn"}),(0,i.kt)("inlineCode",{parentName:"a"},"Js.Exn"))," module's helpers."),(0,i.kt)("h2",{id:"raise-a-js-exception"},"Raise a JS Exception"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"raise(MyException)")," raises a ReScript exception. To raise a JavaScript exception (whatever your purpose is), use ",(0,i.kt)("inlineCode",{parentName:"p"},"Js.Exn.raiseError"),":"),(0,i.kt)(l,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re"}),'let myTest = () => {\n  Js.Exn.raiseError("Hello!");\n};\n')),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-ml"}),'let myTest () =\n  Js.Exn.raiseError "Hello!"\n')),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'var Js_exn = require("./stdlib/js_exn.js");\n\nfunction myTest() {\n  return Js_exn.raiseError("Hello!");\n}\n'))),(0,i.kt)("p",null,"Then you can catch it from the JS side:"),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'// after importing `myTest`...\ntry {\n  myTest()\n} catch (e) {\n  console.log(e.message) // "Hello!"\n}\n')),(0,i.kt)("h2",{id:"catch-rescript-exceptions-from-js"},"Catch ReScript Exceptions from JS"),(0,i.kt)("p",null,"The previous section is less useful than you think; to let your JS code work with your exception-throwing ReScript code, the latter doesn't actually need to throw a JS exception. ReScript exceptions can be used by JS code!"),(0,i.kt)(l,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re"}),'exception BadArgument({myMessage: string});\n\nlet myTest = () => {\n  raise(BadArgument({myMessage: "Oops!"}));\n};\n')),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-ml"}),'exception BadArgument of {myMessage: string}\n\nlet myTest () =\n  raise(BadArgument {myMessage = "Oops!"})\n')),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'var Caml_exceptions = require("./stdlib/caml_exceptions.js");\n\nvar BadArgument = Caml_exceptions.create("Playground.BadArgument");\n\nfunction myTest() {\n  throw {\n    RE_EXN_ID: BadArgument,\n    myMessage: "Oops!",\n    Error: new Error()\n  };\n}\n'))),(0,i.kt)("p",null,"Then, in your JS:"),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'// after importing `myTest`...\ntry {\n  myTest()\n} catch (e) {\n  console.log(e.myMessage) // "Oops!"\n  console.log(e.Error.stack) // the stack trace\n}\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note: ",(0,i.kt)("inlineCode",{parentName:"p"},"RE_EXN_ID")," is an internal field for bookkeeping purposes. Don't use it on the JS side. Use the other fields.")),(0,i.kt)("p",null,"The above ",(0,i.kt)("inlineCode",{parentName:"p"},"BadArgument")," exception takes an inline record type. We special-case compile the exception as ",(0,i.kt)("inlineCode",{parentName:"p"},"{RE_EXN_ID, myMessage, Error}")," for good ergonomics. If the exception instead took ordinary positional arguments, l like the standard library's ",(0,i.kt)("inlineCode",{parentName:"p"},'Invalid_argument("Oops!")'),", which takes a single argument, the argument is compiled to JS as the field ",(0,i.kt)("inlineCode",{parentName:"p"},"_1")," instead. A second positional argument would compile to ",(0,i.kt)("inlineCode",{parentName:"p"},"_2"),", etc."),(0,i.kt)("h2",{id:"tips--tricks"},"Tips & Tricks"),(0,i.kt)("p",null,"When you have ordinary variants, you often don't ",(0,i.kt)("strong",{parentName:"p"},"need")," exceptions. For example, instead of throwing when ",(0,i.kt)("inlineCode",{parentName:"p"},"item")," can't be found in a collection, try to return an ",(0,i.kt)("inlineCode",{parentName:"p"},"option(item)")," (",(0,i.kt)("inlineCode",{parentName:"p"},"None")," in this case) instead."),(0,i.kt)("h3",{id:"catch-both-rescript-and-js-exceptions-in-the-same-catch-clause"},"Catch Both ReScript and JS Exceptions in the Same ",(0,i.kt)("inlineCode",{parentName:"h3"},"catch")," Clause"),(0,i.kt)(l,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re"}),"try (someOtherJSFunctionThatThrows()) {\n| Not_found => ...  // catch a ReScript exception\n| Invalid_argument(_) => ... // catch a second ReScript exception\n| Js.Exn.Error(obj) => ... // catch the JS exception\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-ml"}),"try someOtherJSFunctionThatThrows() with\n| Not_found -> ... (* catch a ReScript exception *)\n| Invalid_argument _ -> ... (* catch a second ReScript exception *)\n| Js.Exn.Error obj -> ... (* catch the JS exception *)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'var Js_exn = require("./stdlib/js_exn.js");\nvar Caml_js_exceptions = require("./stdlib/caml_js_exceptions.js");\n\ntry {\n  someOtherJSFunctionThatThrows();\n} catch (raw_obj) {\n  var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);\n  if (\n    obj.RE_EXN_ID !== "Not_found" &&\n    obj.RE_EXN_ID !== "Invalid_argument" &&\n    obj.RE_EXN_ID !== Js_exn.$$Error\n  ) {\n    throw obj;\n  }\n}\n'))),(0,i.kt)("p",null,"This technically works, but hopefully you don't ever have to work with such code..."))}p.isMDXComponent=!0,p.frontmatter={title:"Exception",description:"Exceptions and exception handling in ReScript",canonical:"/docs/manual/latest/exception",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v8.0.0/exception.mdx"}},88413:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v8.0.0/exception",function(){return t(57231)}])}},function(e){e.O(0,[49774],(function(){return n=88413,e(e.s=n);var n}));var n=e.O();_N_E=n}]);