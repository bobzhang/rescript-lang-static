(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3601],{22122:function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,{Z:function(){return r}})},17375:function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}n.d(t,{Z:function(){return r}})},3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return g},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"===typeof e?e(t):i(i({},t),e)),n},g=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,d=c["".concat(o,".").concat(m)]||c[m]||u[m]||s;return n?r.createElement(d,i(i({ref:t},g),{},{components:n})):r.createElement(d,i({ref:t},g))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"===typeof e||a){var s=n.length,i=new Array(s);i[0]=c;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"===typeof e?e:a,i[1]=l;for(var p=2;p<s;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},96086:function(e){"use strict";var t=Object.assign.bind(Object);e.exports=t,e.exports.default=e.exports},49720:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return g}});var r,a=n(22122),s=n(17375),i=n(67294),l=n(3905),o=(i.createElement,r="Intro",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",e)}),p={};function g(e){var t=e.components,n=(0,s.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"re"},"Re"),(0,l.kt)(o,{mdxType:"Intro"},(0,l.kt)("p",null,"Provide bindings to JS regular expressions (RegExp).")),(0,l.kt)("h2",{id:"t"},"t"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"type t\n")),(0,l.kt)("p",null,"The RegExp object."),(0,l.kt)("h2",{id:"result"},"result"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"type result\n")),(0,l.kt)("p",null,"The result of a executing a RegExp on a string."),(0,l.kt)("h2",{id:"captures"},"captures"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let captures: result => array(Js.nullable(string));\n")),(0,l.kt)("p",null,"An ",(0,l.kt)("inlineCode",{parentName:"p"},"array")," of the match and captures, the first is the full match and the remaining are the substring captures."),(0,l.kt)("h2",{id:"matches"},"matches"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let matches: result => array(string);\n")),(0,l.kt)("p",null,"Deprecated. Use captures instead.\nAn ",(0,l.kt)("inlineCode",{parentName:"p"},"array")," of the matches, the first is the full match and the remaining are the substring matches."),(0,l.kt)("h2",{id:"index"},"index"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let index: result => int;\n")),(0,l.kt)("p",null,"0-based index of the match in the input string."),(0,l.kt)("h2",{id:"input"},"input"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let input: result => string;\n")),(0,l.kt)("p",null,"The original input string."),(0,l.kt)("h2",{id:"fromstring"},"fromString"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let fromString: string => t;\n")),(0,l.kt)("p",null,"Constructs a RegExp object (Js.Re.t) from a ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),".\nRegex literals (",'[%re "/.../"]',") should generally be preferred, but fromString is very useful when you need to insert a string into a regex."),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),'/* A function that extracts the content of the first element with the given tag */\n\nlet contentOf = (tag, xmlString) =>\n  Js.Re.fromString("<" ++ tag ++ ">(.*?)<\\\\/" ++ tag ++ ">")\n  -> Js.Re.exec_(xmlString)\n  -> (\n    fun\n    | Some(result) => Js.Nullable.toOption(Js.Re.captures(result)[1])\n    | None => None\n  );\n')),(0,l.kt)("h2",{id:"fromstringwithflags"},"fromStringWithFlags"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let fromStringWithFlags: (string, ~flags: string) => t;\n")),(0,l.kt)("p",null,"Constructs a RegExp object (",(0,l.kt)("inlineCode",{parentName:"p"},"Js.Re.t"),") from a string with the given flags.\nSee ",(0,l.kt)("inlineCode",{parentName:"p"},"Js.Re.fromString"),"."),(0,l.kt)("p",null,"Valid flags:"),(0,l.kt)("p",null,"g global\ni ignore case\nm multiline\nu unicode (es2015)\ny sticky (es2015)"),(0,l.kt)("h2",{id:"flags"},"flags"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let flags: t => string;\n")),(0,l.kt)("p",null,"Returns the enabled flags as a string."),(0,l.kt)("h2",{id:"global"},"global"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let global: t => bool;\n")),(0,l.kt)("p",null,"Returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"bool")," indicating whether the global flag is set."),(0,l.kt)("h2",{id:"ignorecase"},"ignoreCase"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let ignoreCase: t => bool;\n")),(0,l.kt)("p",null,"Returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"bool")," indicating whether the ignoreCase flag is set."),(0,l.kt)("h2",{id:"lastindex"},"lastIndex"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let lastIndex: t => int;\n")),(0,l.kt)("p",null,'Returns the index where the next match will start its search.\nThis property will be modified when the RegExp object is used, if the global ("g") flag is set.'),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),'let re = [%re "/ab*/g"];\nlet str = "abbcdefabh";\n\nlet break = ref(false);\nwhile (! break^) {\n  switch (Js.Re.exec_(re, str)) {\n  | Some(result) =>\n    Js.Nullable.iter(\n      Js.Re.captures(result)[0],\n      [@bs] match => {\n        let next = Belt.Int.toString(Js.Re.lastIndex(re));\n        Js.log("Found " ++ match ++ ". Next match starts at " ++ next);\n      },\n    )\n  | None => break := true\n  };\n};\n')),(0,l.kt)("h2",{id:"setlastindex"},"setLastIndex"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let setLastIndex: (t, int) => unit;\n")),(0,l.kt)("p",null,"Sets the index at which the next match will start its search from."),(0,l.kt)("h2",{id:"multiline"},"multiline"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let multiline: t => bool;\n")),(0,l.kt)("p",null,"Returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"bool")," indicating whether the multiline flag is set."),(0,l.kt)("h2",{id:"source"},"source"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let source: t => string;\n")),(0,l.kt)("p",null,"Returns the pattern as a ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,l.kt)("h2",{id:"sticky"},"sticky"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let sticky: t => bool;\n")),(0,l.kt)("p",null,"Returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"bool")," indicating whether the sticky flag is set."),(0,l.kt)("h2",{id:"unicode"},"unicode"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let unicode: t => bool;\n")),(0,l.kt)("p",null,"Returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"bool")," indicating whether the unicode flag is set."),(0,l.kt)("h2",{id:"exec_"},"exec","_"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let exec_: (t, string) => option(result);\n")),(0,l.kt)("p",null,"Executes a search on a given string using the given RegExp object.\nReturns ",(0,l.kt)("inlineCode",{parentName:"p"},"Some(Js.Re.result)")," if a match is found, ",(0,l.kt)("inlineCode",{parentName:"p"},"None")," otherwise."),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),'/* Match "quick brown" followed by "jumps", ignoring characters in between\n * Remember "brown" and "jumps"\n * Ignore case\n */\n\nlet re = [%re "/quick\\s(brown).+?(jumps)/ig"];\nlet result = (Js.Re.exec_(re, "The Quick Brown Fox Jumps Over The Lazy Dog"));\n')),(0,l.kt)("h2",{id:"exec"},"exec"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let exec: (string, t) => option(result);\n")),(0,l.kt)("p",null,"Deprecated. please use ",(0,l.kt)("inlineCode",{parentName:"p"},"Js.Re.exec_")," instead."),(0,l.kt)("h2",{id:"test_"},"test","_"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let test_: (t, string) => bool;\n")),(0,l.kt)("p",null,"Tests whether the given RegExp object will match a given ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),".\nReturns true if a match is found, false otherwise."),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),'/* A simple implementation of Js.String.startsWith */\n\nlet str = "hello world!";\n\nlet startsWith = (target, substring) =>\n  Js.Re.fromString("^" ++ substring)->(Js.Re.test_(target));\n\nJs.log(str->(startsWith("hello"))); /* prints "true" */\n')),(0,l.kt)("h2",{id:"test"},"test"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let test: (string, t) => bool;\n")),(0,l.kt)("p",null,"Deprecated. please use ",(0,l.kt)("inlineCode",{parentName:"p"},"Js.Re.test_")," instead."))}g.isMDXComponent=!0,g.frontmatter={__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v8.0.0/api/js/re.mdx"}},24185:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v8.0.0/api/js/re",function(){return n(49720)}])}},function(e){e.O(0,[49774],(function(){return t=24185,e(e.s=t);var t}));var t=e.O();_N_E=t}]);