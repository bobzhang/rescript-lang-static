(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[25322],{22122:function(e,n,t){"use strict";function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}t.d(n,{Z:function(){return a}})},17375:function(e,n,t){"use strict";function a(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}t.d(n,{Z:function(){return a}})},3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return g}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"===typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(t),g=r,u=m["".concat(l,".").concat(g)]||m[g]||d[g]||i;return t?a.createElement(u,s(s({ref:n},c),{},{components:t})):a.createElement(u,s({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"===typeof e||r){var i=t.length,s=new Array(i);s[0]=m;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"===typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},96086:function(e){"use strict";var n=Object.assign.bind(Object);e.exports=n,e.exports.default=e.exports},59089:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return c}});var a,r=t(22122),i=t(17375),s=t(67294),o=t(3905),l=(s.createElement,a="Intro",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)}),p={};function c(e){var n=e.components,t=(0,i.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"json"},"Json"),(0,o.kt)(l,{mdxType:"Intro"},(0,o.kt)("p",null,"Provide utilities for JSON.")),(0,o.kt)("h2",{id:"t"},"t"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"type t;\n")),(0,o.kt)("p",null,"The JSON data structure."),(0,o.kt)("h2",{id:"kind"},"kind"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"type kind('a) =\n  | String: kind(Js_string.t)\n  | Number: kind(float)\n  | Object: kind(Js_dict.t(t))\n  | Array: kind(array(t))\n  | Boolean: kind(bool)\n  | Null: kind(Js_types.null_val);\n")),(0,o.kt)("p",null,"Underlying type of a JSON value."),(0,o.kt)("h2",{id:"tagged_t"},"tagged_t"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"type tagged_t =\n  | JSONFalse\n  | JSONTrue\n  | JSONNull\n  | JSONString(string)\n  | JSONNumber(float)\n  | JSONObject(Js_dict.t(t))\n  | JSONArray(array(t));\n")),(0,o.kt)("h2",{id:"classify"},"classify"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let classify: t => tagged_t;\n")),(0,o.kt)("h2",{id:"test"},"test"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let test: ('a, kind('b)) => bool;\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"test(v, kind)")," returns ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," if ",(0,o.kt)("inlineCode",{parentName:"p"},"v")," is of ",(0,o.kt)("inlineCode",{parentName:"p"},"kind"),"."),(0,o.kt)("h2",{id:"decodestring"},"decodeString"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let decodeString: t => option(Js_string.t);\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"decodeString(json)")," returns ",(0,o.kt)("inlineCode",{parentName:"p"},"Some(s)")," if ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," is a ",(0,o.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," otherwise."),(0,o.kt)("h2",{id:"decodenumber"},"decodeNumber"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let decodeNumber: t => option(float);\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"decodeNumber(json)")," returns ",(0,o.kt)("inlineCode",{parentName:"p"},"Some(n)")," if ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," is a ",(0,o.kt)("inlineCode",{parentName:"p"},"number"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," otherwise."),(0,o.kt)("h2",{id:"decodeobject"},"decodeObject"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let decodeObject: t => option(Js_dict.t(t));\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"decodeObject(json)")," returns ",(0,o.kt)("inlineCode",{parentName:"p"},"Some(o)")," if ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," is an ",(0,o.kt)("inlineCode",{parentName:"p"},"object"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," otherwise."),(0,o.kt)("h2",{id:"decodearray"},"decodeArray"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let decodeArray: t => option(array(t));\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"decodeArray(json)")," returns ",(0,o.kt)("inlineCode",{parentName:"p"},"Some(a)")," if ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," is an ",(0,o.kt)("inlineCode",{parentName:"p"},"array"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," otherwise."),(0,o.kt)("h2",{id:"decodeboolean"},"decodeBoolean"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let decodeBoolean: t => option(bool);\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"decodeBoolean(json)")," returns ",(0,o.kt)("inlineCode",{parentName:"p"},"Some(b)")," if ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," is a ",(0,o.kt)("inlineCode",{parentName:"p"},"boolean"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," otherwise."),(0,o.kt)("h2",{id:"decodenull"},"decodeNull"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let decodeNull: t => option(Js_null.t('a));\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"decodeNull(json)")," returns ",(0,o.kt)("inlineCode",{parentName:"p"},"Some(null)")," if ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," is a ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," otherwise."),(0,o.kt)("h2",{id:"null"},"null"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let null: t;\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"null")," is the singleton null JSON value."),(0,o.kt)("h2",{id:"string"},"string"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let string: string => t;\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"string(s)")," makes a JSON string of the ",(0,o.kt)("inlineCode",{parentName:"p"},"string")," ",(0,o.kt)("inlineCode",{parentName:"p"},"s"),"."),(0,o.kt)("h2",{id:"number"},"number"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let number: float => t;\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"number(n)")," makes a JSON number of the ",(0,o.kt)("inlineCode",{parentName:"p"},"float")," ",(0,o.kt)("inlineCode",{parentName:"p"},"n"),"."),(0,o.kt)("h2",{id:"boolean"},"boolean"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let boolean: bool => t;\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean(b)")," makes a JSON boolean of the ",(0,o.kt)("inlineCode",{parentName:"p"},"bool")," ",(0,o.kt)("inlineCode",{parentName:"p"},"b"),"."),(0,o.kt)("h2",{id:"object_"},"object_"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let object_: Js_dict.t(t) => t;\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"object_(dict)")," makes a JSON object of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Js.Dict.t")," ",(0,o.kt)("inlineCode",{parentName:"p"},"dict"),"."),(0,o.kt)("h2",{id:"array"},"array"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let array: array(t) => t;\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"array_(a)")," makes a JSON array of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Js.Json.t")," array ",(0,o.kt)("inlineCode",{parentName:"p"},"a"),"."),(0,o.kt)("h2",{id:"stringarray"},"stringArray"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let stringArray: array(string) => t;\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"stringArray(a)")," makes a JSON array of the ",(0,o.kt)("inlineCode",{parentName:"p"},"string")," array ",(0,o.kt)("inlineCode",{parentName:"p"},"a"),"."),(0,o.kt)("h2",{id:"numberarray"},"numberArray"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let numberArray: array(float) => t;\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"numberArray(a)")," makes a JSON array of the ",(0,o.kt)("inlineCode",{parentName:"p"},"float")," array ",(0,o.kt)("inlineCode",{parentName:"p"},"a"),"."),(0,o.kt)("h2",{id:"booleanarray"},"booleanArray"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let booleanArray: array(bool) => t;\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"booleanArray(a)")," makes a JSON array of the ",(0,o.kt)("inlineCode",{parentName:"p"},"bool")," array ",(0,o.kt)("inlineCode",{parentName:"p"},"a"),"."),(0,o.kt)("h2",{id:"objectarray"},"objectArray"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let objectArray: array(Js_dict.t(t)) => t;\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"objectArray(a) makes a JSON array of the "),"JsDict.t",(0,o.kt)("inlineCode",{parentName:"p"},"array"),"a`."),(0,o.kt)("h2",{id:"parseexn"},"parseExn"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let parseExn: string => t;\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"parseExn(s)")," parses the ",(0,o.kt)("inlineCode",{parentName:"p"},"string")," ",(0,o.kt)("inlineCode",{parentName:"p"},"s")," into a JSON data structure.\nReturns a JSON data structure.\nRaises ",(0,o.kt)("inlineCode",{parentName:"p"},"SyntaxError")," if the given string is not a valid JSON. Note: ",(0,o.kt)("inlineCode",{parentName:"p"},"SyntaxError")," is a JavaScript exception."),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),'/* parse a simple JSON string */\n\nlet json =\n  try (Js.Json.parseExn({| "foo" |})) {\n  | _ => failwith("Error parsing JSON string")\n  };\n\nswitch (Js.Json.classify(json)) {\n| Js.Json.JSONString(value) => Js.log(value)\n| _ => failwith("Expected a string")\n};\n')),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),'/* parse a complex JSON string */\n\nlet getIds = s => {\n  let json =\n    try (Js.Json.parseExn(s)) {\n    | _ => failwith("Error parsing JSON string")\n    };\n\n  switch (Js.Json.classify(json)) {\n  | Js.Json.JSONObject(value) =>\n    /* In this branch, compiler infer value : Js.Json.t Js.Dict.t */\n    switch (Js.Dict.get(value, "ids")) {\n    | Some(ids) =>\n      switch (Js.Json.classify(ids)) {\n      | Js.Json.JSONArray(ids) =>\n        /* In this branch compiler infer ids : Js.Json.t array */\n        ids\n      | _ => failwith("Expected an array")\n      }\n    | None => failwith("Expected an `ids` property")\n    }\n  | _ => failwith("Expected an object")\n  };\n};\n\n/* prints `1, 2, 3` */\nJs.log(getIds({| { "ids" : [1, 2, 3 ] } |}));\n')),(0,o.kt)("h2",{id:"stringify"},"stringify"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let stringify: t => string;\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"stringify(json)")," formats the JSON data structure as a ",(0,o.kt)("inlineCode",{parentName:"p"},"string"),".\nReturns the string representation of a given JSON data structure."),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),'/* Creates and stringifies a simple JS object */\n\n{\n  let dict = Js.Dict.empty();\n  Js.Dict.set(dict, "name", Js.Json.string("John Doe"));\n  Js.Dict.set(dict, "age", Js.Json.number(30.0));\n  Js.Dict.set(\n    dict,\n    "likes",\n    Js.Json.stringArray([|"bucklescript", "ocaml", "js"|]),\n  );\n\n  Js.log(Js.Json.stringify(Js.Json.object_(dict)));\n};\n')),(0,o.kt)("h2",{id:"stringifywithspace"},"stringifyWithSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let stringifyWithSpace: (t, int) => string;\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"stringify(json)")," formats the JSON data structure as a ",(0,o.kt)("inlineCode",{parentName:"p"},"string"),".\nReturns the string representation of a given JSON data structure with spacing."),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),'/* Creates and stringifies a simple JS object with spacing */\n\n{\n  let dict = Js.Dict.empty();\n  Js.Dict.set(dict, "name", Js.Json.string("John Doe"));\n  Js.Dict.set(dict, "age", Js.Json.number(30.0));\n  Js.Dict.set(\n    dict,\n    "likes",\n    Js.Json.stringArray([|"bucklescript", "ocaml", "js"|]),\n  );\n\n  Js.log(Js.Json.stringifyWithSpace(Js.Json.object_(dict), 2));\n};\n')),(0,o.kt)("h2",{id:"stringifyany"},"stringifyAny"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let stringifyAny: 'a => option(string);\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"stringifyAny(value)")," formats any value into a JSON string."),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),'/* prints `["foo", "bar"]` */\nJs.log(Js.Json.stringifyAny([|"foo", "bar"|]));\n')))}c.isMDXComponent=!0,c.frontmatter={__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v8.0.0/api/js/json.mdx"}},88175:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v8.0.0/api/js/json",function(){return t(59089)}])}},function(e){e.O(0,[49774],(function(){return n=88175,e(e.s=n);var n}));var n=e.O();_N_E=n}]);