(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[13359],{22122:function(e,t,a){"use strict";function n(){return(n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}a.d(t,{Z:function(){return n}})},17375:function(e,t,a){"use strict";function n(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}a.d(t,{Z:function(){return n}})},3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return u},kt:function(){return m}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),c=function(e){var t=n.useContext(o),a=t;return e&&(a="function"===typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(a),m=r,g=d["".concat(o,".").concat(m)]||d[m]||p[m]||i;return a?n.createElement(g,l(l({ref:t},u),{},{components:a})):n.createElement(g,l({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"===typeof e||r){var i=a.length,l=new Array(i);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"===typeof e?e:r,l[1]=s;for(var c=2;c<i;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},96086:function(e){"use strict";var t=Object.assign.bind(Object);e.exports=t,e.exports.default=e.exports},6014:function(e,t,a){"use strict";a.r(t),a.d(t,{default:function(){return u}});var n,r=a(22122),i=a(17375),l=a(67294),s=a(3905),o=(l.createElement,n="Intro",function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",e)}),c={};function u(e){var t=e.components,a=(0,i.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"hashset"},"HashSet"),(0,s.kt)(o,{mdxType:"Intro"},(0,s.kt)("p",null,"A mutable Hash set which allows customized ",(0,s.kt)("inlineCode",{parentName:"p"},"hash")," behavior.\nAll data are parameterized by not its only type but also a unique identity in the time of initialization, so that two HashSets of ints initialized with different hash functions will have different type.")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"type t = int;\n\nmodule I0 = (\n  val Belt.Id.hashableU(\n        ~hash=(. a: t) => a land 65535,\n        ~eq=(. a, b) => a == b,\n      )\n);\n\nlet s0 = Belt.HashSet.make(~id=(module I0), ~hintSize=40);\n\nmodule I1 = (\n  val Belt.Id.hashableU(\n        ~hash=(. a: t) => a land 255,\n        ~eq=(. a, b) => a == b,\n      )\n);\n\nlet s1 = Belt.HashSet.make(~id=(module I1), ~hintSize=40);\n\nBelt.HashSet.add(s1, 0);\nBelt.HashSet.add(s1, 1);\n")),(0,s.kt)("p",null,"The invariant must be held: for two elements who are equal, their hashed value should be the same."),(0,s.kt)("p",null,"Here the compiler would infer ",(0,s.kt)("inlineCode",{parentName:"p"},"s0")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"s1")," having different type so that it would not mix."),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let s0: t(int, I0.identity);\nlet s1: t(int, I1.identity);\n")),(0,s.kt)("p",null,"We can add elements to the collection (see last two lines in the example above). Since this is an mutable data structure, ",(0,s.kt)("inlineCode",{parentName:"p"},"s1")," will contain two pairs."),(0,s.kt)("h2",{id:"t"},"t"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"type t('a, 'id);\n")),(0,s.kt)("h2",{id:"id"},"id"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"type id('a, 'id) = BeltId.hashable('a, 'id);\n")),(0,s.kt)("h2",{id:"make"},"make"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let make: (~hintSize: int, ~id: id('a, 'id)) => t('a, 'id);\n")),(0,s.kt)("h2",{id:"clear"},"clear"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let clear: t('a, 'id) => unit;\n")),(0,s.kt)("h2",{id:"isempty"},"isEmpty"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let isEmpty: t('a, 'b) => bool;\n")),(0,s.kt)("h2",{id:"add"},"add"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let add: (t('a, 'id), 'a) => unit;\n")),(0,s.kt)("h2",{id:"copy"},"copy"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let copy: t('a, 'id) => t('a, 'id);\n")),(0,s.kt)("h2",{id:"has"},"has"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let has: (t('a, 'id), 'a) => bool;\n")),(0,s.kt)("h2",{id:"remove"},"remove"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let remove: (t('a, 'id), 'a) => unit;\n")),(0,s.kt)("h2",{id:"foreachu"},"forEachU"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let forEachU: (t('a, 'id), [@bs] ('a => unit)) => unit;\n")),(0,s.kt)("h2",{id:"foreach"},"forEach"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let forEach: (t('a, 'id), 'a => unit) => unit;\n")),(0,s.kt)("p",null,"Order unspecified."),(0,s.kt)("h2",{id:"reduceu"},"reduceU"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let reduceU: (t('a, 'id), 'c, [@bs] (('c, 'a) => 'c)) => 'c;\n")),(0,s.kt)("h2",{id:"reduce"},"reduce"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let reduce: (t('a, 'id), 'c, ('c, 'a) => 'c) => 'c;\n")),(0,s.kt)("p",null,"Order unspecified."),(0,s.kt)("h2",{id:"size"},"size"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let size: t('a, 'id) => int;\n")),(0,s.kt)("h2",{id:"logstats"},"logStats"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let logStats: t('a, 'b) => unit;\n")),(0,s.kt)("h2",{id:"toarray"},"toArray"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let toArray: t('a, 'id) => array('a);\n")),(0,s.kt)("h2",{id:"fromarray"},"fromArray"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let fromArray: (array('a), ~id: id('a, 'id)) => t('a, 'id);\n")),(0,s.kt)("h2",{id:"mergemany"},"mergeMany"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let mergeMany: (t('a, 'id), array('a)) => unit;\n")),(0,s.kt)("h2",{id:"getbuckethistogram"},"getBucketHistogram"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let getBucketHistogram: t('a, 'b) => array(int);\n")))}u.isMDXComponent=!0,u.frontmatter={__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set.mdx"}},69777:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v8.0.0/api/belt/hash-set",function(){return a(6014)}])}},function(e){e.O(0,[49774],(function(){return t=69777,e(e.s=t);var t}));var t=e.O();_N_E=t}]);