(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[46144],{22122:function(e,t,a){"use strict";function n(){return(n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}a.d(t,{Z:function(){return n}})},17375:function(e,t,a){"use strict";function n(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}a.d(t,{Z:function(){return n}})},3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return u},kt:function(){return m}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),i=function(e){var t=n.useContext(p),a=t;return e&&(a="function"===typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=i(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=i(a),m=r,g=d["".concat(p,".").concat(m)]||d[m]||c[m]||l;return a?n.createElement(g,s(s({ref:t},u),{},{components:a})):n.createElement(g,s({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"===typeof e||r){var l=a.length,s=new Array(l);s[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"===typeof e?e:r,s[1]=o;for(var i=2;i<l;i++)s[i]=a[i];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},96086:function(e){"use strict";var t=Object.assign.bind(Object);e.exports=t,e.exports.default=e.exports},5020:function(e,t,a){"use strict";a.r(t),a.d(t,{default:function(){return u}});var n,r=a(22122),l=a(17375),s=a(67294),o=a(3905),p=(s.createElement,n="CodeTab",function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)}),i={};function u(e){var t=e.components,a=(0,l.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},i,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"pipe"},"Pipe"),(0,o.kt)("p",null,"ReScript provides a tiny but surprisingly useful operator ",(0,o.kt)("inlineCode",{parentName:"p"},"->"),', called the "pipe", that allows you to "flip" your code inside-out. ',(0,o.kt)("inlineCode",{parentName:"p"},"a(b)")," becomes ",(0,o.kt)("inlineCode",{parentName:"p"},"b->a"),". It's a simple piece of syntax that doesn't have any runtime cost."),(0,o.kt)("p",null,"Why would you use it? Imagine you have the following:"),(0,o.kt)(p,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),"validateAge(getAge(parseData(person)));\n")),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),"validateAge (getAge (parseData person))\n")),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"validateAge(getAge(parseData(person)));\n"))),(0,o.kt)("p",null,"This is slightly hard to read, since you need to read the code from the innermost part, to the outer parts. Use pipe to streamline it:"),(0,o.kt)(p,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),"person\n  ->parseData\n  ->getAge\n  ->validateAge;\n")),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),"person\n  |. parseData\n  |. getAge\n  |. validateAge\n")),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"validateAge(getAge(parseData(person)));\n"))),(0,o.kt)("p",null,"Basically, ",(0,o.kt)("inlineCode",{parentName:"p"},"parseData(person)")," is transformed into ",(0,o.kt)("inlineCode",{parentName:"p"},"person->parseData"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"getAge(person->parseData)")," is transformed into ",(0,o.kt)("inlineCode",{parentName:"p"},"person->parseData->getAge"),", etc."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"This works when the function takes more than one argument too"),"."),(0,o.kt)(p,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),"a(one, two, three);\n")),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),"a one two three\n")),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"a(one, two, three);\n"))),(0,o.kt)("p",null,"is the same as"),(0,o.kt)(p,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),"one->a(two, three);\n")),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),"one |. a two three\n")),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"a(one, two, three);\n"))),(0,o.kt)("p",null,"This also works with labeled arguments."),(0,o.kt)("p",null,"Pipes are used to emulate object-oriented programming, e.g. what's ",(0,o.kt)("inlineCode",{parentName:"p"},"myStudent.getName")," in other languages like Java would be ",(0,o.kt)("inlineCode",{parentName:"p"},"myStudent->getName")," in ReScript (aka ",(0,o.kt)("inlineCode",{parentName:"p"},"getName(myStudent)"),"). This allows us to have the readability of the good parts of OOP without its downside of dragging in a huge class system just to call a function on a piece of data."),(0,o.kt)("h2",{id:"tips--tricks"},"Tips & Tricks"),(0,o.kt)("p",null,"Do ",(0,o.kt)("strong",{parentName:"p"},"not")," to abuse pipes; they're a means to an end. Inexperienced engineers sometimes shape a library's API to take advantage of the pipe. This is backward."),(0,o.kt)("h2",{id:"js-method-chaining"},"JS Method Chaining"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"This section requires understanding of ",(0,o.kt)("a",(0,r.Z)({parentName:"em"},{href:"bind-to-js-function.md#object-method"}),"our binding API")),"."),(0,o.kt)("p",null,"JavaScript's APIs are often attached to objects, and often chainable, like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"const result = [|1, 2, 3|].map(a => a + 1).filter(a => a % 2 === 0);\n\nasyncRequest()\n  .setWaitDuration(4000)\n  .send();\n")),(0,o.kt)("p",null,"Assuming we don't need the chaining behavior above, we'd bind to each case this using ",(0,o.kt)("inlineCode",{parentName:"p"},"bs.send")," from the previous section:"),(0,o.kt)(p,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),'[@bs.send] external map: (array(\'a), \'a => \'b) => array(\'b) = "map";\n[@bs.send] external filter: (array(\'a), \'a => bool) => array(\'a) = "filter";\n\ntype request;\n[@bs.val] external asyncRequest: unit => request = "asyncRequest";\n[@bs.send] external setWaitDuration: (request, int) => request = "setWaitDuration";\n[@bs.send] external send: request => unit = "send";\n')),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),'external map: \'a array -> (\'a -> \'b) -> \'b array = "map" [@@bs.send]\nexternal filter: \'a array -> (\'a -> bool) -> \'a array = "filter" [@@bs.send]\n\ntype request\nexternal asyncRequest: unit -> request = "asyncRequest" [@@bs.val]\nexternal setWaitDuration: request -> int -> request = "setWaitDuration" [@@bs.send]\nexternal send: request -> unit = "send" [@@bs.send]\n')),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"// Empty output\n"))),(0,o.kt)("p",null,"You'd use them like this:"),(0,o.kt)(p,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),"let result = Js.Array2.filter(\n  Js.Array2.map([|1, 2, 3|], a => a + 1),\n  a => a mod 2 == 0\n);\n\nsend(setWaitDuration(asyncRequest(), 4000));\n")),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),"let result = Js.Array2.filter\n  (Js.Array2.map [|1; 2; 3|] (fun a -> a + 1))\n  (fun a -> (a mod 2) = 0)\n\nlet () = send (setWaitDuration (asyncRequest ()) 4000)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"var result = [1, 2, 3].map(function(a) {\n  return a + 1 | 0;\n}).filter(function(a) {\n  return a % 2 === 0;\n});\n\nasyncRequest().setWaitDuration(4000).send();\n"))),(0,o.kt)("p",null,"This looks much worse than the JS counterpart! Clean it up visually with pipe:"),(0,o.kt)(p,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),"let result = [|1, 2, 3|]\n  ->map(a => a + 1)\n  ->filter(a => a mod 2 == 0)\n\nasyncRequest()->setWaitDuration(4000)->send\n")),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),"let result = [|1; 2; 3|]\n  |. map(fun a -> a + 1)\n  |. filter(fun a -> a mod 2 = 0)\n\nasyncRequest()->setWaitDuration(4000)->send\n")),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"var result = [1, 2, 3].map(function(a) {\n  return a + 1 | 0;\n}).filter(function(a) {\n  return a % 2 === 0;\n});\n\nasyncRequest().setWaitDuration(4000).send();\n"))),(0,o.kt)("h2",{id:"pipe-into-variants"},"Pipe Into Variants"),(0,o.kt)("p",null,"You can pipe into a variant's constructor as if it was a function:"),(0,o.kt)(p,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),"let result = name->preprocess->Some;\n")),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),"let result = name |. preprocess |. Some\n")),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"var result = preprocess(name);\n"))),(0,o.kt)("p",null,"We turn this into:"),(0,o.kt)(p,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),"let result = Some(preprocess(name));\n")),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),"let result = Some (preprocess name)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"var result = preprocess(name);\n"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note")," that using a variant constructor as a function wouldn't work anywhere else beside here."),(0,o.kt)("h2",{id:"pipe-placeholders"},"Pipe Placeholders"),(0,o.kt)("p",null,"A placeholder is written as an underscore and it tells ReScript that you want to fill in an argument of a function later. These two have equivalent meaning:"),(0,o.kt)(p,{labels:["Reason (Old Syntax)","ML (Older Syntax)"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),"let addTo7 = (x) => add3(3, x, 4);\nlet addTo7 = add3(3, _, 4);\n")),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),"(* doesn't exist in old ML syntax *)\n"))),(0,o.kt)("p",null,"Sometimes you don't want to pipe the value you have into the first position. In these cases you can mark a placeholder value to show which argument you would like to pipe into."),(0,o.kt)("p",null,"Let's say you have a function ",(0,o.kt)("inlineCode",{parentName:"p"},"namePerson"),", which takes a ",(0,o.kt)("inlineCode",{parentName:"p"},"person")," then a ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," argument. If you are transforming a person then pipe will work as-is:"),(0,o.kt)(p,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),'makePerson(~age=47, ())\n  ->namePerson("Jane");\n')),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),'makePerson ~age=47 ()\n  |. namePerson("Jane")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),'namePerson(makePerson(47), "Jane");\n'))),(0,o.kt)("p",null,"If you have a name that you want to apply to a person object, you can use a placeholder:"),(0,o.kt)(p,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),"getName(input)\n  ->namePerson(personDetails, _);\n")),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),"(* doesn't exist in old ML syntax *)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"var __x = getName(input);\nnamePerson(personDetails, __x);\n"))),(0,o.kt)("p",null,"This allows you to pipe into any positional argument. It also works for named arguments:"),(0,o.kt)(p,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),"getName(input)\n  ->namePerson(~person=personDetails, ~name=_);\n")),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),"(* doesn't exist in old ML syntax *)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"var __x = getName(input);\nnamePerson(personDetails, __x);\n"))),(0,o.kt)("h2",{id:"triangle-pipe-deprecated"},"Triangle Pipe (Deprecated)"),(0,o.kt)("p",null,"You might see usages of another pipe, ",(0,o.kt)("inlineCode",{parentName:"p"},"|>"),", in some codebases. These are deprecated."),(0,o.kt)("p",null,"Unlike ",(0,o.kt)("inlineCode",{parentName:"p"},"->")," pipe, the ",(0,o.kt)("inlineCode",{parentName:"p"},"|>")," pipe puts the subject as the last (not first) argument of the function. ",(0,o.kt)("inlineCode",{parentName:"p"},"a |> f(b)")," turns into ",(0,o.kt)("inlineCode",{parentName:"p"},"f(b, a)"),"."),(0,o.kt)("p",null,"For a more thorough discussion on the rationale and differences between the two operators, please refer to the ",(0,o.kt)("a",(0,r.Z)({parentName:"p"},{href:"https://www.javierchavarri.com/data-first-and-data-last-a-comparison/"}),"Data-first and Data-last comparison by Javier Ch\xe1varri")))}u.isMDXComponent=!0,u.frontmatter={title:"Pipe",description:"The Pipe operator (->)",canonical:"/docs/manual/latest/pipe",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v8.0.0/pipe.mdx"}},42492:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v8.0.0/pipe",function(){return a(5020)}])}},function(e){e.O(0,[49774],(function(){return t=42492,e(e.s=t);var t}));var t=e.O();_N_E=t}]);