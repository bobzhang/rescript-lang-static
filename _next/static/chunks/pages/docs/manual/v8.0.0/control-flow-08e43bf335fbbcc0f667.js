(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[28942],{22122:function(e,n,t){"use strict";function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}t.d(n,{Z:function(){return a}})},17375:function(e,n,t){"use strict";function a(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}t.d(n,{Z:function(){return a}})},3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return m}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),p=function(e){var n=a.useContext(i),t=n;return e&&(t="function"===typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,g=d["".concat(i,".").concat(m)]||d[m]||c[m]||l;return t?a.createElement(g,o(o({ref:n},u),{},{components:t})):a.createElement(g,o({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"===typeof e||r){var l=t.length,o=new Array(l);o[0]=d;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"===typeof e?e:r,o[1]=s;for(var p=2;p<l;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},96086:function(e){"use strict";var n=Object.assign.bind(Object);e.exports=n,e.exports.default=e.exports},94238:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return u}});var a,r=t(22122),l=t(17375),o=t(67294),s=t(3905),i=(o.createElement,a="CodeTab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",e)}),p={};function u(e){var n=e.components,t=(0,l.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"if-else--loops"},"If-Else & Loops"),(0,s.kt)("p",null,"ReScript supports ",(0,s.kt)("inlineCode",{parentName:"p"},"if"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"else"),", ternary expression (",(0,s.kt)("inlineCode",{parentName:"p"},"a ? b : c"),"), ",(0,s.kt)("inlineCode",{parentName:"p"},"for")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"while"),"."),(0,s.kt)("p",null,"ReScript also supports our famous pattern matching, which will be covered in ",(0,s.kt)("a",(0,r.Z)({parentName:"p"},{href:"pattern-matching-destructuring.md"}),"its own section")),(0,s.kt)("h2",{id:"if-else--ternary"},"If-Else & Ternary"),(0,s.kt)("p",null,"Unlike its JavaScript counterpart, ReScript's ",(0,s.kt)("inlineCode",{parentName:"p"},"if")," is an expression; they evaluate to their body's content:"),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),'let message = if (isMorning) {\n  "Good morning!"\n} else {\n  "Hello!"\n};\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),'let message =\n  if isMorning then\n    "Good morning!"\n  else\n    "Hello!"\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),'var message = isMorning ? "Good morning!" : "Hello!";\n'))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Note:")," an ",(0,s.kt)("inlineCode",{parentName:"p"},"if-else")," expression without the final ",(0,s.kt)("inlineCode",{parentName:"p"},"else")," branch implicitly gives ",(0,s.kt)("inlineCode",{parentName:"p"},"()")," (aka the ",(0,s.kt)("inlineCode",{parentName:"p"},"unit")," type). So this:"),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),"if (showMenu) {\n  displayMenu();\n};\n")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),"if showMenu then\n  displayMenu ()\n")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"if (showMenu) {\n  displayMenu();\n}\n"))),(0,s.kt)("p",null,"is basically the same as:"),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),"if (showMenu) {\n  displayMenu();\n} else {\n  ();\n};\n")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),"if showMenu then\n  displayMenu ()\nelse\n  ()\n")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"if (showMenu) {\n  displayMenu()\n}\n"))),(0,s.kt)("p",null,"Here's another way to look at it. This is clearly wrong:"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),"let result = if (showMenu) {\n  1 + 2;\n};\n")),(0,s.kt)("p",null,"It'll give a type error, saying basically that the implicit ",(0,s.kt)("inlineCode",{parentName:"p"},"else")," branch has the type ",(0,s.kt)("inlineCode",{parentName:"p"},"unit")," while the ",(0,s.kt)("inlineCode",{parentName:"p"},"if")," branch has type ",(0,s.kt)("inlineCode",{parentName:"p"},"int"),". Intuitively, this makes sense: what would ",(0,s.kt)("inlineCode",{parentName:"p"},"result"),"'s value be, if ",(0,s.kt)("inlineCode",{parentName:"p"},"showMenu")," was ",(0,s.kt)("inlineCode",{parentName:"p"},"false"),"?"),(0,s.kt)("p",null,"We also have ternary sugar, but ",(0,s.kt)("strong",{parentName:"p"},"we encourage you to prefer if-else when possible"),"."),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),'let message = isMorning ? "Good morning!" : "Hello!"\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),"(* Doesn't exist in older ML syntax *)\n")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),'var message = isMorning ? "Good morning!" : "Hello!";\n'))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"if-else")," and ternary are much less used")," in ReScript than in other languages; ",(0,s.kt)("a",(0,r.Z)({parentName:"p"},{href:"pattern-matching-destructuring.md"}),"Pattern-matching")," kills a whole category of code that previously required conditionals."),(0,s.kt)("h2",{id:"for-loops"},"For Loops"),(0,s.kt)("p",null,"For loops iterate from a starting value up to (and including) the ending value."),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),"for (i in startValueInclusive to endValueInclusive) {\n  Js.log(i);\n};\n")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),"for i = startValueInclusive to endValueInclusive do\n  Js.log i\ndone\n")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"for(var i = startValueInclusive; i <= endValueInclusive; ++i){\n  console.log(i);\n}\n"))),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),"// prints: 1 2 3, one per line\nfor (x in 1 to 3) {\n  Js.log(x);\n};\n")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),"(* prints: 1 2 3, one per line *)\nfor x = 1 to 3 do\n  Js.log x;\ndone\n")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"for(var x = 1; x <= 3; ++x){\n  console.log(x);\n}\n"))),(0,s.kt)("p",null,"You can make the ",(0,s.kt)("inlineCode",{parentName:"p"},"for")," loop count in the opposite direction by using ",(0,s.kt)("inlineCode",{parentName:"p"},"downto"),"."),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),"for (i in startValueInclusive downto endValueInclusive) {\n  Js.log(i);\n};\n")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),"for i = startValueInclusive downto endValueInclusive do\n  Js.log i\ndone\n")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"for(var i = startValueInclusive; i >= endValueInclusive; --i){\n  console.log(i);\n}\n"))),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),"// prints: 3 2 1, one per line\nfor (x in 3 downto 1) {\n  Js.log(x);\n};\n")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),"(* prints: 3 2 1, one per line)\nfor x = 3 downto 1 do\n  Js.log x;\ndone\n")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"for(var x = 3; x >= 1; --x){\n  console.log(x);\n}\n"))),(0,s.kt)("h2",{id:"while-loops"},"While Loops"),(0,s.kt)("p",null,"While loops execute its body code block while its condition is true."),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),"while (testCondition) {\n  // body here\n};\n")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),"while testCondition do\n  (* body here *)\ndone\n")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"while (testCondition) {\n  // body here\n}\n"))),(0,s.kt)("h3",{id:"tips--tricks"},"Tips & Tricks"),(0,s.kt)("p",null,"There's no loop-breaking ",(0,s.kt)("inlineCode",{parentName:"p"},"break")," keyword (nor early ",(0,s.kt)("inlineCode",{parentName:"p"},"return")," from functions, for that matter) in ReScript. However, we can break out of a while loop easily through using a ",(0,s.kt)("a",(0,r.Z)({parentName:"p"},{href:"mutation.md"}),"mutable binding"),"."),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),'let break = ref(false);\n\nwhile (!break.contents) {\n  if (Js.Math.random() > 0.3) {\n    break := true;\n  } else {\n    Js.log("Still running");\n  };\n};\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),'let () = break <- ref false\nlet () = while not break.contents do\n  if (Js.Math.random ()) > 0.3 then\n    break := true\n  else\n    Js.log "Still running"\ndone\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),'var $$break = {\n  contents: false\n};\n\nwhile(!$$break.contents) {\n  if (Math.random() > 0.3) {\n    $$break.contents = true;\n  } else {\n    console.log("Still running");\n  }\n};\n'))))}u.isMDXComponent=!0,u.frontmatter={title:"If-Else & Loops",description:"If, else, ternary, for, and while",canonical:"/docs/manual/latest/control-flow",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v8.0.0/control-flow.mdx"}},40701:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v8.0.0/control-flow",function(){return t(94238)}])}},function(e){e.O(0,[49774],(function(){return n=40701,e(e.s=n);var n}));var n=e.O();_N_E=n}]);