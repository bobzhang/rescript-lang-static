(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[37167],{22122:function(e,t,n){"use strict";function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}n.d(t,{Z:function(){return a}})},17375:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}n.d(t,{Z:function(){return a}})},3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"===typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,g=d["".concat(i,".").concat(m)]||d[m]||c[m]||l;return n?a.createElement(g,o(o({ref:t},p),{},{components:n})):a.createElement(g,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"===typeof e||r){var l=n.length,o=new Array(l);o[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"===typeof e?e:r,o[1]=s;for(var u=2;u<l;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},96086:function(e){"use strict";var t=Object.assign.bind(Object);e.exports=t,e.exports.default=e.exports},64543:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return p}});var a,r=n(22122),l=n(17375),o=n(67294),s=n(3905),i=(o.createElement,a="CodeTab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",e)}),u={};function p(e){var t=e.components,n=(0,l.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"let-binding"},"Let Binding"),(0,s.kt)("p",null,'A "let binding", in other languages, might be called a "variable declaration". ',(0,s.kt)("inlineCode",{parentName:"p"},"let")," ",(0,s.kt)("em",{parentName:"p"},"binds")," values to names. They can be seen and referenced by code that comes ",(0,s.kt)("em",{parentName:"p"},"after")," them."),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),'let greeting = "hello!";\nlet score = 10;\nlet newScore = 10 + score;\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),'let greeting = "hello!"\nlet score = 10\nlet newScore = 10 + score\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),'var greeting = "hello!";\nvar score = 10;\nvar newScore = 20;\n'))),(0,s.kt)("h2",{id:"block-scope"},"Block Scope"),(0,s.kt)("p",null,"Bindings can be scoped through ",(0,s.kt)("inlineCode",{parentName:"p"},"{}"),"."),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),'let message = {\n  let part1 = "hello";\n  let part2 = "world";\n  part1 ++ " " ++ part2;\n};\n// `part1` and `part2` not accessible here!\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),'let message =\n  let part1 = "hello" in\n  let part2 = "world" in\n  part1 ++ " " ++ part2\n\n(* `part1` and `part2` not accessible here! *)\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),'var message = "hello world";\n'))),(0,s.kt)("p",null,"The value of the last line of a scope is implicitly returned."),(0,s.kt)("h3",{id:"design-decisions"},"Design Decisions"),(0,s.kt)("p",null,"ReScript's ",(0,s.kt)("inlineCode",{parentName:"p"},"if"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"while")," and functions all use the same block scoping mecanism. The code below works ",(0,s.kt)("strong",{parentName:"p"},"not"),' because of some special "if scope"; but simply because it\'s the same scope syntax and feature you just saw:'),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),'if (displayGreeting) {\n  let message = "Enjoying the docs so far?";\n  Js.log(message);\n}\n// `message` not accessible here!\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),'if displayGreeting then\n  let message = "Enjoying the docs so far?" in\n  Js.log message\n(* `message` not accessible here! *)\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),'if (displayGreeting) {\n  console.log("Enjoying the docs so far?");\n}\n'))),(0,s.kt)("h2",{id:"bindings-are-immutable"},"Bindings Are Immutable"),(0,s.kt)("p",null,'Let bindings are "immutable", aka "cannot change". This helps our type system deduce and optimize much more than other languages (and in turn, help you more).'),(0,s.kt)("h2",{id:"binding-shadowing"},"Binding Shadowing"),(0,s.kt)("p",null,"The above restriction might sound unpractical at first. How would you change a value then? Usually, 2 ways:"),(0,s.kt)("p",null,"The first is to realize that many times, what you want isn't to mutate a variable's value. For example, this JavaScript pattern:"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"var result = 0;\nresult = calculate(result);\nresult = calculateSomeMore(result);\n")),(0,s.kt)("p",null,"...is really just to comment on intermediate steps. You didn't need to mutate ",(0,s.kt)("inlineCode",{parentName:"p"},"result")," at all! You could have just written this JS:"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"var result1 = 0;\nvar result2 = calculate(result1);\nvar result3 = calculateSomeMore(result2);\n")),(0,s.kt)("p",null,"In ReScript, this obviously works too:"),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),"let result1 = 0;\nlet result2 = calculate(result1);\nlet result3 = calculateSomeMore(result2);\n")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),"let result1 = 0\nlet result2 = calculate result1\nlet result3 = calculateSomeMore result2\n")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"var result1 = 0;\nvar result2 = calculate(0);\nvar result3 = calculateSomeMore(result2);\n"))),(0,s.kt)("p",null,"Additionally, reusing the same let binding name overshadows the previous bindings with the same name. So you can write this too:"),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),"let result = 0;\nlet result = calculate(result);\nlet result = calculateSomeMore(result);\n")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),"let result = 0\nlet result = calculate result\nlet result = calculateSomeMore result\n")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"var result = calculate(0);\nvar result$1 = calculateSomeMore(result);\n"))),(0,s.kt)("p",null,"(Though for the sake of clarity, we don't recommend this)."),(0,s.kt)("p",null,"As a matter of fact, even this is valid code:"),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-re"}),'let result = "hello";\nJs.log(result); // prints "hello"\nlet result = 1;\nJs.log(result); // prints 1\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-ml"}),'let result = "hello"\nlet () = Js.log result (* prints "hello" *)\nlet result = 1\nlet () = Js.log result (* prints 1 *)\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),'var result = 1;\nconsole.log("hello");\nconsole.log(1);\n'))),(0,s.kt)("p",null,"The binding you refer to is whatever's the closest upward. No mutation here!\nIf you need ",(0,s.kt)("em",{parentName:"p"},"real")," mutation, e.g. passing a value around, have it modified by many pieces of code, we provide a slightly heavier ",(0,s.kt)("a",(0,r.Z)({parentName:"p"},{href:"mutation.md"}),"mutation feature"),"."),(0,s.kt)("h2",{id:"private-let-bindings"},"Private let bindings"),(0,s.kt)("p",null,"Private let bindings are introduced in the release ",(0,s.kt)("a",(0,r.Z)({parentName:"p"},{href:"https://rescript-lang.org/blog/bucklescript-release-7-2"}),"7.2"),"."),(0,s.kt)("p",null,"In the module system, everything is public by default,\nthe only way to hide some values is by providing a separate signature to\nlist public fields and their types:"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res"}),"module A: {\n  let b: int\n} = {\n  let a = 3\n  let b = 4\n}\n")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"%private")," gives you an option to mark private fields directly"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res"}),"module A = {\n  %%private(let a = 3)\n  let b = 4\n}\n")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"%private")," also applies to file level modules, so in some cases,\nusers do not need to provide a separate interface file just to hide some particular values."),(0,s.kt)("p",null,"Note interface files are still recommended as a general best practice since they give you better\nseparate compilation units and also they're better for documentation. "),(0,s.kt)("p",null,"Still, ",(0,s.kt)("inlineCode",{parentName:"p"},"%private")," is useful in the following scenarios:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Code generators. Some code generators want to hide some values but it is sometimes very hard or time consuming for code generators to synthesize the types for public fields.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Quick prototyping. During prototyping, we still want to hide some values, but the interface file is not stable yet, ",(0,s.kt)("inlineCode",{parentName:"p"},"%private")," provide you such convenience."))))}p.isMDXComponent=!0,p.frontmatter={title:"Let Binding",description:"Let binding syntax for binding to values in ReScript",canonical:"/docs/manual/latest/let-binding",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v8.0.0/let-binding.mdx"}},76880:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v8.0.0/let-binding",function(){return n(64543)}])}},function(e){e.O(0,[49774],(function(){return t=76880,e(e.s=t);var t}));var t=e.O();_N_E=t}]);