(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[56178],{22122:function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,{Z:function(){return r}})},17375:function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}n.d(t,{Z:function(){return r}})},3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"===typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,y=d["".concat(o,".").concat(m)]||d[m]||c[m]||l;return n?r.createElement(y,i(i({ref:t},u),{},{components:n})):r.createElement(y,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"===typeof e||a){var l=n.length,i=new Array(l);i[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"===typeof e?e:a,i[1]=s;for(var p=2;p<l;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},96086:function(e){"use strict";var t=Object.assign.bind(Object);e.exports=t,e.exports.default=e.exports},72691:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return u}});var r,a=n(22122),l=n(17375),i=n(67294),s=n(3905),o=(i.createElement,r="CodeTab",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",e)}),p={};function u(e){var t=e.components,n=(0,l.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"array-and-list"},"Array and List"),(0,s.kt)("h2",{id:"array"},"Array"),(0,s.kt)("p",null,"Arrays are our main ordered data structure. They work the same way as JavaScript arrays: they can be randomly accessed, dynamically resized, updated, etc."),(0,s.kt)(o,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'let myArray = ["hello", "world", "how are you"]\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'var myArray = ["hello", "world", "how are you"];\n'))),(0,s.kt)("p",null,"ReScript arrays' items must have the same type, i.e. homogeneous."),(0,s.kt)("h3",{id:"usage"},"Usage"),(0,s.kt)("p",null,"See the ",(0,s.kt)("a",(0,a.Z)({parentName:"p"},{href:"api/js/array"}),"Js.Array")," API."),(0,s.kt)("p",null,"Access & update an array item like so:"),(0,s.kt)(o,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'let myArray = ["hello", "world", "how are you"]\n\nlet firstItem = myArray[0] // "hello"\n\nmyArray[0] = "hey" // now ["hey", "world", "how are you"]\n\nlet pushedValue = Js.Array2.push(myArray, "bye")\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'var myArray = ["hello", "world", "how are you"];\n\nvar firstItem = myArray[0];\n\nmyArray[0] = "hey";\n\nvar pushedValue = myArray.push("bye");\n'))),(0,s.kt)("h2",{id:"list"},"List"),(0,s.kt)("p",null,"ReScript provides a singly linked list too. Lists are:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"immutable"),(0,s.kt)("li",{parentName:"ul"},"fast at prepending items"),(0,s.kt)("li",{parentName:"ul"},"fast at getting the tail"),(0,s.kt)("li",{parentName:"ul"},"slow at everything else")),(0,s.kt)(o,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"let myList = list{1, 2, 3}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"var myList = {\n  hd: 1,\n  tl: {\n    hd: 2,\n    tl: {\n      hd: 3,\n      tl: 0\n    }\n  }\n};\n"))),(0,s.kt)("p",null,"Like arrays, lists' items need to be of the same type."),(0,s.kt)("h3",{id:"usage-1"},"Usage"),(0,s.kt)("p",null,"You'd use list for its resizability, its fast prepend (adding at the head), and its fast split, all of which are immutable and relatively efficient."),(0,s.kt)("p",null,"Do ",(0,s.kt)("strong",{parentName:"p"},"not")," use list if you need to randomly access an item or insert at non-head position. Your code would end up obtuse and/or slow."),(0,s.kt)("p",null,"The standard lib provides a ",(0,s.kt)("a",(0,a.Z)({parentName:"p"},{href:"api/belt/list"}),"List module"),"."),(0,s.kt)("h4",{id:"immutable-prepend"},"Immutable Prepend"),(0,s.kt)("p",null,"Use the spread syntax:"),(0,s.kt)(o,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"prelude",prelude:!0}),"let myList = list{1, 2, 3}\nlet anotherList = list{0, ...myList}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"var myList = {\n  hd: 1,\n  tl: {\n    hd: 2,\n    tl: {\n      hd: 3,\n      tl: 0\n    }\n  }\n};\n\nvar anotherList = {\n  hd: 0,\n  tl: myList\n};\n"))),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"myList")," didn't mutate. ",(0,s.kt)("inlineCode",{parentName:"p"},"anotherList")," is now ",(0,s.kt)("inlineCode",{parentName:"p"},"list{0, 1, 2, 3}"),". This is efficient (constant time, not linear). ",(0,s.kt)("inlineCode",{parentName:"p"},"anotherList"),"'s last 3 elements are shared with ",(0,s.kt)("inlineCode",{parentName:"p"},"myList"),"!"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Note that ",(0,s.kt)("inlineCode",{parentName:"strong"},"list{a, ...b, ...c}")," is a syntax error"),". We don't support multiple spread for a list. That'd be an accidental linear operation (",(0,s.kt)("inlineCode",{parentName:"p"},"O(b)"),"), since each item of b would be one-by-one added to the head of ",(0,s.kt)("inlineCode",{parentName:"p"},"c"),". You can use ",(0,s.kt)("inlineCode",{parentName:"p"},"List.concat")," for this, but we highly discourage it."),(0,s.kt)("p",null,"Updating an arbitrary item in the middle of a list is also discouraged, since its performance and allocation overhead would be linear (",(0,s.kt)("inlineCode",{parentName:"p"},"O(n)"),")."),(0,s.kt)("h4",{id:"access"},"Access"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"switch")," (described in the ",(0,s.kt)("a",(0,a.Z)({parentName:"p"},{href:"pattern-matching-destructuring.md"}),"pattern matching section"),") is usually used to access list items:"),(0,s.kt)(o,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'let message =\n  switch myList {\n  | list{} => "This list is empty"\n  | list{a, ...rest} => "The head of the list is the string " ++ Js.Int.toString(a)\n  }\n')),(0,s.kt)("pre",null,(0,s.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'var message = myList\n  ? "The head of the list is the string " + (1).toString()\n  : "This list is empty";\n'))))}u.isMDXComponent=!0,u.frontmatter={title:"Array & List",description:"Arrays and List data structures",canonical:"/docs/manual/latest/array-and-list",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/latest/array-and-list.mdx"}},70935:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/latest/array-and-list",function(){return n(72691)}])}},function(e){e.O(0,[49774],(function(){return t=70935,e(e.s=t);var t}));var t=e.O();_N_E=t}]);