(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[20380],{22122:function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,{Z:function(){return r}})},17375:function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}n.d(t,{Z:function(){return r}})},3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"===typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=i,f=m["".concat(p,".").concat(d)]||m[d]||c[d]||a;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"===typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"===typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},96086:function(e){"use strict";var t=Object.assign.bind(Object);e.exports=t,e.exports.default=e.exports},88221:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return p}});var r=n(22122),i=n(17375),a=n(67294),o=n(3905),l=(a.createElement,{});function p(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"migrate-from-bucklescriptreason"},"Migrate from BuckleScript/Reason"),(0,o.kt)("p",null,"ReScript is a rebranding and cleanup of BuckleScript (since ",(0,o.kt)("inlineCode",{parentName:"p"},"v8.2.0"),") & Reason (",(0,o.kt)("inlineCode",{parentName:"p"},"v3.6"),") that enables us to ship a tighter compile-to-JS stack with more coherent documentation & tools. If you're an existing user of BuckleScript & Reason, here's the gist:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"ReScript is mostly just BuckleScript rebranded, with a new syntax that's like the Reason syntax, but catered more toward the JavaScript crowd."),(0,o.kt)("li",{parentName:"ul"},"All your existing code will keep working even if you don't upgrade.")),(0,o.kt)("h2",{id:"upgrade-your-codebase"},"Upgrade Your Codebase"),(0,o.kt)("p",null,"There are lots of exciting improvements in the new syntax (features, speed, error messages, etc.). The upgrade is trivial, backward-compatible and can be done on a per-file basis:"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{}),"npm install rescript@9 --save-dev\n\n# Also works with .rei / .ml / .mli / etc\nnpx rescript convert src/MyFile.re\n")),(0,o.kt)("p",null,"Enjoy the improved experience!"),(0,o.kt)("h3",{id:"upgrade-individual-folders"},"Upgrade Individual Folders"),(0,o.kt)("p",null,"This is useful for per-directory convertions:"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-console"}),"# *.rei, *.ml, *.mli,....\nfor f in your-folder/**/*.re; do; node_modules/rescript convert $f && rm $f; done;\n")),(0,o.kt)("h3",{id:"upgrade-an-entire-codebase"},"Upgrade an Entire Codebase"),(0,o.kt)("p",null,"In case you are confident in converting your codebase in one step, use the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",(0,r.Z)({parentName:"pre"},{}),"npx rescript convert -all\n")),(0,o.kt)("h2",{id:"difference-with-old-reason"},"Difference With Old Reason"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Complete removal of semicolon (you can still write them)."),(0,o.kt)("li",{parentName:"ul"},"No need for parentheses around ",(0,o.kt)("inlineCode",{parentName:"li"},"if"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"switch")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"try"),"."),(0,o.kt)("li",{parentName:"ul"},"Type arguments: from ",(0,o.kt)("inlineCode",{parentName:"li"},"option(int)")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"option<int>"),"."),(0,o.kt)("li",{parentName:"ul"},"Old interpolated string: from ",(0,o.kt)("inlineCode",{parentName:"li"},"{j|hello ${name}|j}")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"j`hello ${name}`"),". Now with proper unicode support!"),(0,o.kt)("li",{parentName:"ul"},"New interpolated string: ",(0,o.kt)("inlineCode",{parentName:"li"},"`hello world`"),". Also supports multiline and unicode. ",(0,o.kt)("inlineCode",{parentName:"li"},'"hello world"')," string is now singleline."),(0,o.kt)("li",{parentName:"ul"},"Polymorphic variants: from ",(0,o.kt)("inlineCode",{parentName:"li"}," `red")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"#red"),"."),(0,o.kt)("li",{parentName:"ul"},"Arrays: from ",(0,o.kt)("inlineCode",{parentName:"li"},"[|1,2,3|]")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"[1,2,3]"),". In JS, arrays are the right default."),(0,o.kt)("li",{parentName:"ul"},"Lists: from ",(0,o.kt)("inlineCode",{parentName:"li"},"[1,2,3]")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"list[1,2,3]")," (",(0,o.kt)("em",{parentName:"li"},"8.1.1 update"),": now it is ",(0,o.kt)("inlineCode",{parentName:"li"},"list{1, 2, 3}"),"). This ties with upcoming plans to access containers in a uniform way: ",(0,o.kt)("inlineCode",{parentName:"li"},"set[...]")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"map[...]"),". Maybe temporary."),(0,o.kt)("li",{parentName:"ul"},"Exception: from ",(0,o.kt)("inlineCode",{parentName:"li"},'try (compute()) { | Not_found => Js.log("oops")}')," to ",(0,o.kt)("inlineCode",{parentName:"li"},'try compute() catch { | Not_found => Js.log("oops")}'),"."),(0,o.kt)("li",{parentName:"ul"},"First class module: from ",(0,o.kt)("inlineCode",{parentName:"li"},"(module S: Student)")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"module(S: Student)"),"."),(0,o.kt)("li",{parentName:"ul"},"No custom infix operator for now (including ",(0,o.kt)("inlineCode",{parentName:"li"},"mod"),")."),(0,o.kt)("li",{parentName:"ul"},"Object access: from ",(0,o.kt)("inlineCode",{parentName:"li"},"settings##visible #= true")," to ",(0,o.kt)("inlineCode",{parentName:"li"},'settings["visible"] = true'),". Rejoice!"),(0,o.kt)("li",{parentName:"ul"},"Object: from ",(0,o.kt)("inlineCode",{parentName:"li"},'Js.t({"age": int})')," to just ",(0,o.kt)("inlineCode",{parentName:"li"},'{"age": int}'),". The ",(0,o.kt)("inlineCode",{parentName:"li"},"Js.t")," part is now uneeded."),(0,o.kt)("li",{parentName:"ul"},"Attribute: from ",(0,o.kt)("inlineCode",{parentName:"li"},'[@myAttribute "hello"]')," to ",(0,o.kt)("inlineCode",{parentName:"li"},'@myAttribute("hello")'),". From ",(0,o.kt)("inlineCode",{parentName:"li"},"[%re bla]")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"%re(bla)"),"."),(0,o.kt)("li",{parentName:"ul"},"Removed dereference syntax ",(0,o.kt)("inlineCode",{parentName:"li"},"result^"),". Just use ",(0,o.kt)("inlineCode",{parentName:"li"},"result.contents"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"fun")," pattern matching syntax removed."),(0,o.kt)("li",{parentName:"ul"},"Type declaration is non-recursive by default, consistent with let bindings. To have recursive types, use ",(0,o.kt)("inlineCode",{parentName:"li"},"type rec myList<'a> = Nil | Cons('a, myList<'a>)"),"."),(0,o.kt)("li",{parentName:"ul"},"Use any words, including reserved keywords, as your identifier name: ",(0,o.kt)("inlineCode",{parentName:"li"},'let \\"try" = true'),".")))}p.isMDXComponent=!0,p.frontmatter={title:"Migrate to ReScript Syntax",description:"Instructions on upgrading from Reason to ReScript",canonical:"/docs/manual/latest/migrate-to-new-syntax",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/latest/migrate-from-bucklescript-reason.mdx"}},77178:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/latest/migrate-from-bucklescript-reason",function(){return n(88221)}])}},function(e){e.O(0,[49774],(function(){return t=77178,e(e.s=t);var t}));var t=e.O();_N_E=t}]);