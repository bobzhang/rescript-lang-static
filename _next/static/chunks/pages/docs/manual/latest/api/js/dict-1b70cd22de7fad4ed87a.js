(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[49365],{22122:function(e,t,n){"use strict";function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}n.d(t,{Z:function(){return a}})},17375:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}n.d(t,{Z:function(){return a}})},3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return g}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),o=function(e){var t=a.useContext(p),n=t;return e&&(n="function"===typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=o(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=o(n),g=r,d=m["".concat(p,".").concat(g)]||m[g]||c[g]||i;return n?a.createElement(d,s(s({ref:t},u),{},{components:n})):a.createElement(d,s({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"===typeof e||r){var i=n.length,s=new Array(i);s[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"===typeof e?e:r,s[1]=l;for(var o=2;o<i;o++)s[o]=n[o];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},96086:function(e){"use strict";var t=Object.assign.bind(Object);e.exports=t,e.exports.default=e.exports},20702:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return u}});var a,r=n(22122),i=n(17375),s=n(67294),l=n(3905),p=(s.createElement,a="Intro",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",e)}),o={};function u(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,r.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"dict"},"Dict"),(0,l.kt)(p,{mdxType:"Intro"},(0,l.kt)("p",null,"Provide utilities for JS dictionary object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Note:")," This module's examples will assume this predeclared dictionary:"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"prelude",prelude:!0}),'let ages = Js.Dict.fromList(list{("Maria", 30), ("Vinh", 22), ("Fred", 49)})\n'))),(0,l.kt)("h2",{id:"t"},"t"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"prelude",prelude:!0}),"type t<'a>\n")),(0,l.kt)("p",null,"Dictionary type (ie an '{ }' JS object). However it is restricted to hold a single type; therefore values must have the same type.\nThis Dictionary type is mostly used with the Js_json.t type."),(0,l.kt)("h2",{id:"key"},"key"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"prelude",prelude:!0}),"type key = string\n")),(0,l.kt)("p",null,"The type for dictionary keys. This means that dictionaries ",(0,l.kt)("em",{parentName:"p"},"must")," use ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),"s as their keys."),(0,l.kt)("h2",{id:"get"},"get"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let get: (t<'a>, key) => option<'a>\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Js.Dict.get(key)")," returns ",(0,l.kt)("inlineCode",{parentName:"p"},"None")," if the key is not found in the dictionary, ",(0,l.kt)("inlineCode",{parentName:"p"},"Some(value)")," otherwise."),(0,l.kt)("pre",null,(0,l.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'Js.Dict.get(ages, "Vinh") == Some(22)\nJs.Dict.get(ages, "Paul") == None\n')),(0,l.kt)("h2",{id:"unsafeget"},"unsafeGet"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let unsafeGet: (t<'a>, key) => 'a\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Js.Dict.unsafeGet(key)")," returns the value if the key exists, otherwise an ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined")," value is returned. Use this only when you are sure the key exists (i.e. when having used the ",(0,l.kt)("inlineCode",{parentName:"p"},"keys()")," function to check that the key is valid)."),(0,l.kt)("pre",null,(0,l.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'Js.Dict.unsafeGet(ages, "Fred") == 49\nJs.Dict.unsafeGet(ages, "Paul") // returns undefined\n')),(0,l.kt)("h2",{id:"set"},"set"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let set: (t<'a>, key, 'a) => unit\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Js.Dict.set(dict, key, value)")," sets the key/value in the dictionary ",(0,l.kt)("inlineCode",{parentName:"p"},"dict"),". If the key does not exist, and entry will be created for it. ",(0,l.kt)("em",{parentName:"p"},"This function modifies the original dictionary.")),(0,l.kt)("pre",null,(0,l.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'Js.Dict.set(ages, "Maria", 31)\nJs.log(ages == Js.Dict.fromList(list{("Maria", 31), ("Vinh", 22), ("Fred", 49)}))\n\nJs.Dict.set(ages, "David", 66)\nJs.log(ages == Js.Dict.fromList(list{("Maria", 31), ("Vinh", 22), ("Fred", 49), ("David", 66)}))\n')),(0,l.kt)("h2",{id:"keys"},"keys"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let keys: t<'a> => array<string>\n")),(0,l.kt)("p",null,"Returns all the keys in the dictionary ",(0,l.kt)("inlineCode",{parentName:"p"},"dict"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'Js.Dict.keys(ages) == ["Maria", "Vinh", "Fred"]\n')),(0,l.kt)("h2",{id:"empty"},"empty"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let empty: unit => t<'a>\n")),(0,l.kt)("p",null,"Returns an empty dictionary."),(0,l.kt)("h2",{id:"unsafedeletekey"},"unsafeDeleteKey"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let unsafeDeleteKey: (. t<string>, string) => unit\n")),(0,l.kt)("p",null,"Experimental internal function"),(0,l.kt)("h2",{id:"entries"},"entries"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let entries: t<'a> => array<(key, 'a)>\n")),(0,l.kt)("p",null,"Returns an array of key/value pairs in the given dictionary (ES2017)."),(0,l.kt)("pre",null,(0,l.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'Js.Dict.entries(ages) == [("Maria", 30), ("Vinh", 22), ("Fred", 49)]\n')),(0,l.kt)("h2",{id:"values"},"values"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let values: t<'a> => array<'a>\n")),(0,l.kt)("p",null,"Returns the values in the given dictionary (ES2017)."),(0,l.kt)("pre",null,(0,l.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"Js.Dict.values(ages) == [30, 22, 49]\n")),(0,l.kt)("h2",{id:"fromlist"},"fromList"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let fromList: list<(key, 'a)> => t<'a>\n")),(0,l.kt)("p",null,"Creates a new dictionary containing each (key, value) pair in its list argument."),(0,l.kt)("pre",null,(0,l.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'let capitals = Js.Dict.fromList(list{("Japan", "Tokyo"), ("France", "Paris"), ("Egypt", "Cairo")})\n')),(0,l.kt)("h2",{id:"fromarray"},"fromArray"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let fromArray: array<(key, 'a)> => t<'a>\n")),(0,l.kt)("p",null,"Creates a new dictionary containing each (key, value) pair in its array argument."),(0,l.kt)("pre",null,(0,l.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'let capitals2 = Js.Dict.fromArray([("Germany", "Berlin"), ("Burkina Faso", "Ouagadougou")])\n')),(0,l.kt)("h2",{id:"map"},"map"),(0,l.kt)("pre",null,(0,l.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let map: ((. 'a) => 'b, t<'a>) => t<'b>\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"map(f, dict)")," maps ",(0,l.kt)("inlineCode",{parentName:"p"},"dict")," to a new dictionary with the same keys, using the function ",(0,l.kt)("inlineCode",{parentName:"p"},"f")," to map each value."),(0,l.kt)("pre",null,(0,l.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'let prices = Js.Dict.fromList(list{("pen", 1.00), ("book", 5.00), ("stapler", 7.00)})\n\nlet discount = (. price) => price *. 0.90\nlet salePrices = Js.Dict.map(discount, prices)\n\nsalePrices == Js.Dict.fromList(list{("pen", 0.90), ("book", 4.50), ("stapler", 6.30)})\n')))}u.isMDXComponent=!0,u.frontmatter={__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/latest/api/js/dict.mdx"}},16551:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/latest/api/js/dict",function(){return n(20702)}])}},function(e){e.O(0,[49774],(function(){return t=16551,e(e.s=t);var t}));var t=e.O();_N_E=t}]);