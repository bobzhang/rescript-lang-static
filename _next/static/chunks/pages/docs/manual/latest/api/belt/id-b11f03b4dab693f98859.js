(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[40281],{22122:function(e,t,n){"use strict";function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}n.d(t,{Z:function(){return a}})},17375:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}n.d(t,{Z:function(){return a}})},3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"===typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,h=m["".concat(o,".").concat(d)]||m[d]||c[d]||i;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"===typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"===typeof e?e:r,l[1]=s;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},96086:function(e){"use strict";var t=Object.assign.bind(Object);e.exports=t,e.exports.default=e.exports},79609:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return u}});var a,r=n(22122),i=n(17375),l=n(67294),s=n(3905),o=(l.createElement,a="Intro",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",e)}),p={};function u(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"id"},"Id"),(0,s.kt)(o,{mdxType:"Intro"},(0,s.kt)("p",null,"Provide utilities to create identified comparators or hashes for data\nstructures used below."),(0,s.kt)("p",null,"It creates a unique identifier per module of functions so that different data\nstructures with slightly different comparison functions won't mix.")),(0,s.kt)("h2",{id:"hash"},"hash"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"type hash<'a, 'id>\n")),(0,s.kt)("p",null,"Its runtime represenation is a hash function, but signed with a type parameter, so that different hash functions type mismatch."),(0,s.kt)("h2",{id:"eq"},"eq"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"type eq<'a, 'id>\n")),(0,s.kt)("p",null,"Its runtime represenation is an eq function, but signed with a type parameter, so that different hash functions type mismatch."),(0,s.kt)("h2",{id:"cmp"},"cmp"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"type cmp<'a, 'id>\n")),(0,s.kt)("p",null,"Its runtime representation is a cmp function, but signed with a type parameter, so that different hash functions type mismatch."),(0,s.kt)("h2",{id:"comparable"},"Comparable"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"prelude",prelude:!0}),"module type Comparable = {\n  type identity\n\n  type t\n\n  let cmp: Belt.Id.cmp<t, identity>\n}\n")),(0,s.kt)("h2",{id:"comparable-1"},"comparable"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"type comparable<'key,'id> =\n  module(Belt.Id.Comparable with type identity = 'id and type t = 'key)\n")),(0,s.kt)("p",null,"is a module of functions, here it only includes cmp."),(0,s.kt)("p",null,"Unlike normal functions, when created, it comes with a unique identity (guaranteed by the type system)."),(0,s.kt)("p",null,"It can be created using function ",(0,s.kt)("inlineCode",{parentName:"p"},"Belt_Id.comparableU")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"Belt_Id.comparable"),"."),(0,s.kt)("p",null,"The idea of a unique identity when created is that it makes sure two sets would type mismatch if they use different comparison function"),(0,s.kt)("h2",{id:"makecomparableu"},"MakeComparableU"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"module MakeComparableU: (M: {\n  type t\n  let cmp: (. t, t) => int\n}) => Comparable with type t = M.t\n")),(0,s.kt)("h2",{id:"makecomparable"},"MakeComparable"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"module MakeComparable: (M: {\n  type t\n  let cmp: (t, t) => int\n}) => Comparable with type t = M.t\n")),(0,s.kt)("h2",{id:"comparableu"},"comparableU"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let comparableU: (~cmp: (. 'a, 'a) => int) =>\n  module(Belt.Id.Comparable with type t = 'a)\n")),(0,s.kt)("h2",{id:"comparable-2"},"comparable"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"type comparable<'key, 'id> =\n  module(Belt.Id.Comparable with type identity = 'id and type t = 'key)\n")),(0,s.kt)("h2",{id:"hashable"},"Hashable"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"prelude",prelude:!0}),"module type Hashable = {\n  type identity\n\n  type t\n\n  let hash: Belt.Id.hash<t, identity>\n\n  let eq: Belt.Id.eq<t, identity>\n}\n")),(0,s.kt)("h2",{id:"hashable-1"},"hashable"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"type hashable<'key, 'id> =\n  module(Belt.Id.Hashable with type identity = 'id and type t = 'key)\n")),(0,s.kt)("p",null,"is a module of functions, here it only includes hash, eq."),(0,s.kt)("p",null,"Unlike normal functions, when created, it comes with a unique identity (guaranteed by the type system)."),(0,s.kt)("p",null,"It can be created using function ",(0,s.kt)("inlineCode",{parentName:"p"},"Belt_Id.hashableU")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"Belt_Id.hashable"),"."),(0,s.kt)("p",null,"The idea of a unique identity when created is that it makes sure two hash sets would type mismatch if they use different comparison function."),(0,s.kt)("h2",{id:"makehashableu"},"MakeHashableU"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"module MakeHashableU: (M: {\n  type t\n  let hash: (. t) => int\n  let eq: (. t, t) => bool\n}) => Hashable with type t = M.t\n")),(0,s.kt)("h2",{id:"makehashable"},"MakeHashable"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"module MakeHashable: (M: {\n  type t\n  let hash: t => int\n  let eq: (t, t) => bool\n}) => Hashable with type t = M.t\n")),(0,s.kt)("h2",{id:"hashableu"},"hashableU"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let hashableU: (~hash: (. 'a) => int, ~eq: (. 'a, 'a) => bool) =>\n  module(Belt.Id.Hashable with type t = 'a)\n")),(0,s.kt)("h2",{id:"hashable-2"},"hashable"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let hashable: (~hash: 'a => int, ~eq: ('a, 'a) => bool) =>\n  module(Belt.Id.Hashable with type t = 'a)\n")))}u.isMDXComponent=!0,u.frontmatter={__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/latest/api/belt/id.mdx"}},37878:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/latest/api/belt/id",function(){return n(79609)}])}},function(e){e.O(0,[49774],(function(){return t=37878,e(e.s=t);var t}));var t=e.O();_N_E=t}]);