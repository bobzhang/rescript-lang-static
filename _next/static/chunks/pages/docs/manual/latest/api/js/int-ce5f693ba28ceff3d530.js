(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[22211],{22122:function(e,t,n){"use strict";function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e}).apply(this,arguments)}n.d(t,{Z:function(){return i}})},17375:function(e,t,n){"use strict";function i(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}n.d(t,{Z:function(){return i}})},3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"===typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),g=p(n),m=r,d=g["".concat(l,".").concat(m)]||g[m]||c[m]||a;return n?i.createElement(d,o(o({ref:t},u),{},{components:n})):i.createElement(d,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"===typeof e||r){var a=n.length,o=new Array(a);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"===typeof e?e:r,o[1]=s;for(var p=2;p<a;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},96086:function(e){"use strict";var t=Object.assign.bind(Object);e.exports=t,e.exports.default=e.exports},40265:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return u}});var i,r=n(22122),a=n(17375),o=n(67294),s=n(3905),l=(o.createElement,i="Intro",function(e){return console.warn("Component "+i+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",e)}),p={};function u(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"int"},"Int"),(0,s.kt)(l,{mdxType:"Intro"},(0,s.kt)("p",null,"Provide utilities for handling ",(0,s.kt)("inlineCode",{parentName:"p"},"int"),".")),(0,s.kt)("h2",{id:"toexponential"},"toExponential"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let toExponential: int => string\n")),(0,s.kt)("p",null,"Formats an ",(0,s.kt)("inlineCode",{parentName:"p"},"int")," using exponential (scientific) notation.\nReturns a ",(0,s.kt)("inlineCode",{parentName:"p"},"string")," representing the given value in exponential notation.\nRaises ",(0,s.kt)("inlineCode",{parentName:"p"},"RangeError")," if digits is not in the range ","[","0, 20","]"," (inclusive)."),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'/* prints "7.7e+1" */\nJs.log(Js.Int.toExponential(77))\n')),(0,s.kt)("h2",{id:"toexponentialwithprecision"},"toExponentialWithPrecision"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let toExponentialWithPrecision: (int, ~digits: int) => string\n")),(0,s.kt)("p",null,"Formats an ",(0,s.kt)("inlineCode",{parentName:"p"},"int")," using exponential (scientific) notation.\n",(0,s.kt)("inlineCode",{parentName:"p"},"digits")," specifies how many digits should appear after the decimal point. The value must be in the range ","[","0, 20","]"," (inclusive)."),(0,s.kt)("p",null,"Returns a ",(0,s.kt)("inlineCode",{parentName:"p"},"string")," representing the given value in exponential notation."),(0,s.kt)("p",null,"The output will be rounded or padded with zeroes if necessary.\nRaises ",(0,s.kt)("inlineCode",{parentName:"p"},"RangeError")," if ",(0,s.kt)("inlineCode",{parentName:"p"},"digits")," is not in the range ","[","0, 20","]"," (inclusive)."),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'/* prints "7.70e+1" */\nJs.log(Js.Int.toExponentialWithPrecision(77, ~digits=2))\n\n/* prints "5.68e+3" */\nJs.log(Js.Int.toExponentialWithPrecision(5678, ~digits=2))\n')),(0,s.kt)("h2",{id:"toprecision"},"toPrecision"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let toPrecision: int => string\n")),(0,s.kt)("p",null,"Formats an ",(0,s.kt)("inlineCode",{parentName:"p"},"int")," using some fairly arbitrary rules.\nReturns a ",(0,s.kt)("inlineCode",{parentName:"p"},"string")," representing the given value in fixed-point (usually)."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"toPrecision")," differs from ",(0,s.kt)("inlineCode",{parentName:"p"},"toFixed")," in that the former will format the number with full precision, while the latter will not output any digits after the decimal point.\nRaises ",(0,s.kt)("inlineCode",{parentName:"p"},"RangeError")," if ",(0,s.kt)("inlineCode",{parentName:"p"},"digits")," is not in the range accepted by this function."),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'/* prints "123456789" */\nJs.log(Js.Int.toPrecision(123456789))\n')),(0,s.kt)("h2",{id:"toprecisionwithprecision"},"toPrecisionWithPrecision"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let toPrecisionWithPrecision: (int, ~digits: int) => string\n")),(0,s.kt)("p",null,"Formats an ",(0,s.kt)("inlineCode",{parentName:"p"},"int")," using some fairly arbitrary rules.\n",(0,s.kt)("inlineCode",{parentName:"p"},"digits")," specifies how many digits should appear in total. The value must between 0 and some arbitrary number that's hopefully at least larger than 20 (for Node it's 21. Why? Who knows)."),(0,s.kt)("p",null,"Returns a ",(0,s.kt)("inlineCode",{parentName:"p"},"string")," representing the given value in fixed-point or scientific notation."),(0,s.kt)("p",null,"The output will be rounded or padded with zeroes if necessary."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"toPrecisionWithPrecision")," differs from ",(0,s.kt)("inlineCode",{parentName:"p"},"toFixedWithPrecision")," in that the former will count all digits against the precision, while the latter will count only the digits after the decimal point.\n",(0,s.kt)("inlineCode",{parentName:"p"},"toPrecisionWithPrecision")," will also use scientific notation if the specified precision is less than the number of digits before the decimal point.\nRaises ",(0,s.kt)("inlineCode",{parentName:"p"},"RangeError")," if ",(0,s.kt)("inlineCode",{parentName:"p"},"digits")," is not in the range accepted by this function."),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'/* prints "1.2e+8" */\nJs.log(Js.Int.toPrecisionWithPrecision(123456789, ~digits=2))\n\n/* prints "0.0" */\nJs.log(Js.Int.toPrecisionWithPrecision(0, ~digits=2))\n')),(0,s.kt)("h2",{id:"tostring"},"toString"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let toString: int => string\n")),(0,s.kt)("p",null,"Formats an ",(0,s.kt)("inlineCode",{parentName:"p"},"int")," as a ",(0,s.kt)("inlineCode",{parentName:"p"},"string"),".\nReturns a ",(0,s.kt)("inlineCode",{parentName:"p"},"string")," representing the given value in fixed-point (usually)."),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'/* prints "123456789" */\nJs.log(Js.Int.toString(123456789))\n')),(0,s.kt)("h2",{id:"tostringwithradix"},"toStringWithRadix"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let toStringWithRadix: (int, ~radix: int) => string\n")),(0,s.kt)("p",null,"Formats an ",(0,s.kt)("inlineCode",{parentName:"p"},"int")," as a ",(0,s.kt)("inlineCode",{parentName:"p"},"string"),".\n",(0,s.kt)("inlineCode",{parentName:"p"},"radix")," specifies the radix base to use for the formatted number. The value must be in the range ","[","2, 36","]"," (inclusive).\nReturns a ",(0,s.kt)("inlineCode",{parentName:"p"},"string")," representing the given value in fixed-point (usually).\nRaises ",(0,s.kt)("inlineCode",{parentName:"p"},"RangeError")," if ",(0,s.kt)("inlineCode",{parentName:"p"},"radix")," is not in the range ","[","2, 36","]"," (inclusive)."),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'/* prints "110" */\nJs.log(Js.Int.toStringWithRadix(6, ~radix=2))\n\n/* prints "deadbeef" */\nJs.log(Js.Int.toStringWithRadix(3735928559, ~radix=16))\n\n/* prints "2n9c" */\nJs.log(Js.Int.toStringWithRadix(123456, ~radix=36))\n')),(0,s.kt)("h2",{id:"tofloat"},"toFloat"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let toFloat: int => float\n")),(0,s.kt)("h2",{id:"equal"},"equal"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let equal: (int, int) => bool\n")),(0,s.kt)("h2",{id:"max"},"max"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let max: int\n")),(0,s.kt)("h2",{id:"min"},"min"),(0,s.kt)("pre",null,(0,s.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let min: int\n")))}u.isMDXComponent=!0,u.frontmatter={__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/latest/api/js/int.mdx"}},89709:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/latest/api/js/int",function(){return n(40265)}])}},function(e){e.O(0,[49774],(function(){return t=89709,e(e.s=t);var t}));var t=e.O();_N_E=t}]);