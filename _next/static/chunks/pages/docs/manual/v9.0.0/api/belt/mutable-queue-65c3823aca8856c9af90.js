(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[10393],{22122:function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,{Z:function(){return r}})},17375:function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}n.d(t,{Z:function(){return r}})},3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),o=function(e){var t=r.useContext(s),n=t;return e&&(n="function"===typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=o(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=o(n),d=a,g=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(g,l(l({ref:t},u),{},{components:n})):r.createElement(g,l({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"===typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"===typeof e?e:a,l[1]=p;for(var o=2;o<i;o++)l[o]=n[o];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},96086:function(e){"use strict";var t=Object.assign.bind(Object);e.exports=t,e.exports.default=e.exports},48750:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return u}});var r,a=n(22122),i=n(17375),l=n(67294),p=n(3905),s=(l.createElement,r="Intro",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,p.kt)("div",e)}),o={};function u(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,p.kt)("wrapper",(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("h1",{id:"mutablequeue"},"MutableQueue"),(0,p.kt)(s,{mdxType:"Intro"},(0,p.kt)("p",null,"An FIFO(first in first out) queue data structure.")),(0,p.kt)("h2",{id:"t"},"t"),(0,p.kt)("pre",null,(0,p.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"prelude",prelude:!0}),"type t<'a>\n")),(0,p.kt)("p",null,"The type of queues containing elements of ",(0,p.kt)("inlineCode",{parentName:"p"},"type('a)"),"."),(0,p.kt)("h2",{id:"make"},"make"),(0,p.kt)("pre",null,(0,p.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let make: unit => t<'a>\n")),(0,p.kt)("p",null,"Returns a new queue, initially empty."),(0,p.kt)("h2",{id:"clear"},"clear"),(0,p.kt)("pre",null,(0,p.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let clear: t<'a> => unit\n")),(0,p.kt)("p",null,"Discard all elements from the queue."),(0,p.kt)("h2",{id:"isempty"},"isEmpty"),(0,p.kt)("pre",null,(0,p.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let isEmpty: t<'a> => bool\n")),(0,p.kt)("p",null,"Returns ",(0,p.kt)("inlineCode",{parentName:"p"},"true")," if the given queue is empty, ",(0,p.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,p.kt)("h2",{id:"fromarray"},"fromArray"),(0,p.kt)("pre",null,(0,p.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let fromArray: array<'a> => t<'a>\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"fromArray")," a is equivalent to ",(0,p.kt)("inlineCode",{parentName:"p"},"Array.forEach(a, add(q, a));")),(0,p.kt)("h2",{id:"add"},"add"),(0,p.kt)("pre",null,(0,p.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let add: (t<'a>, 'a) => unit\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"add(q, x)")," adds the element ",(0,p.kt)("inlineCode",{parentName:"p"},"x")," at the end of the queue ",(0,p.kt)("inlineCode",{parentName:"p"},"q"),"."),(0,p.kt)("h2",{id:"peek"},"peek"),(0,p.kt)("pre",null,(0,p.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let peek: t<'a> => option<'a>\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"peekOpt(q)")," returns the first element in queue ",(0,p.kt)("inlineCode",{parentName:"p"},"q"),", without removing it from the queue."),(0,p.kt)("h2",{id:"peekundefined"},"peekUndefined"),(0,p.kt)("pre",null,(0,p.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let peekUndefined: t<'a> => Js.undefined<'a>\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"peekUndefined(q)")," returns ",(0,p.kt)("inlineCode",{parentName:"p"},"undefined")," if not found."),(0,p.kt)("h2",{id:"peekexn"},"peekExn"),(0,p.kt)("pre",null,(0,p.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let peekExn: t<'a> => 'a\n")),(0,p.kt)("p",null,"raise an exception if ",(0,p.kt)("inlineCode",{parentName:"p"},"q")," is empty"),(0,p.kt)("h2",{id:"pop"},"pop"),(0,p.kt)("pre",null,(0,p.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let pop: t<'a> => option<'a>\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"pop(q)")," removes and returns the first element in queue ",(0,p.kt)("inlineCode",{parentName:"p"},"q"),"."),(0,p.kt)("h2",{id:"popundefined"},"popUndefined"),(0,p.kt)("pre",null,(0,p.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let popUndefined: t<'a> => Js.undefined<'a>\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"popUndefined(q)")," removes and returns the first element in queue ",(0,p.kt)("inlineCode",{parentName:"p"},"q"),". it will return ",(0,p.kt)("inlineCode",{parentName:"p"},"undefined")," if it is already empty."),(0,p.kt)("h2",{id:"popexn"},"popExn"),(0,p.kt)("pre",null,(0,p.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let popExn: t<'a> => 'a\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"popExn(q)")," raise an exception if q is empty."),(0,p.kt)("h2",{id:"copy"},"copy"),(0,p.kt)("pre",null,(0,p.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let copy: t<'a> => t<'a>\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"copy(q)")," returns a fresh queue."),(0,p.kt)("h2",{id:"size"},"size"),(0,p.kt)("pre",null,(0,p.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let size: t<'a> => int\n")),(0,p.kt)("p",null,"Returns the number of elements in a queue."),(0,p.kt)("h2",{id:"mapu"},"mapU"),(0,p.kt)("pre",null,(0,p.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let mapU: (t<'a>, (. 'a) => 'b) => t<'b>\n")),(0,p.kt)("h2",{id:"map"},"map"),(0,p.kt)("pre",null,(0,p.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let map: (t<'a>, 'a => 'b) => t<'b>\n")),(0,p.kt)("h2",{id:"foreachu"},"forEachU"),(0,p.kt)("pre",null,(0,p.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let forEachU: (t<'a>, (. 'a) => unit) => unit\n")),(0,p.kt)("h2",{id:"foreach"},"forEach"),(0,p.kt)("pre",null,(0,p.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let forEach: (t<'a>, 'a => unit) => unit\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"forEach(q, f) applies"),"f",(0,p.kt)("inlineCode",{parentName:"p"},"in turn to all elements of"),"q`, from the least recently entered to the most recently entered. The queue itself is unchanged."),(0,p.kt)("h2",{id:"reduceu"},"reduceU"),(0,p.kt)("pre",null,(0,p.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let reduceU: (t<'a>, 'b, (. 'b, 'a) => 'b) => 'b\n")),(0,p.kt)("h2",{id:"reduce"},"reduce"),(0,p.kt)("pre",null,(0,p.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let reduce: (t<'a>, 'b, ('b, 'a) => 'b) => 'b\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"reduce(q, accu, f)")," is equivalent to ",(0,p.kt)("inlineCode",{parentName:"p"},"List.reduce(l, accu, f)"),", where ",(0,p.kt)("inlineCode",{parentName:"p"},"l")," is the list of ",(0,p.kt)("inlineCode",{parentName:"p"},"q"),"'s elements. The queue remains unchanged."),(0,p.kt)("h2",{id:"transfer"},"transfer"),(0,p.kt)("pre",null,(0,p.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let transfer: (t<'a>, t<'a>) => unit\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"transfer(q1, q2)")," adds all of ",(0,p.kt)("inlineCode",{parentName:"p"},"q1"),"'s elements at the end of the queue ",(0,p.kt)("inlineCode",{parentName:"p"},"q2"),", then clears ",(0,p.kt)("inlineCode",{parentName:"p"},"q1"),". It is equivalent to the sequence ",(0,p.kt)("inlineCode",{parentName:"p"},"forEach((x) => add(x, q2), q1);"),"; clear ",(0,p.kt)("inlineCode",{parentName:"p"},"q1"),", but runs in constant time."),(0,p.kt)("h2",{id:"toarray"},"toArray"),(0,p.kt)("pre",null,(0,p.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let toArray: t<'a> => array<'a>\n")),(0,p.kt)("p",null,"First added will be in the beginning of the array."))}u.isMDXComponent=!0,u.frontmatter={__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-queue.mdx"}},59244:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v9.0.0/api/belt/mutable-queue",function(){return n(48750)}])}},function(e){e.O(0,[49774],(function(){return t=59244,e(e.s=t);var t}));var t=e.O();_N_E=t}]);