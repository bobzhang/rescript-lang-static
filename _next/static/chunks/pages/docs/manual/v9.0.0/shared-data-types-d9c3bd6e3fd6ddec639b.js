(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[77949],{22122:function(e,t,n){"use strict";function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}n.d(t,{Z:function(){return a}})},17375:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}n.d(t,{Z:function(){return a}})},3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"===typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return n?a.createElement(f,o(o({ref:t},u),{},{components:n})):a.createElement(f,o({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"===typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"===typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},96086:function(e){"use strict";var t=Object.assign.bind(Object);e.exports=t,e.exports.default=e.exports},16782:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return s}});var a=n(22122),r=n(17375),i=n(67294),o=n(3905),l=(i.createElement,{});function s(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"shared-data-types"},"Shared Data Types"),(0,o.kt)("p",null,"ReScript's built-in values of type ",(0,o.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"float"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"array")," and a few others have a rather interesting property: they compile to the exact same value in JavaScript!"),(0,o.kt)("p",null,"This means that if you're passing e.g. a ReScript string to the JavaScript side, the JS side can directly use it as a native JS string. It also means that you can import a JS string and pretend it's a native ReScript string."),(0,o.kt)("p",null,"Unlike most compiled-to-js languages, in ReScript, ",(0,o.kt)("strong",{parentName:"p"},"you don't need to write data converters back and forth for most of our values"),"!"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Shared, bidirectionally usable types"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"String. ReScript strings are JavaScript strings, vice-versa. (Caveat: only our backtick string ",(0,o.kt)("inlineCode",{parentName:"li"},"`hello \ud83d\udc4b ${personName}`")," supports unicode and interpolation)."),(0,o.kt)("li",{parentName:"ul"},"Float. ReScript floats are JS numbers, vice-versa."),(0,o.kt)("li",{parentName:"ul"},"Array. In addition to the ",(0,o.kt)("a",(0,a.Z)({parentName:"li"},{href:"api/js/array"}),"JS Array API"),", we provide our own ",(0,o.kt)("a",(0,a.Z)({parentName:"li"},{href:"api/belt/array#set"}),"Belt.Array")," API too."),(0,o.kt)("li",{parentName:"ul"},"Tuple. Compiles to a JS array. You can treat a fixed-sized, heterogenous JS array as ReScript tuple too."),(0,o.kt)("li",{parentName:"ul"},"Boolean."),(0,o.kt)("li",{parentName:"ul"},"Record. Record compiles to JS object. Therefore you can also treat JS objects as records. If they're too dynamic, consider modeling them on the ReScript side as a hashmap/dictionary ",(0,o.kt)("a",(0,a.Z)({parentName:"li"},{href:"api/js/dict"}),(0,o.kt)("inlineCode",{parentName:"a"},"Js.Dict"))," or a ReScript object."),(0,o.kt)("li",{parentName:"ul"},"Object. ReScript objects are JavaScript objects, vice-versa."),(0,o.kt)("li",{parentName:"ul"},"Function. They compile to clean JS functions."),(0,o.kt)("li",{parentName:"ul"},"Module. ReScript files are considered top-level modules, and are compiled to JS files 1 to 1. Nested modules are compiled to JavaScript objects."),(0,o.kt)("li",{parentName:"ul"},"Unit. The ",(0,o.kt)("inlineCode",{parentName:"li"},"unit")," type, which has a single value ",(0,o.kt)("inlineCode",{parentName:"li"},"()"),", compiles to ",(0,o.kt)("inlineCode",{parentName:"li"},"undefined")," too. Likewise, you can treat an incoming JS ",(0,o.kt)("inlineCode",{parentName:"li"},"undefined")," as ",(0,o.kt)("inlineCode",{parentName:"li"},"()"),".")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Types that are slightly different than JS, but that you can still use from JS"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Int. ",(0,o.kt)("strong",{parentName:"li"},"Ints are 32-bits"),"! Be careful, you can potentially treat them as JS numbers and vice-versa, but if the number's large, then you better treat JS numbers as floats. For example, we bind to Js.Date using ",(0,o.kt)("inlineCode",{parentName:"li"},"float"),"s."),(0,o.kt)("li",{parentName:"ul"},"Option. The ",(0,o.kt)("inlineCode",{parentName:"li"},"option")," type's ",(0,o.kt)("inlineCode",{parentName:"li"},"None")," value compiles into JS ",(0,o.kt)("inlineCode",{parentName:"li"},"undefined"),". The ",(0,o.kt)("inlineCode",{parentName:"li"},"Some")," value, e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"Some(5)"),", compiles to ",(0,o.kt)("inlineCode",{parentName:"li"},"5"),". Likewise, you can treat an incoming JS ",(0,o.kt)("inlineCode",{parentName:"li"},"undefined")," as ",(0,o.kt)("inlineCode",{parentName:"li"},"None"),". ",(0,o.kt)("strong",{parentName:"li"},"JS ",(0,o.kt)("inlineCode",{parentName:"strong"},"null")," isn't handled here"),". If your JS value can be ",(0,o.kt)("inlineCode",{parentName:"li"},"null"),", use ",(0,o.kt)("a",(0,a.Z)({parentName:"li"},{href:"api/js/nullable"}),"Js.Nullable")," helpers."),(0,o.kt)("li",{parentName:"ul"},"Exception."),(0,o.kt)("li",{parentName:"ul"},"Variant. Check the compiled JavaScript output of variant to see its shape. We don't recommend exporting a ReScript variant for pure JS usage, but you can do that if you have some interop needs."),(0,o.kt)("li",{parentName:"ul"},"List, which is just a regular variant.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Non-shared types (aka internal types)"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Character."),(0,o.kt)("li",{parentName:"ul"},"Int64."),(0,o.kt)("li",{parentName:"ul"},"Lazy values."),(0,o.kt)("li",{parentName:"ul"},"Everything else.")),(0,o.kt)("p",null,"Many of these are stable, which means that you can still serialize/deserialize them as-is without manual conversions. But we discourage actively peeking into their structure otherwise."),(0,o.kt)("p",null,"These types require manual conversions if you want to export them for JS consumption. For a seamless JS/TypeScript/Flow integration experience, you might want to use ",(0,o.kt)("a",(0,a.Z)({parentName:"p"},{href:"https://github.com/cristianoc/gentype"}),"genType")," instead of doing conversions by hand."))}s.isMDXComponent=!0,s.frontmatter={title:"Shared Data Types",description:"Data types that share runtime presentation between JS and ReScript",canonical:"/docs/manual/latest/shared-data-types",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v9.0.0/shared-data-types.mdx"}},99488:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v9.0.0/shared-data-types",function(){return n(16782)}])}},function(e){e.O(0,[49774],(function(){return t=99488,e(e.s=t);var t}));var t=e.O();_N_E=t}]);