(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[62526],{22122:function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,{Z:function(){return r}})},17375:function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}n.d(t,{Z:function(){return r}})},3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"===typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(p,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"===typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"===typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},96086:function(e){"use strict";var t=Object.assign.bind(Object);e.exports=t,e.exports.default=e.exports},14394:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return u}});var r,a=n(22122),o=n(17375),i=n(67294),l=n(3905),p=(i.createElement,r="CodeTab",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",e)}),s={};function u(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"external-bind-to-any-js-library"},"External (Bind to Any JS Library)"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"external")," is the primary ReScript features for bringing in and using JavaScript values."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"external")," is like a let binding, but:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The right side of ",(0,l.kt)("inlineCode",{parentName:"li"},"=")," isn't a value; it's the name of the JS value you're referring to."),(0,l.kt)("li",{parentName:"ul"},"The type for the binding is mandatory, since we need to know what the type of that JS value is."),(0,l.kt)("li",{parentName:"ul"},"Can only exist at the top level of a file or module.")),(0,l.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'@val external setTimeout: (unit => unit, int) => float = "setTimeout"\n')),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),"// Empty output\n"))),(0,l.kt)("p",null,"There are several kinds of ",(0,l.kt)("inlineCode",{parentName:"p"},"external"),"s, differentiated and/or augmented through the ",(0,l.kt)("inlineCode",{parentName:"p"},"@bs")," notation they carry. This page deals with the general, shared mechanism behind most ",(0,l.kt)("inlineCode",{parentName:"p"},"external"),"s. The different ",(0,l.kt)("inlineCode",{parentName:"p"},"@bs")," annotations are documented in their respective pages later. A few notable ones:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@val"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"@scope"),": ",(0,l.kt)("a",(0,a.Z)({parentName:"li"},{href:"bind-to-global-js-values"}),"bind to global JS values"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@module"),": ",(0,l.kt)("a",(0,a.Z)({parentName:"li"},{href:"import-from-export-to-js"}),"bind to JS imported/exported values"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@send"),": ",(0,l.kt)("a",(0,a.Z)({parentName:"li"},{href:"bind-to-js-function"}),"bind to JS methods"),".")),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("p",null,"Once declared, you can use an ",(0,l.kt)("inlineCode",{parentName:"p"},"external")," as a normal value, just like a let binding."),(0,l.kt)("h2",{id:"tips--tricks"},"Tips & Tricks"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"external")," + ReScript objects are a wonderful combination for quick prototyping. Check the JS output tab:"),(0,l.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'// The type of document is just some random type \'a\n// that we won\'t bother to specify\n@val external document: \'a = "document"\n\n// call a method\ndocument["addEventListener"]("mouseup", _event => {\n  Js.log("clicked!")\n})\n\n// get a property\nlet loc = document["location"]\n\n// set a property\ndocument["location"]["href"] = "rescript-lang.org"\n')),(0,l.kt)("pre",null,(0,l.kt)("code",(0,a.Z)({parentName:"pre"},{className:"language-js"}),'document.addEventListener("mouseup", function(_event) {\n  console.log("clicked!");\n});\n\nvar loc = document.location;\n\ndocument.location.href = "rescript-lang.org";\n'))),(0,l.kt)("p",null,"We've specified ",(0,l.kt)("inlineCode",{parentName:"p"},"document"),"'s type as ",(0,l.kt)("inlineCode",{parentName:"p"},"'a"),", aka a placeholder type that's polymorphic. Any value can be passed there, so you're not getting much type safety (except the inferences at various call sites). However, this is excellent for quickly getting started using a JavaScript library in ReScript ",(0,l.kt)("strong",{parentName:"p"},"without needing the equivalent of a repository of typed bindings")," like TypeScript's ",(0,l.kt)("inlineCode",{parentName:"p"},"DefinitelyTyped")," repo."),(0,l.kt)("p",null,"However, if you want to more rigidly bind to the JavaScript library you want, keep reading the next few interop pages."),(0,l.kt)("h2",{id:"performance--output-readability"},"Performance & Output Readability"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"external"),"s declarations are inlined into their callers during compilation, ",(0,l.kt)("strong",{parentName:"p"},"and completely disappear from the JS output"),". This means any time you use one, you can be sure that you're not incurring extra JavaScript <-> ReScript conversion cost."),(0,l.kt)("p",null,"Additionally, no extra ReScript-specific runtime is better for output readability."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Note:")," do also use ",(0,l.kt)("inlineCode",{parentName:"p"},"external"),"s and the ",(0,l.kt)("inlineCode",{parentName:"p"},"@blabla")," attributes in the interface files. Otherwise the inlining won't happen.")),(0,l.kt)("h2",{id:"design-decisions"},"Design Decisions"),(0,l.kt)("p",null,"ReScript takes interoperating with existing code very seriously. Our type system has very strong guarantees. However, such strong feature also means that, without a great interop system, it'd be very hard to gradually convert a codebase over to ReScript. Fortunately, our interop are comprehensive and cooperate very well with most existing JavaScript code."),(0,l.kt)("p",null,"The combination of a sound type system + great interop means that we get the benefits of a traditional gradual type system regarding incremental codebase coverage & conversion, without the downside of such gradual type system: complex features to support existing patterns, slow analysis, diminishing return in terms of type coverage, etc."))}u.isMDXComponent=!0,u.frontmatter={title:"External (Bind to Any JS Library)",description:"The external keyword",canonical:"/docs/manual/latest/external",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v9.0.0/external.mdx"}},18063:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v9.0.0/external",function(){return n(14394)}])}},function(e){e.O(0,[49774],(function(){return t=18063,e(e.s=t);var t}));var t=e.O();_N_E=t}]);