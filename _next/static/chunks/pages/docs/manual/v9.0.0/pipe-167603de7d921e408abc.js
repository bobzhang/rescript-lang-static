(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[24525],{22122:function(e,t,n){"use strict";function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}n.d(t,{Z:function(){return a}})},17375:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}n.d(t,{Z:function(){return a}})},3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),i=function(e){var t=a.useContext(l),n=t;return e&&(n="function"===typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=i(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=i(n),d=r,g=m["".concat(l,".").concat(d)]||m[d]||c[d]||o;return n?a.createElement(g,s(s({ref:t},u),{},{components:n})):a.createElement(g,s({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"===typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"===typeof e?e:r,s[1]=p;for(var i=2;i<o;i++)s[i]=n[i];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},96086:function(e){"use strict";var t=Object.assign.bind(Object);e.exports=t,e.exports.default=e.exports},22514:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return u}});var a,r=n(22122),o=n(17375),s=n(67294),p=n(3905),l=(s.createElement,a="CodeTab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,p.kt)("div",e)}),i={};function u(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,p.kt)("wrapper",(0,r.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("h1",{id:"pipe"},"Pipe"),(0,p.kt)("p",null,"ReScript provides a tiny but surprisingly useful operator ",(0,p.kt)("inlineCode",{parentName:"p"},"->"),', called the "pipe", that allows you to "flip" your code inside-out. ',(0,p.kt)("inlineCode",{parentName:"p"},"a(b)")," becomes ",(0,p.kt)("inlineCode",{parentName:"p"},"b->a"),". It's a simple piece of syntax that doesn't have any runtime cost."),(0,p.kt)("p",null,"Why would you use it? Imagine you have the following:"),(0,p.kt)(l,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res"}),"validateAge(getAge(parseData(person)))\n")),(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"validateAge(getAge(parseData(person)));\n"))),(0,p.kt)("p",null,"This is slightly hard to read, since you need to read the code from the innermost part, to the outer parts. Use pipe to streamline it:"),(0,p.kt)(l,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res"}),"person\n  ->parseData\n  ->getAge\n  ->validateAge\n")),(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"validateAge(getAge(parseData(person)));\n"))),(0,p.kt)("p",null,"Basically, ",(0,p.kt)("inlineCode",{parentName:"p"},"parseData(person)")," is transformed into ",(0,p.kt)("inlineCode",{parentName:"p"},"person->parseData"),", and ",(0,p.kt)("inlineCode",{parentName:"p"},"getAge(person->parseData)")," is transformed into ",(0,p.kt)("inlineCode",{parentName:"p"},"person->parseData->getAge"),", etc."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"This works when the function takes more than one argument too"),"."),(0,p.kt)(l,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res"}),"a(one, two, three)\n")),(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"a(one, two, three);\n"))),(0,p.kt)("p",null,"is the same as"),(0,p.kt)(l,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res"}),"one->a(two, three)\n")),(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"a(one, two, three);\n"))),(0,p.kt)("p",null,"This also works with labeled arguments."),(0,p.kt)("p",null,"Pipes are used to emulate object-oriented programming, e.g. what's ",(0,p.kt)("inlineCode",{parentName:"p"},"myStudent.getName")," in other languages like Java would be ",(0,p.kt)("inlineCode",{parentName:"p"},"myStudent->getName")," in ReScript (aka ",(0,p.kt)("inlineCode",{parentName:"p"},"getName(myStudent)"),"). This allows us to have the readability of the good parts of OOP without its downside of dragging in a huge class system just to call a function on a piece of data."),(0,p.kt)("h2",{id:"tips--tricks"},"Tips & Tricks"),(0,p.kt)("p",null,"Do ",(0,p.kt)("strong",{parentName:"p"},"not")," to abuse pipes; they're a means to an end. Inexperienced engineers sometimes shape a library's API to take advantage of the pipe. This is backward."),(0,p.kt)("h2",{id:"js-method-chaining"},"JS Method Chaining"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"This section requires understanding of ",(0,p.kt)("a",(0,r.Z)({parentName:"em"},{href:"bind-to-js-function.md#object-method"}),"our binding API")),"."),(0,p.kt)("p",null,"JavaScript's APIs are often attached to objects, and often chainable, like so:"),(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"const result = [1, 2, 3].map(a => a + 1).filter(a => a % 2 === 0);\n\nasyncRequest()\n  .setWaitDuration(4000)\n  .send();\n")),(0,p.kt)("p",null,"Assuming we don't need the chaining behavior above, we'd bind to each case this using ",(0,p.kt)("inlineCode",{parentName:"p"},"bs.send")," from the aforementioned binding API page:"),(0,p.kt)(l,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"prelude",prelude:!0}),'@bs.send external map: (array<\'a>, \'a => \'b) => array<\'b> = "map"\n@bs.send external filter: (array<\'a>, \'a => bool) => array<\'a> = "filter"\n\ntype request\n@bs.val external asyncRequest: unit => request = "asyncRequest"\n@bs.send external setWaitDuration: (request, int) => request = "setWaitDuration"\n@bs.send external send: request => unit = "send"\n')),(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"// Empty output\n"))),(0,p.kt)("p",null,"You'd use them like this:"),(0,p.kt)(l,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"let result = Js.Array2.filter(\n  Js.Array2.map([1, 2, 3], a => a + 1),\n  a => mod(a, 2) == 0\n)\n\nsend(setWaitDuration(asyncRequest(), 4000))\n")),(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"var result = [1, 2, 3].map(function(a) {\n  return a + 1 | 0;\n}).filter(function(a) {\n  return a % 2 === 0;\n});\n\nasyncRequest().setWaitDuration(4000).send();\n"))),(0,p.kt)("p",null,"This looks much worse than the JS counterpart! Clean it up visually with pipe:"),(0,p.kt)(l,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"let result = [1, 2, 3]\n  ->map(a => a + 1)\n  ->filter(a => mod(a, 2) == 0)\n\nasyncRequest()->setWaitDuration(4000)->send\n")),(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"var result = [1, 2, 3].map(function(a) {\n  return a + 1 | 0;\n}).filter(function(a) {\n  return a % 2 === 0;\n});\n\nasyncRequest().setWaitDuration(4000).send();\n"))),(0,p.kt)("h2",{id:"pipe-into-variants"},"Pipe Into Variants"),(0,p.kt)("p",null,"You can pipe into a variant's constructor as if it was a function:"),(0,p.kt)(l,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res"}),"let result = name->preprocess->Some\n")),(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"var result = preprocess(name);\n"))),(0,p.kt)("p",null,"We turn this into:"),(0,p.kt)(l,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res"}),"let result = Some(preprocess(name))\n")),(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"var result = preprocess(name);\n"))),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Note")," that using a variant constructor as a function wouldn't work anywhere else beside here."),(0,p.kt)("h2",{id:"pipe-placeholders"},"Pipe Placeholders"),(0,p.kt)("p",null,"A placeholder is written as an underscore and it tells ReScript that you want to fill in an argument of a function later. These two have equivalent meaning:"),(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res"}),"let addTo7 = (x) => add3(3, x, 4)\nlet addTo7 = add3(3, _, 4)\n")),(0,p.kt)("p",null,"Sometimes you don't want to pipe the value you have into the first position. In these cases you can mark a placeholder value to show which argument you would like to pipe into."),(0,p.kt)("p",null,"Let's say you have a function ",(0,p.kt)("inlineCode",{parentName:"p"},"namePerson"),", which takes a ",(0,p.kt)("inlineCode",{parentName:"p"},"person")," then a ",(0,p.kt)("inlineCode",{parentName:"p"},"name")," argument. If you are transforming a person then pipe will work as-is:"),(0,p.kt)(l,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res"}),'makePerson(~age=47, ())\n  ->namePerson("Jane")\n')),(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),'namePerson(makePerson(47), "Jane");\n'))),(0,p.kt)("p",null,"If you have a name that you want to apply to a person object, you can use a placeholder:"),(0,p.kt)(l,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res"}),"getName(input)\n  ->namePerson(personDetails, _)\n")),(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"var __x = getName(input);\nnamePerson(personDetails, __x);\n"))),(0,p.kt)("p",null,"This allows you to pipe into any positional argument. It also works for named arguments:"),(0,p.kt)(l,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-res"}),"getName(input)\n  ->namePerson(~person=personDetails, ~name=_)\n")),(0,p.kt)("pre",null,(0,p.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-js"}),"var __x = getName(input);\nnamePerson(personDetails, __x);\n"))),(0,p.kt)("h2",{id:"triangle-pipe-deprecated"},"Triangle Pipe (Deprecated)"),(0,p.kt)("p",null,"You might see usages of another pipe, ",(0,p.kt)("inlineCode",{parentName:"p"},"|>"),", in some codebases. These are deprecated."),(0,p.kt)("p",null,"Unlike ",(0,p.kt)("inlineCode",{parentName:"p"},"->")," pipe, the ",(0,p.kt)("inlineCode",{parentName:"p"},"|>")," pipe puts the subject as the last (not first) argument of the function. ",(0,p.kt)("inlineCode",{parentName:"p"},"a |> f(b)")," turns into ",(0,p.kt)("inlineCode",{parentName:"p"},"f(b, a)"),"."),(0,p.kt)("p",null,"For a more thorough discussion on the rationale and differences between the two operators, please refer to the ",(0,p.kt)("a",(0,r.Z)({parentName:"p"},{href:"https://www.javierchavarri.com/data-first-and-data-last-a-comparison/"}),"Data-first and Data-last comparison by Javier Ch\xe1varri")))}u.isMDXComponent=!0,u.frontmatter={title:"Pipe",description:"The Pipe operator (->)",canonical:"/docs/manual/latest/pipe",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v9.0.0/pipe.mdx"}},93457:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v9.0.0/pipe",function(){return n(22514)}])}},function(e){e.O(0,[49774],(function(){return t=93457,e(e.s=t);var t}));var t=e.O();_N_E=t}]);