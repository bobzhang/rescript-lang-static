(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[92568],{22122:function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,{Z:function(){return r}})},17375:function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}n.d(t,{Z:function(){return r}})},3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"===typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=i,f=m["".concat(p,".").concat(d)]||m[d]||c[d]||o;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"===typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"===typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},96086:function(e){"use strict";var t=Object.assign.bind(Object);e.exports=t,e.exports.default=e.exports},67794:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return p}});var r=n(22122),i=n(17375),o=n(67294),a=n(3905),l=(o.createElement,{});function p(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"migrate-from-bucklescriptreason"},"Migrate from BuckleScript/Reason"),(0,a.kt)("p",null,"ReScript is a rebranding and cleanup of BuckleScript (since ",(0,a.kt)("inlineCode",{parentName:"p"},"v8.2.0"),") & Reason (",(0,a.kt)("inlineCode",{parentName:"p"},"v3.6"),") that enables us to ship a tighter compile-to-JS stack with more coherent documentation & tools. If you're an existing user of BuckleScript & Reason, here's the gist:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"ReScript is mostly just BuckleScript rebranded, with a new syntax that's like the Reason syntax, but catered more toward the JavaScript crowd."),(0,a.kt)("li",{parentName:"ul"},"All your existing code will keep working even if you don't upgrade.")),(0,a.kt)("h2",{id:"upgrade-your-codebase"},"Upgrade Your Codebase"),(0,a.kt)("p",null,"There are lots of exciting improvements in the new syntax (features, speed, error messages, etc.). The upgrade is trivial, backward-compatible and can be done on a per-file basis:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Upgrade your project to ",(0,a.kt)("inlineCode",{parentName:"li"},"bs-platform 8.2.0")," or later."),(0,a.kt)("li",{parentName:"ul"},"Choose a file to convert, for example ",(0,a.kt)("inlineCode",{parentName:"li"},"MyFile.re")),(0,a.kt)("li",{parentName:"ul"},"Compile your project and keep the generated JavaScript file around (probably ",(0,a.kt)("inlineCode",{parentName:"li"},"MyFile.bs.js")," but might depend on your ",(0,a.kt)("inlineCode",{parentName:"li"},"bsconfig.json")," config)."),(0,a.kt)("li",{parentName:"ul"},"Run ",(0,a.kt)("inlineCode",{parentName:"li"},"node_modules/.bin/bsc -format MyFile.re > MyFile.res"),"."),(0,a.kt)("li",{parentName:"ul"},"If your new ",(0,a.kt)("inlineCode",{parentName:"li"},"MyFile.res")," looks good, you can delete (or move/rename) ",(0,a.kt)("inlineCode",{parentName:"li"},"MyFile.re")," before compiling again your project (otherwise you will have an error ",(0,a.kt)("inlineCode",{parentName:"li"},"Invalid bsconfig.json implementation and interface have different path names or different cases MyFile vs MyFile")," because 2 files with the same module name (file basename)  cannot coexist in your project)."),(0,a.kt)("li",{parentName:"ul"},"Last thing you can do to ensure conversion is correct: build your project with the new ",(0,a.kt)("inlineCode",{parentName:"li"},"MyFile.res")," file to compare the newly generated JavaScript file with the old one. You should get almost identical generated JavaScript code.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"That's it"),"! ",(0,a.kt)("inlineCode",{parentName:"p"},"MyFile.re")," could be any ",(0,a.kt)("inlineCode",{parentName:"p"},".re"),", ",(0,a.kt)("inlineCode",{parentName:"p"},".rei"),", ",(0,a.kt)("inlineCode",{parentName:"p"},".ml")," and ",(0,a.kt)("inlineCode",{parentName:"p"},".mli")," file."),(0,a.kt)("p",null,"Enjoy the improved experience!"),(0,a.kt)("h3",{id:"upgrade-an-entire-folder"},"Upgrade an Entire Folder"),(0,a.kt)("p",null,"Please use this with caution. Migrating an entire codebase at once is an unnecessary risk.\nIt is recommended to migrate small portion of code to ensure correctness.\nThat being said, for small codebases or some tiny folders that are safely versioned, you can try the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",(0,r.Z)({parentName:"pre"},{className:"language-console"}),"for f in your-folder/**/*.re; do; node_modules/.bin/bsc -format $f > ${f%.re}.res && rm $f; done;\n")),(0,a.kt)("p",null,"This command loops on the ",(0,a.kt)("inlineCode",{parentName:"p"},".re")," files from the ",(0,a.kt)("inlineCode",{parentName:"p"},"your-folder")," folder, converts them with a proper ",(0,a.kt)("inlineCode",{parentName:"p"},".res")," extension, and asks you if you want to remove the previous file (check the newly created ",(0,a.kt)("inlineCode",{parentName:"p"},".res")," file first and refer to instructions above to follow the check to do on your generated JavaScript).\nIf you are confident enough, you can add ",(0,a.kt)("inlineCode",{parentName:"p"},"-f")," option to the ",(0,a.kt)("inlineCode",{parentName:"p"},"rm")," command to avoid all checks. This will convert your entire folder without any confirmations."),(0,a.kt)("h2",{id:"difference-with-old-reason"},"Difference With Old Reason"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Complete removal of semicolon (you can still write them)."),(0,a.kt)("li",{parentName:"ul"},"No need for parentheses around ",(0,a.kt)("inlineCode",{parentName:"li"},"if"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"switch")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"try"),"."),(0,a.kt)("li",{parentName:"ul"},"Type arguments: from ",(0,a.kt)("inlineCode",{parentName:"li"},"option(int)")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"option<int>"),"."),(0,a.kt)("li",{parentName:"ul"},"Old interpolated string: from ",(0,a.kt)("inlineCode",{parentName:"li"},"{j|hello ${name}|j}")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"j`hello ${name}`"),". Now with proper unicode support!"),(0,a.kt)("li",{parentName:"ul"},"New interpolated string: ",(0,a.kt)("inlineCode",{parentName:"li"},"`hello world`"),". Also supports multiline and unicode. ",(0,a.kt)("inlineCode",{parentName:"li"},'"hello world"')," string is now singleline."),(0,a.kt)("li",{parentName:"ul"},"Polymorphic variants: from ",(0,a.kt)("inlineCode",{parentName:"li"}," `red")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"#red"),"."),(0,a.kt)("li",{parentName:"ul"},"Arrays: from ",(0,a.kt)("inlineCode",{parentName:"li"},"[|1,2,3|]")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"[1,2,3]"),". In JS, arrays are the right default."),(0,a.kt)("li",{parentName:"ul"},"Lists: from ",(0,a.kt)("inlineCode",{parentName:"li"},"[1,2,3]")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"list[1,2,3]")," (",(0,a.kt)("em",{parentName:"li"},"8.1.1 update"),": now it is ",(0,a.kt)("inlineCode",{parentName:"li"},"list{1, 2, 3}"),"). This ties with upcoming plans to access containers in a uniform way: ",(0,a.kt)("inlineCode",{parentName:"li"},"set[...]")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"map[...]"),". Maybe temporary."),(0,a.kt)("li",{parentName:"ul"},"Exception: from ",(0,a.kt)("inlineCode",{parentName:"li"},'try (compute()) { | Not_found => Js.log("oops")}')," to ",(0,a.kt)("inlineCode",{parentName:"li"},'try compute() catch { | Not_found => Js.log("oops")}'),"."),(0,a.kt)("li",{parentName:"ul"},"First class module: from ",(0,a.kt)("inlineCode",{parentName:"li"},"(module S: Student)")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"module(S: Student)"),"."),(0,a.kt)("li",{parentName:"ul"},"No custom infix operator for now (including ",(0,a.kt)("inlineCode",{parentName:"li"},"mod"),")."),(0,a.kt)("li",{parentName:"ul"},"Object access: from ",(0,a.kt)("inlineCode",{parentName:"li"},"settings##visible #= true")," to ",(0,a.kt)("inlineCode",{parentName:"li"},'settings["visible"] = true'),". Rejoice!"),(0,a.kt)("li",{parentName:"ul"},"Object: from ",(0,a.kt)("inlineCode",{parentName:"li"},'Js.t({"age": int})')," to just ",(0,a.kt)("inlineCode",{parentName:"li"},'{"age": int}'),". The ",(0,a.kt)("inlineCode",{parentName:"li"},"Js.t")," part is now implicit."),(0,a.kt)("li",{parentName:"ul"},"Attribute: from ",(0,a.kt)("inlineCode",{parentName:"li"},'[@myAttribute "hello"]')," to ",(0,a.kt)("inlineCode",{parentName:"li"},'@myAttribute("hello")'),". From ",(0,a.kt)("inlineCode",{parentName:"li"},"[%re bla]")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"%re(bla)"),"."),(0,a.kt)("li",{parentName:"ul"},"Removed dereference syntax ",(0,a.kt)("inlineCode",{parentName:"li"},"result^"),". Just use ",(0,a.kt)("inlineCode",{parentName:"li"},"result.contents"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fun")," pattern matching syntax removed."),(0,a.kt)("li",{parentName:"ul"},"Type declaration is non-recursive by default, consistent with let bindings. To have recursive types, use ",(0,a.kt)("inlineCode",{parentName:"li"},"type rec myList<'a> = Nil | Cons('a, myList<'a>)"),"."),(0,a.kt)("li",{parentName:"ul"},"Use any words, including reserved keywords, as your identifier name: ",(0,a.kt)("inlineCode",{parentName:"li"},'let \\"try" = true'),".")))}p.isMDXComponent=!0,p.frontmatter={title:"Migrate to ReScript Syntax",description:"Instructions on upgrading from Reason to ReScript",canonical:"/docs/manual/latest/migrate-to-new-syntax",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v9.0.0/migrate-from-bucklescript-reason.mdx"}},67595:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v9.0.0/migrate-from-bucklescript-reason",function(){return n(67794)}])}},function(e){e.O(0,[49774],(function(){return t=67595,e(e.s=t);var t}));var t=e.O();_N_E=t}]);