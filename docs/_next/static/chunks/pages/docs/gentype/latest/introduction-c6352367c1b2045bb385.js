(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3891],{17375:function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}n.d(t,{Z:function(){return r}})},78385:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return c}});var r=n(96156),o=n(17375),a=(n(67294),n(3905));function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var s={};function c(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",i(i(i({},s),n),{},{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",i({},{id:"gentype"}),"GenType"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"genType")," is a code generation tool that lets you export ReScript values and types to use in JavaScript, and import JavaScript values and types into ReScript."),(0,a.kt)("p",null,"Converter functions between the two representations are generated based on the type of the value. The converters can be generated in vanilla JavaScript, or in ",(0,a.kt)("a",i({parentName:"p"},{href:"https://www.typescriptlang.org/"}),"TypeScript")," / ",(0,a.kt)("a",i({parentName:"p"},{href:"https://flow.org/en/"}),"Flow")," for a type-safe idiomatic interface.\nIn particular, conversion of ",(0,a.kt)("a",i({parentName:"p"},{href:"/docs/react/latest/introduction"}),"rescript-react")," components both ways is supported, with automatic generation of the wrappers."),(0,a.kt)("p",null,"Here's an article describing how to use ",(0,a.kt)("inlineCode",{parentName:"p"},"genType")," as part of a migration strategy where a tree of components is gradually converted to ReScript bottom-up (old article containing Reason / BuckleScript): ",(0,a.kt)("a",i({parentName:"p"},{href:"https://medium.com/p/c514265b466d"}),"Adopting Reason: strategies, dual sources of truth, and why genType is a big deal"),"."),(0,a.kt)("p",null,"The implementation of genType performs a type-directed transformation of ReScript programs after ReScript source code compilation. The transformed programs operate on data types idiomatic to JS."),(0,a.kt)("p",null,"For example, a ReScript function operating on a ReScript variant ",(0,a.kt)("inlineCode",{parentName:"p"},"type t  = | A(int) | B(string)")," (which is represented as custom blocks at runtime) is exported to a JS function operating on the corresponding JS object of type ",(0,a.kt)("inlineCode",{parentName:"p"},'{ tag: "A"; value: number }\n  | { tag: "B"; value: string }'),"."),(0,a.kt)("p",null,"The output of genType can be configured by using one of 3 back-ends: ",(0,a.kt)("inlineCode",{parentName:"p"},"untyped")," to generate wrappers in vanilla JS, ",(0,a.kt)("inlineCode",{parentName:"p"},"typescript")," to generate ",(0,a.kt)("a",i({parentName:"p"},{href:"https://www.typescriptlang.org/"}),"TypeScript"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"flow")," to generate JS with ",(0,a.kt)("a",i({parentName:"p"},{href:"https://flow.org/en/"}),"Flow")," type annotations."),(0,a.kt)("h2",i({},{id:"a-quick-example"}),"A Quick Example"),(0,a.kt)("p",null,"Let's assume we are working on a TypeScript (TS) codebase and we want to integrate a single rescript-react component."),(0,a.kt)("p",null,"We want to be able to import the rescript-react component like any other React component in our existing TS code, but we also want to preserve all the ReScript types in the TS type system (and convert incompatible values if necessary)."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"That's exactly what genType was made for!")),(0,a.kt)("p",null,"First we'll set up a rescript-react component:"),(0,a.kt)("pre",null,(0,a.kt)("code",i({parentName:"pre"},{className:"language-res"}),'/* src/MyComp.res */\n\n@genType\ntype color =\n  | Red\n  | Blue;\n\n@genType\n@react.component\nlet make = (~name: string, ~color: color) => {\n  let colorStr =\n    switch (color) {\n    | Red => "red"\n    | Blue => "blue"\n    };\n\n  <div className={"color-" ++ colorStr}> {React.string(name)} </div>;\n};\n')),(0,a.kt)("p",null,"On a successful compile, ",(0,a.kt)("inlineCode",{parentName:"p"},"genType")," will convert ",(0,a.kt)("inlineCode",{parentName:"p"},"src/MyComp.res")," to a TS file called ",(0,a.kt)("inlineCode",{parentName:"p"},"src/MyComp.gen.ts")," which will look something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",i({parentName:"pre"},{className:"language-ts"}),'// src/MyComp.gen.tsx\n\n/* TypeScript file generated from MyComp.res by genType. */\n/* eslint-disable import/first */\n\n\nimport * as React from \'react\';\n\nconst $$toRE818596289: { [key: string]: any } = {"Red": 0, "Blue": 1};\n\n// tslint:disable-next-line:no-var-requires\nconst MyCompBS = require(\'./MyComp.bs\');\n\n// tslint:disable-next-line:interface-over-type-literal\nexport type color = "Red" | "Blue";\n\n// tslint:disable-next-line:interface-over-type-literal\nexport type Props = { readonly color: color; readonly name: string };\n\nexport const make: React.ComponentType<{ readonly color: color; readonly name: string }> = function MyComp(Arg1: any) {\n  const $props = {color:$$toRE818596289[Arg1.color], name:Arg1.name};\n  const result = React.createElement(MyCompBS.make, $props);\n  return result\n};\n')),(0,a.kt)("p",null,"genType automatically maps the ",(0,a.kt)("inlineCode",{parentName:"p"},"color")," variant to TS via a string union type ",(0,a.kt)("inlineCode",{parentName:"p"},'color = "Red" | "Blue"'),", and also provides all the converters to convert between the ReScript & TS representation as well."),(0,a.kt)("p",null,"Therefore way we can seamlessly use ReScript specific data structures within TS without writing the converter code by hand!"),(0,a.kt)("p",null,"Within our TypeScript application, we can now import and use the React component in the following manner:"),(0,a.kt)("pre",null,(0,a.kt)("code",i({parentName:"pre"},{className:"language-ts"}),'// src/App.ts\nimport { make as MyComp } from "./MyComp.gen.tsx";\n\nconst App = () => {\n  return (<div>\n    <h1> My Component </h1>\n    <MyComp color="Blue" name="ReScript & TypeScript" />\n  </div>);\n};\n')),(0,a.kt)("p",null,"That's it for our quick example."),(0,a.kt)("p",null,"For detailed information, head to the ",(0,a.kt)("a",i({parentName:"p"},{href:"getting-started"}),"Getting Started")," or ",(0,a.kt)("a",i({parentName:"p"},{href:"usage"}),"Usage")," section."),(0,a.kt)("h2",i({},{id:"development"}),"Development"),(0,a.kt)("p",null,"For contributions, issues or questions, please refer to the ",(0,a.kt)("a",i({parentName:"p"},{href:"https://github.com/reason-association/genType"}),"Github repository")," or our ",(0,a.kt)("a",i({parentName:"p"},{href:"https://forum.rescript-lang.org"}),"ReScript forum"),"."))}c.isMDXComponent=!0,c.frontmatter={title:"Introduction",description:"GenType - Interoperability between ReScript and TypeScript / Flow",canonical:"/docs/gentype/latest/introduction",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/gentype/latest/introduction.mdx"}},83809:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/gentype/latest/introduction",function(){return n(78385)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=83809,e(e.s=t);var t}));var t=e.O();_N_E=t}]);