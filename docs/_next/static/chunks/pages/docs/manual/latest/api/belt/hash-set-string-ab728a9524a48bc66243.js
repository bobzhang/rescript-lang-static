(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9477],{17375:function(e,t,r){"use strict";function a(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}r.d(t,{Z:function(){return a}})},28158:function(e,t,r){"use strict";r.r(t),r.d(t,{default:function(){return c}});var a=r(17375),n=r(96156),s=(r(67294),r(3905));function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){(0,n.Z)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var o,g=(o="Intro",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",l({},e))}),p={};function c(e){var t=e.components,r=(0,a.Z)(e,["components"]);return(0,s.kt)("wrapper",l(l(l({},p),r),{},{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",l({},{id:"hashsetstring"}),"HashSetString"),(0,s.kt)(g,{mdxType:"Intro"},(0,s.kt)("p",null,"This module is ",(0,s.kt)("inlineCode",{parentName:"p"},"Belt.HashSet")," specialized with key type to be a primitive type."),(0,s.kt)("p",null,"It is more efficient in general, the API is the same with ",(0,s.kt)("inlineCode",{parentName:"p"},"Belt.HashSet")," except its key type is fixed, and identity is not needed(using the built-in one).")),(0,s.kt)("h2",l({},{id:"key"}),"key"),(0,s.kt)("pre",null,(0,s.kt)("code",l({parentName:"pre"},{className:"language-res",metastring:"prelude",prelude:!0}),"type key = string\n")),(0,s.kt)("h2",l({},{id:"t"}),"t"),(0,s.kt)("pre",null,(0,s.kt)("code",l({parentName:"pre"},{className:"language-res",metastring:"prelude",prelude:!0}),"type t\n")),(0,s.kt)("h2",l({},{id:"make"}),"make"),(0,s.kt)("pre",null,(0,s.kt)("code",l({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let make: (~hintSize: int) => t\n")),(0,s.kt)("h2",l({},{id:"clear"}),"clear"),(0,s.kt)("pre",null,(0,s.kt)("code",l({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let clear: t => unit\n")),(0,s.kt)("h2",l({},{id:"isempty"}),"isEmpty"),(0,s.kt)("pre",null,(0,s.kt)("code",l({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let isEmpty: t => bool\n")),(0,s.kt)("h2",l({},{id:"add"}),"add"),(0,s.kt)("pre",null,(0,s.kt)("code",l({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let add: (t, key) => unit\n")),(0,s.kt)("h2",l({},{id:"copy"}),"copy"),(0,s.kt)("pre",null,(0,s.kt)("code",l({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let copy: t => t\n")),(0,s.kt)("h2",l({},{id:"has"}),"has"),(0,s.kt)("pre",null,(0,s.kt)("code",l({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let has: (t, key) => bool\n")),(0,s.kt)("h2",l({},{id:"remove"}),"remove"),(0,s.kt)("pre",null,(0,s.kt)("code",l({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let remove: (t, key) => unit\n")),(0,s.kt)("h2",l({},{id:"foreachu"}),"forEachU"),(0,s.kt)("pre",null,(0,s.kt)("code",l({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let forEachU: (t, (. key) => unit) => unit\n")),(0,s.kt)("h2",l({},{id:"foreach"}),"forEach"),(0,s.kt)("pre",null,(0,s.kt)("code",l({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let forEach: (t, key => unit) => unit\n")),(0,s.kt)("h2",l({},{id:"reduceu"}),"reduceU"),(0,s.kt)("pre",null,(0,s.kt)("code",l({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let reduceU: (t, 'c, (. 'c, key) => 'c) => 'c\n")),(0,s.kt)("h2",l({},{id:"reduce"}),"reduce"),(0,s.kt)("pre",null,(0,s.kt)("code",l({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let reduce: (t, 'c, ('c, key) => 'c) => 'c\n")),(0,s.kt)("h2",l({},{id:"size"}),"size"),(0,s.kt)("pre",null,(0,s.kt)("code",l({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let size: t => int\n")),(0,s.kt)("h2",l({},{id:"logstats"}),"logStats"),(0,s.kt)("pre",null,(0,s.kt)("code",l({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let logStats: t => unit\n")),(0,s.kt)("h2",l({},{id:"toarray"}),"toArray"),(0,s.kt)("pre",null,(0,s.kt)("code",l({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let toArray: t => array<key>\n")),(0,s.kt)("h2",l({},{id:"fromarray"}),"fromArray"),(0,s.kt)("pre",null,(0,s.kt)("code",l({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let fromArray: array<key> => t\n")),(0,s.kt)("h2",l({},{id:"mergemany"}),"mergeMany"),(0,s.kt)("pre",null,(0,s.kt)("code",l({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let mergeMany: (t, array<key>) => unit\n")),(0,s.kt)("h2",l({},{id:"getbuckethistogram"}),"getBucketHistogram"),(0,s.kt)("pre",null,(0,s.kt)("code",l({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let getBucketHistogram: t => array<int>\n")))}c.isMDXComponent=!0,c.frontmatter={__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/latest/api/belt/hash-set-string.mdx"}},28668:function(e,t,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/latest/api/belt/hash-set-string",function(){return r(28158)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=28668,e(e.s=t);var t}));var t=e.O();_N_E=t}]);