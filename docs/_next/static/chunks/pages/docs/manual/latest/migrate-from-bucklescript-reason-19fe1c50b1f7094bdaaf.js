(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[20380],{17375:function(e,t,n){"use strict";function i(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}n.d(t,{Z:function(){return i}})},88221:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return p}});var i=n(96156),r=n(17375),a=(n(67294),n(3905));function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var s={};function p(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,a.kt)("wrapper",l(l(l({},s),n),{},{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",l({},{id:"migrate-from-bucklescriptreason"}),"Migrate from BuckleScript/Reason"),(0,a.kt)("p",null,"ReScript is a rebranding and cleanup of BuckleScript (since ",(0,a.kt)("inlineCode",{parentName:"p"},"v8.2.0"),") & Reason (",(0,a.kt)("inlineCode",{parentName:"p"},"v3.6"),") that enables us to ship a tighter compile-to-JS stack with more coherent documentation & tools. If you're an existing user of BuckleScript & Reason, here's the gist:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"ReScript is mostly just BuckleScript rebranded, with a new syntax that's like the Reason syntax, but catered more toward the JavaScript crowd."),(0,a.kt)("li",{parentName:"ul"},"All your existing code will keep working even if you don't upgrade.")),(0,a.kt)("h2",l({},{id:"upgrade-your-codebase"}),"Upgrade Your Codebase"),(0,a.kt)("p",null,"There are lots of exciting improvements in the new syntax (features, speed, error messages, etc.). The upgrade is trivial, backward-compatible and can be done on a per-file basis:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{}),"npm install rescript@9 --save-dev\n\n# Also works with .rei / .ml / .mli / etc\nnpx rescript convert src/MyFile.re\n")),(0,a.kt)("p",null,"Enjoy the improved experience!"),(0,a.kt)("h3",l({},{id:"upgrade-individual-folders"}),"Upgrade Individual Folders"),(0,a.kt)("p",null,"This is useful for per-directory convertions:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-console"}),"# *.rei, *.ml, *.mli,....\nfor f in your-folder/**/*.re; do; node_modules/rescript convert $f && rm $f; done;\n")),(0,a.kt)("h3",l({},{id:"upgrade-an-entire-codebase"}),"Upgrade an Entire Codebase"),(0,a.kt)("p",null,"In case you are confident in converting your codebase in one step, use the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{}),"npx rescript convert -all\n")),(0,a.kt)("h2",l({},{id:"difference-with-old-reason"}),"Difference With Old Reason"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Complete removal of semicolon (you can still write them)."),(0,a.kt)("li",{parentName:"ul"},"No need for parentheses around ",(0,a.kt)("inlineCode",{parentName:"li"},"if"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"switch")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"try"),"."),(0,a.kt)("li",{parentName:"ul"},"Type arguments: from ",(0,a.kt)("inlineCode",{parentName:"li"},"option(int)")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"option<int>"),"."),(0,a.kt)("li",{parentName:"ul"},"Old interpolated string: from ",(0,a.kt)("inlineCode",{parentName:"li"},"{j|hello ${name}|j}")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"j`hello ${name}`"),". Now with proper unicode support!"),(0,a.kt)("li",{parentName:"ul"},"New interpolated string: ",(0,a.kt)("inlineCode",{parentName:"li"},"`hello world`"),". Also supports multiline and unicode. ",(0,a.kt)("inlineCode",{parentName:"li"},'"hello world"')," string is now singleline."),(0,a.kt)("li",{parentName:"ul"},"Polymorphic variants: from ",(0,a.kt)("inlineCode",{parentName:"li"}," `red")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"#red"),"."),(0,a.kt)("li",{parentName:"ul"},"Arrays: from ",(0,a.kt)("inlineCode",{parentName:"li"},"[|1,2,3|]")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"[1,2,3]"),". In JS, arrays are the right default."),(0,a.kt)("li",{parentName:"ul"},"Lists: from ",(0,a.kt)("inlineCode",{parentName:"li"},"[1,2,3]")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"list[1,2,3]")," (",(0,a.kt)("em",{parentName:"li"},"8.1.1 update"),": now it is ",(0,a.kt)("inlineCode",{parentName:"li"},"list{1, 2, 3}"),"). This ties with upcoming plans to access containers in a uniform way: ",(0,a.kt)("inlineCode",{parentName:"li"},"set[...]")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"map[...]"),". Maybe temporary."),(0,a.kt)("li",{parentName:"ul"},"Exception: from ",(0,a.kt)("inlineCode",{parentName:"li"},'try (compute()) { | Not_found => Js.log("oops")}')," to ",(0,a.kt)("inlineCode",{parentName:"li"},'try compute() catch { | Not_found => Js.log("oops")}'),"."),(0,a.kt)("li",{parentName:"ul"},"First class module: from ",(0,a.kt)("inlineCode",{parentName:"li"},"(module S: Student)")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"module(S: Student)"),"."),(0,a.kt)("li",{parentName:"ul"},"No custom infix operator for now (including ",(0,a.kt)("inlineCode",{parentName:"li"},"mod"),")."),(0,a.kt)("li",{parentName:"ul"},"Object access: from ",(0,a.kt)("inlineCode",{parentName:"li"},"settings##visible #= true")," to ",(0,a.kt)("inlineCode",{parentName:"li"},'settings["visible"] = true'),". Rejoice!"),(0,a.kt)("li",{parentName:"ul"},"Object: from ",(0,a.kt)("inlineCode",{parentName:"li"},'Js.t({"age": int})')," to just ",(0,a.kt)("inlineCode",{parentName:"li"},'{"age": int}'),". The ",(0,a.kt)("inlineCode",{parentName:"li"},"Js.t")," part is now uneeded."),(0,a.kt)("li",{parentName:"ul"},"Attribute: from ",(0,a.kt)("inlineCode",{parentName:"li"},'[@myAttribute "hello"]')," to ",(0,a.kt)("inlineCode",{parentName:"li"},'@myAttribute("hello")'),". From ",(0,a.kt)("inlineCode",{parentName:"li"},"[%re bla]")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"%re(bla)"),"."),(0,a.kt)("li",{parentName:"ul"},"Removed dereference syntax ",(0,a.kt)("inlineCode",{parentName:"li"},"result^"),". Just use ",(0,a.kt)("inlineCode",{parentName:"li"},"result.contents"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fun")," pattern matching syntax removed."),(0,a.kt)("li",{parentName:"ul"},"Type declaration is non-recursive by default, consistent with let bindings. To have recursive types, use ",(0,a.kt)("inlineCode",{parentName:"li"},"type rec myList<'a> = Nil | Cons('a, myList<'a>)"),"."),(0,a.kt)("li",{parentName:"ul"},"Use any words, including reserved keywords, as your identifier name: ",(0,a.kt)("inlineCode",{parentName:"li"},'let \\"try" = true'),".")))}p.isMDXComponent=!0,p.frontmatter={title:"Migrate to ReScript Syntax",description:"Instructions on upgrading from Reason to ReScript",canonical:"/docs/manual/latest/migrate-to-new-syntax",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/latest/migrate-from-bucklescript-reason.mdx"}},77178:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/latest/migrate-from-bucklescript-reason",function(){return n(88221)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=77178,e(e.s=t);var t}));var t=e.O();_N_E=t}]);