(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[84479],{17375:function(e,n,t){"use strict";function a(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}t.d(n,{Z:function(){return a}})},69754:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return c}});var a=t(17375),r=t(96156),l=(t(67294),t(3905));function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){(0,r.Z)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var s,p=(s="CodeTab",function(e){return console.warn("Component "+s+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",i({},e))}),u={};function c(e){var n=e.components,t=(0,a.Z)(e,["components"]);return(0,l.kt)("wrapper",i(i(i({},u),t),{},{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",i({},{id:"if-else--loops"}),"If-Else & Loops"),(0,l.kt)("p",null,"ReScript supports ",(0,l.kt)("inlineCode",{parentName:"p"},"if"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"else"),", ternary expression (",(0,l.kt)("inlineCode",{parentName:"p"},"a ? b : c"),"), ",(0,l.kt)("inlineCode",{parentName:"p"},"for")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"while"),"."),(0,l.kt)("p",null,"ReScript also supports our famous pattern matching, which will be covered in ",(0,l.kt)("a",i({parentName:"p"},{href:"pattern-matching-destructuring.md"}),"its own section")),(0,l.kt)("h2",i({},{id:"if-else--ternary"}),"If-Else & Ternary"),(0,l.kt)("p",null,"Unlike its JavaScript counterpart, ReScript's ",(0,l.kt)("inlineCode",{parentName:"p"},"if")," is an expression; they evaluate to their body's content:"),(0,l.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",i({parentName:"pre"},{className:"language-res"}),'let message = if isMorning {\n  "Good morning!"\n} else {\n  "Hello!"\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",i({parentName:"pre"},{className:"language-js"}),'var message = isMorning ? "Good morning!" : "Hello!";\n'))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Note:")," an ",(0,l.kt)("inlineCode",{parentName:"p"},"if-else")," expression without the final ",(0,l.kt)("inlineCode",{parentName:"p"},"else")," branch implicitly gives ",(0,l.kt)("inlineCode",{parentName:"p"},"()")," (aka the ",(0,l.kt)("inlineCode",{parentName:"p"},"unit")," type). So this:"),(0,l.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",i({parentName:"pre"},{className:"language-res"}),"if showMenu {\n  displayMenu()\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",i({parentName:"pre"},{className:"language-js"}),"if (showMenu) {\n  displayMenu();\n}\n"))),(0,l.kt)("p",null,"is basically the same as:"),(0,l.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",i({parentName:"pre"},{className:"language-res"}),"if showMenu {\n  displayMenu()\n} else {\n  ()\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",i({parentName:"pre"},{className:"language-js"}),"if (showMenu) {\n  displayMenu()\n}\n"))),(0,l.kt)("p",null,"Here's another way to look at it. This is clearly wrong:"),(0,l.kt)("pre",null,(0,l.kt)("code",i({parentName:"pre"},{className:"language-res"}),"let result = if showMenu {\n  1 + 2\n}\n")),(0,l.kt)("p",null,"It'll give a type error, saying basically that the implicit ",(0,l.kt)("inlineCode",{parentName:"p"},"else")," branch has the type ",(0,l.kt)("inlineCode",{parentName:"p"},"unit")," while the ",(0,l.kt)("inlineCode",{parentName:"p"},"if")," branch has type ",(0,l.kt)("inlineCode",{parentName:"p"},"int"),". Intuitively, this makes sense: what would ",(0,l.kt)("inlineCode",{parentName:"p"},"result"),"'s value be, if ",(0,l.kt)("inlineCode",{parentName:"p"},"showMenu")," was ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"?"),(0,l.kt)("p",null,"We also have ternary sugar, but ",(0,l.kt)("strong",{parentName:"p"},"we encourage you to prefer if-else when possible"),"."),(0,l.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",i({parentName:"pre"},{className:"language-res"}),'let message = isMorning ? "Good morning!" : "Hello!"\n')),(0,l.kt)("pre",null,(0,l.kt)("code",i({parentName:"pre"},{className:"language-js"}),'var message = isMorning ? "Good morning!" : "Hello!";\n'))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"if-else")," and ternary are much less used")," in ReScript than in other languages; ",(0,l.kt)("a",i({parentName:"p"},{href:"pattern-matching-destructuring.md"}),"Pattern-matching")," kills a whole category of code that previously required conditionals."),(0,l.kt)("h2",i({},{id:"for-loops"}),"For Loops"),(0,l.kt)("p",null,"For loops iterate from a starting value up to (and including) the ending value."),(0,l.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",i({parentName:"pre"},{className:"language-res"}),"for i in startValueInclusive to endValueInclusive {\n  Js.log(i)\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",i({parentName:"pre"},{className:"language-js"}),"for(var i = startValueInclusive; i <= endValueInclusive; ++i){\n  console.log(i);\n}\n"))),(0,l.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",i({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"// prints: 1 2 3, one per line\nfor x in 1 to 3 {\n  Js.log(x)\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",i({parentName:"pre"},{className:"language-js"}),"for(var x = 1; x <= 3; ++x){\n  console.log(x);\n}\n"))),(0,l.kt)("p",null,"You can make the ",(0,l.kt)("inlineCode",{parentName:"p"},"for")," loop count in the opposite direction by using ",(0,l.kt)("inlineCode",{parentName:"p"},"downto"),"."),(0,l.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",i({parentName:"pre"},{className:"language-res"}),"for i in startValueInclusive downto endValueInclusive {\n  Js.log(i)\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",i({parentName:"pre"},{className:"language-js"}),"for(var i = startValueInclusive; i >= endValueInclusive; --i){\n  console.log(i);\n}\n"))),(0,l.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",i({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"// prints: 3 2 1, one per line\nfor x in 3 downto 1 {\n  Js.log(x)\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",i({parentName:"pre"},{className:"language-js"}),"for(var x = 3; x >= 1; --x){\n  console.log(x);\n}\n"))),(0,l.kt)("h2",i({},{id:"while-loops"}),"While Loops"),(0,l.kt)("p",null,"While loops execute its body code block while its condition is true."),(0,l.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",i({parentName:"pre"},{className:"language-res"}),"while testCondition {\n  // body here\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",i({parentName:"pre"},{className:"language-js"}),"while (testCondition) {\n  // body here\n}\n"))),(0,l.kt)("h3",i({},{id:"tips--tricks"}),"Tips & Tricks"),(0,l.kt)("p",null,"There's no loop-breaking ",(0,l.kt)("inlineCode",{parentName:"p"},"break")," keyword (nor early ",(0,l.kt)("inlineCode",{parentName:"p"},"return")," from functions, for that matter) in ReScript. However, we can break out of a while loop easily through using a ",(0,l.kt)("a",i({parentName:"p"},{href:"mutation.md"}),"mutable binding"),"."),(0,l.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",i({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'let break = ref(false)\n\nwhile !break.contents {\n  if Js.Math.random() > 0.3 {\n    break := true\n  } else {\n    Js.log("Still running")\n  }\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",i({parentName:"pre"},{className:"language-js"}),'var $$break = {\n  contents: false\n};\n\nwhile(!$$break.contents) {\n  if (Math.random() > 0.3) {\n    $$break.contents = true;\n  } else {\n    console.log("Still running");\n  }\n};\n'))))}c.isMDXComponent=!0,c.frontmatter={title:"If-Else & Loops",description:"If, else, ternary, for, and while",canonical:"/docs/manual/latest/control-flow",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/latest/control-flow.mdx"}},26759:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/latest/control-flow",function(){return t(69754)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return n=26759,e(e.s=n);var n}));var n=e.O();_N_E=n}]);