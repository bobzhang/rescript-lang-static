(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[49699],{17375:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}n.d(t,{Z:function(){return a}})},78095:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return g}});var a=n(17375),r=n(96156),i=(n(67294),n(3905));function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var p,o=(p="Intro",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",s({},e))}),m={};function g(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",s(s(s({},m),n),{},{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",s({},{id:"vector"}),"Vector"),(0,i.kt)(o,{mdxType:"Intro"},(0,i.kt)("p",null,"Provide vector utilities.")),(0,i.kt)("h2",s({},{id:"t"}),"t"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"prelude",prelude:!0}),"type t<'a> = array<'a>\n")),(0,i.kt)("h2",s({},{id:"filterinplace"}),"filterInPlace"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let filterInPlace: ((. 'a) => bool, t<'a>) => unit\n")),(0,i.kt)("p",null,"p : predicate\na : array"),(0,i.kt)("h2",s({},{id:"empty"}),"empty"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let empty: t<'a> => unit\n")),(0,i.kt)("h2",s({},{id:"pushback"}),"pushBack"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let pushBack: ('a, t<'a>) => unit\n")),(0,i.kt)("h2",s({},{id:"copy"}),"copy"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let copy: t<'a> => t<'a>\n")),(0,i.kt)("p",null,"Create a shallow copy of a vector."),(0,i.kt)("h2",s({},{id:"membyref"}),"memByRef"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let memByRef: ('a, t<'a>) => bool\n")),(0,i.kt)("p",null,"Find by JS (===) equality."),(0,i.kt)("h2",s({},{id:"iter"}),"iter"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let iter: ((. 'a) => unit, t<'a>) => unit\n")),(0,i.kt)("h2",s({},{id:"iteri"}),"iteri"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let iteri: ((. int, 'a) => unit, t<'a>) => unit\n")),(0,i.kt)("h2",s({},{id:"tolist"}),"toList"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let toList: t<'a> => list<'a>\n")),(0,i.kt)("h2",s({},{id:"map"}),"map"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let map: ((. 'a) => 'b, t<'a>) => t<'b>\n")),(0,i.kt)("h2",s({},{id:"mapi"}),"mapi"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let mapi: ((. int, 'a) => 'b, t<'a>) => t<'b>\n")),(0,i.kt)("h2",s({},{id:"foldleft"}),"foldLeft"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let foldLeft: ((. 'a, 'b) => 'a, 'a, t<'b>) => 'a\n")),(0,i.kt)("h2",s({},{id:"foldright"}),"foldRight"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let foldRight: ((. 'b, 'a) => 'a, t<'b>, 'a) => 'a\n")),(0,i.kt)("h2",s({},{id:"length"}),"length"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let length: t<'a> => int\n")),(0,i.kt)("p",null,"Return the length (number of elements) of the given array."),(0,i.kt)("h2",s({},{id:"get"}),"get"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let get: (t<'a>, int) => 'a\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Vector.get(a, n)")," returns the element number ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," of vector ",(0,i.kt)("inlineCode",{parentName:"p"},"a"),". The first element has number 0. The last element has number ",(0,i.kt)("inlineCode",{parentName:"p"},"Vector.length(a) - 1"),". You can also write ",(0,i.kt)("inlineCode",{parentName:"p"},"a[n]")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"Vector.get(a, n)"),".\nRaise ",(0,i.kt)("inlineCode",{parentName:"p"},'Invalid_argument "index out of bounds"')," if ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," is outside the range 0 to (",(0,i.kt)("inlineCode",{parentName:"p"},"Array.length(a) - 1"),")."),(0,i.kt)("h2",s({},{id:"set"}),"set"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let set: (t<'a>, int, 'a) => unit\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Vector.set(a, n, x)")," modifies vector ",(0,i.kt)("inlineCode",{parentName:"p"},"a")," in place, replacing element number ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"x"),".\nRaise ",(0,i.kt)("inlineCode",{parentName:"p"},'Invalid_argument "index out of bounds"')," if ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," is outside the range 0 to ",(0,i.kt)("inlineCode",{parentName:"p"},"Array.length(a) - 1"),"."),(0,i.kt)("h2",s({},{id:"make"}),"make"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let make: (int, 'a) => t<'a>\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Vector.make(n, x)")," returns a fresh vector of length ",(0,i.kt)("inlineCode",{parentName:"p"},"n"),", initialized with ",(0,i.kt)("inlineCode",{parentName:"p"},"x"),". All the elements of this new vector are initially physically equal to ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," (in the sense of the ",(0,i.kt)("inlineCode",{parentName:"p"},"==")," predicate).\nConsequently, if ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," is mutable, it is shared among all elements of the array, and modifying ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," through one of the array entries will modify all other entries at the same time.\nRaise ",(0,i.kt)("inlineCode",{parentName:"p"},"Invalid_argument")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"n < 0")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"n > Sys.max_array_length"),". If the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," is a floating-point number, then the maximum size is only ",(0,i.kt)("inlineCode",{parentName:"p"},"Sys.max_array_length / 2"),"."),(0,i.kt)("h2",s({},{id:"init"}),"init"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let init: (int, (. int) => 'a) => t<'a>\n")),(0,i.kt)("p",null,"Raises ",(0,i.kt)("inlineCode",{parentName:"p"},"RangeError")," when n is negative.\nn : size"),(0,i.kt)("h2",s({},{id:"append"}),"append"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let append: ('a, t<'a>) => t<'a>\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"append(x, a)")," returns a fresh vector with ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," appended to ",(0,i.kt)("inlineCode",{parentName:"p"},"a"),"."),(0,i.kt)("h2",s({},{id:"unsafe_get"}),"unsafe_get"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let unsafe_get: (t<'a>, int) => 'a\n")),(0,i.kt)("h2",s({},{id:"unsafe_set"}),"unsafe_set"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let unsafe_set: (t<'a>, int, 'a) => unit\n")))}g.isMDXComponent=!0,g.frontmatter={__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/latest/api/js/vector.mdx"}},95251:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/latest/api/js/vector",function(){return n(78095)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=95251,e(e.s=t);var t}));var t=e.O();_N_E=t}]);