(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[32803],{17375:function(e,n,t){"use strict";function i(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}t.d(n,{Z:function(){return i}})},94663:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return s}});var i=t(96156),a=t(17375),r=(t(67294),t(3905));function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){(0,i.Z)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var o={};function s(e){var n=e.components,t=(0,a.Z)(e,["components"]);return(0,r.kt)("wrapper",p(p(p({},o),t),{},{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",p({},{id:"pinned-dependencies"}),"Pinned Dependencies"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Since 8.4")),(0,r.kt)("p",null,"Usually we'd recommend to use ReScript in a single-codebase style by using one ",(0,r.kt)("inlineCode",{parentName:"p"},"bsconfig.json")," file for your whole codebase."),(0,r.kt)("p",null,"There are scenarios where you still want to connect and build multiple independent ReScript packages for one main project though (",(0,r.kt)("inlineCode",{parentName:"p"},"npm"),' workspaces-like "monorepos"). This is where ',(0,r.kt)("inlineCode",{parentName:"p"},"pinned-dependencies")," come into play."),(0,r.kt)("h2",p({},{id:"package-types"}),"Package Types"),(0,r.kt)("p",null,"Before we go into detail, let's first explain all the different package types recognized by the build system:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Toplevel (this is usually the final app you are building, which has dependencies to other packages)"),(0,r.kt)("li",{parentName:"ul"},"Pinned dependencies (these are your local packages that should always rebuild when you build your toplevel, those should be listed in ",(0,r.kt)("inlineCode",{parentName:"li"},"bs-dependencies")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"pinned-dependencies"),")"),(0,r.kt)("li",{parentName:"ul"},"Normal dependencies (these are packages that are consumed from npm and listed via ",(0,r.kt)("inlineCode",{parentName:"li"},"bs-dependencies"),")")),(0,r.kt)("p",null,"Whenever a package is being built (",(0,r.kt)("inlineCode",{parentName:"p"},"rescript build"),"), the build system will build the toplevel package with its pinned-dependencies. So any changes made in a pinned dependency will automatically be reflected in the final app."),(0,r.kt)("h2",p({},{id:"build-system-package-rules"}),"Build System Package Rules"),(0,r.kt)("p",null,"The build system respects the following rules for each package type:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Toplevel")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Warnings reported"),(0,r.kt)("li",{parentName:"ul"},"Warn-error respected"),(0,r.kt)("li",{parentName:"ul"},"Builds dev dependencies"),(0,r.kt)("li",{parentName:"ul"},"Builds pinned dependencies"),(0,r.kt)("li",{parentName:"ul"},"Runs custom rules"),(0,r.kt)("li",{parentName:"ul"},"Package-specs like ES6/CommonJS overrides all its dependencies")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Pinned dependencies")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Warnings reported"),(0,r.kt)("li",{parentName:"ul"},"Warn-error respected"),(0,r.kt)("li",{parentName:"ul"},"Ignores pinned dependencies"),(0,r.kt)("li",{parentName:"ul"},"Builds dev dependencies"),(0,r.kt)("li",{parentName:"ul"},"Runs custom rules")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Normal dependencies")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Warnings, warn-error ignored"),(0,r.kt)("li",{parentName:"ul"},"Ignores dev directories"),(0,r.kt)("li",{parentName:"ul"},"Ignores pinned dependencies"),(0,r.kt)("li",{parentName:"ul"},"Ignores custom generator rules")),(0,r.kt)("p",null,"So with that knowledge in mind, let's dive into some more concrete examples to see our pinned dependencies in action."),(0,r.kt)("h2",p({},{id:"examples"}),"Examples"),(0,r.kt)("h3",p({},{id:"yarn-workspaces"}),"Yarn workspaces"),(0,r.kt)("p",null,"Let's assume we have a codebase like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{}),"myproject/\n  app/\n   - src/App.res\n   - bsconfig.json\n  common/\n   - src/Header.res\n   - bsconfig.json\n  myplugin/\n   - src/MyPlugin.res\n   - bsconfig.json\n  package.json\n")),(0,r.kt)("p",null,"Our ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," file within our codebase root would look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-json"}),'{\n  "name": "myproject",\n  "private": true,\n  "workspaces": {\n    "packages": [\n      "app",\n      "common",\n      "myplugin"\n    ]\n  }\n}\n')),(0,r.kt)("p",null,"Our ",(0,r.kt)("inlineCode",{parentName:"p"},"app")," folder would be our toplevel package, consuming our ",(0,r.kt)("inlineCode",{parentName:"p"},"common")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"myplugin")," packages as ",(0,r.kt)("inlineCode",{parentName:"p"},"pinned-dependencies"),". The configuration for ",(0,r.kt)("inlineCode",{parentName:"p"},"app/bsconfig.json")," looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-json"}),'{\n  "name": "app",\n  "version": "1.0.0",\n  "sources": {\n    "dir" : "src",\n    "subdirs" : true\n  },\n  /* ... */\n  "bs-dependencies": [\n    "common",\n    "myplugin"\n  ],\n  "pinned-dependencies": ["common", "myplugin"],\n  /* ... */\n}\n')),(0,r.kt)("p",null,"Now, whenever we are running ",(0,r.kt)("inlineCode",{parentName:"p"},"rescript build")," within our ",(0,r.kt)("inlineCode",{parentName:"p"},"app")," package, the compiler would always rebuild any changes within its pinned dependencies as well."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Important:")," ReScript will not rebuild any ",(0,r.kt)("inlineCode",{parentName:"p"},"pinned-dependencies")," in watch mode! This is due to the complexity of file watching, so you'd need to set up your own file-watcher process that runs ",(0,r.kt)("inlineCode",{parentName:"p"},"rescript build")," on specific file changes."))}s.isMDXComponent=!0,s.frontmatter={title:"Pinned Dependencies",metaTitle:"Pinned Dependencies",description:"Handling multiple packages within one ReScript project with pinned dependencies",canonical:"/docs/manual/latest/build-pinned-dependencies",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/latest/build-pinned-dependencies.mdx"}},24128:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/latest/build-pinned-dependencies",function(){return t(94663)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return n=24128,e(e.s=n);var n}));var n=e.O();_N_E=n}]);