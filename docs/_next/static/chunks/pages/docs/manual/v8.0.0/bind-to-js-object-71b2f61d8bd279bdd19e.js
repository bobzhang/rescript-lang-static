(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[90080],{17375:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}n.d(t,{Z:function(){return a}})},78019:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return d}});var a=n(17375),r=n(96156),o=(n(67294),n(3905));function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var i,p=(i="CodeTab",function(e){return console.warn("Component "+i+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",s({},e))}),c={};function d(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",s(s(s({},c),n),{},{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",s({},{id:"bind-to-js-object"}),"Bind to JS Object"),(0,o.kt)("p",null,"JavaScript objects are a combination of several use-cases:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'As a "record" or "struct" in other languages (like ReScript and C).'),(0,o.kt)("li",{parentName:"ul"},"As a hash map."),(0,o.kt)("li",{parentName:"ul"},"As a class."),(0,o.kt)("li",{parentName:"ul"},"As a module to import/export.")),(0,o.kt)("p",null,"ReScript cleanly separates the binding methods for JS object based on these 4 use-cases. This page documents the first three. Binding to JS module objects is described in the ",(0,o.kt)("a",s({parentName:"p"},{href:"import-from-export-to-js.md"}),"Import from/Export to JS")," section."),(0,o.kt)("h2",s({},{id:"bind-to-record-like-js-objects"}),"Bind to Record-like JS Objects"),(0,o.kt)("h3",s({},{id:"bind-using-rescript-record"}),"Bind Using ReScript Record"),(0,o.kt)("p",null,"If your JavaScript object has fixed fields, then it's conceptually like a ReScript record. Since a ReScript record compiles to a clean JavaScript object, you can definitely type a JS object as a ReScript record!"),(0,o.kt)(p,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-re"}),'type person = {\n  name: string,\n  friends: array(string),\n  age: int,\n};\n\n[@bs.module "MySchool"] external john: person = "john";\n\nlet johnName = john.name;\n')),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-ml"}),'type person = {\n  name: string;\n  friends: string array;\n  age: int;\n}\n\nexternal john: person = "john" [@@bs.module "MySchool"]\n\nlet johnName = john.name\n')),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-js"}),'var MySchool = require("MySchool");\n\nvar johnName = MySchool.john.name;\n'))),(0,o.kt)("p",null,"External is documented ",(0,o.kt)("a",s({parentName:"p"},{href:"external.md"}),"here"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"@bs.module")," is documented ",(0,o.kt)("a",s({parentName:"p"},{href:"import-from-export-to-js.md"}),"here"),"."),(0,o.kt)("h3",s({},{id:"bind-using-rescript-object"}),"Bind Using ReScript Object"),(0,o.kt)("p",null,"Alternatively, you can use ",(0,o.kt)("a",s({parentName:"p"},{href:"object.md"}),"ReScript object")," to model a JS object too:"),(0,o.kt)(p,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-re"}),'type person = {\n  .\n  "name": string,\n  "friends": array(string),\n  "age": int,\n};\n\n[@bs.module "MySchool"] external john: person = "john";\n\nlet johnName = john##name;\n')),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-ml"}),'type person = <\n  name: string;\n  friends: string array;\n  age: int\n> Js.t\n\nexternal john: person = "john" [@@bs.module "MySchool"]\n\nlet johnName = ## john name\n')),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-js"}),'var MySchool = require("MySchool");\n\nvar johnName = MySchool.john.name;\n'))),(0,o.kt)("h3",s({},{id:"bind-using-special-bs-getters--setters"}),"Bind Using Special ",(0,o.kt)("inlineCode",{parentName:"h3"},"@bs")," Getters & Setters"),(0,o.kt)("p",null,"Alternatively, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"bs.get")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"bs.set")," to bind to individual fields of a JS object:"),(0,o.kt)(p,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-re"}),'type textarea;\n[@bs.set] external setName: (textarea, string) => unit = "name";\n[@bs.get] external getName: textarea => string = "name";\n')),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-ml"}),'type textarea;\nexternal setName: textarea -> string -> unit = "name" [@@bs.set]\nexternal getName: textarea -> string = "name" [@@bs.get]\n')),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-js"}),""))),(0,o.kt)("p",null,"You can also use ",(0,o.kt)("inlineCode",{parentName:"p"},"bs.get_index")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"bs.set_index")," to access a dynamic property or an index:"),(0,o.kt)(p,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-re"}),'type t;\n[@bs.new] external create: int => t = "Int32Array";\n[@bs.get_index] external get: (t, int) => int = "";\n[@bs.set_index] external set: (t, int, int) => unit = "";\n\nlet i32arr = create(3);\ni32arr->set(0, 42);\nJs.log(i32arr->get(0));\n')),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-ml"}),'type t\nexternal create: int -> t = "Int32Array" [@@bs.new]\nexternal get: t -> int -> int = "" [@@bs.get_index]\nexternal set: t -> int -> int -> unit = "" [@@bs.set_index]\n\nlet i32arr = create 3\nlet () = i32arr |. (set 0 42)\nlet () = Js.log (i32arr |. (get 0))\n')),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-js"}),"var i32arr = new Int32Array(3);\ni32arr[0] = 42;\nconsole.log(i32arr[0]);\n"))),(0,o.kt)("h2",s({},{id:"bind-to-hash-map-like-js-object"}),"Bind to Hash Map-like JS Object"),(0,o.kt)("p",null,"If your JavaScript object:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"might or might not add/remove keys"),(0,o.kt)("li",{parentName:"ul"},"contains only values that are of the same type")),(0,o.kt)("p",null,"Then it's not really an object, it's a hash map. Use ",(0,o.kt)("a",s({parentName:"p"},{href:"api/js/dict"}),"Js.Dict"),", which contains operations like ",(0,o.kt)("inlineCode",{parentName:"p"},"get"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"set"),", etc. and cleanly compiles to a JavaScript object still."),(0,o.kt)("h2",s({},{id:"bind-to-a-js-object-thats-a-class"}),"Bind to a JS Object That's a Class"),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"bs.new")," to emulate e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"new Date()"),":"),(0,o.kt)(p,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-re"}),'type t;\n[@bs.new] external createDate: unit => t = "Date";\n\nlet date = createDate();\n')),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-ml"}),'type t\nexternal createDate: unit -> t = "Date" [@@bs.new]\n\nlet date = createDate ()\n')),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-js"}),"var date = new Date();\n"))),(0,o.kt)("p",null,"You can chain ",(0,o.kt)("inlineCode",{parentName:"p"},"bs.new")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"bs.module")," if the JS module you're importing is itself a class:"),(0,o.kt)(p,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-re"}),'type t;\n[@bs.new] [@bs.module] external book: unit => t = "Book";\nlet myBook = book();\n')),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-ml"}),'type t\nexternal book: unit -> t = "Book" [@@bs.new][@@bs.module]\nlet myBook = book ()\n')),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-js"}),'var Book = require("Book");\nvar myBook = new Book();\n'))))}d.isMDXComponent=!0,d.frontmatter={title:"Bind to JS Object",description:"Interop with JS objects in ReScript",canonical:"/docs/manual/latest/bind-to-js-object",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v8.0.0/bind-to-js-object.mdx"}},16796:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v8.0.0/bind-to-js-object",function(){return n(78019)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=16796,e(e.s=t);var t}));var t=e.O();_N_E=t}]);