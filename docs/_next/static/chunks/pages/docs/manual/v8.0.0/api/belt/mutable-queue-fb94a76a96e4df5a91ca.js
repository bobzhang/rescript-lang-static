(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[93702],{17375:function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},p=Object.keys(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}n.d(t,{Z:function(){return r}})},54824:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return k}});var r=n(17375),a=n(96156),p=(n(67294),n(3905));function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){(0,a.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var o,u=(o="Intro",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,p.kt)("div",l({},e))}),d={};function k(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,p.kt)("wrapper",l(l(l({},d),n),{},{components:t,mdxType:"MDXLayout"}),(0,p.kt)("h1",l({},{id:"mutablequeue"}),"MutableQueue"),(0,p.kt)(u,{mdxType:"Intro"},(0,p.kt)("p",null,"An FIFO(first in first out) queue data structure.")),(0,p.kt)("h2",l({},{id:"t"}),"t"),(0,p.kt)("pre",null,(0,p.kt)("code",l({parentName:"pre"},{}),"type t('a);\n")),(0,p.kt)("p",null,"The type of queues containing elements of ",(0,p.kt)("inlineCode",{parentName:"p"},"type('a)"),"."),(0,p.kt)("h2",l({},{id:"make"}),"make"),(0,p.kt)("pre",null,(0,p.kt)("code",l({parentName:"pre"},{}),"let make: unit => t('a);\n")),(0,p.kt)("p",null,"Returns a new queue, initially empty."),(0,p.kt)("h2",l({},{id:"clear"}),"clear"),(0,p.kt)("pre",null,(0,p.kt)("code",l({parentName:"pre"},{}),"let clear: t('a) => unit;\n")),(0,p.kt)("p",null,"Discard all elements from the queue."),(0,p.kt)("h2",l({},{id:"isempty"}),"isEmpty"),(0,p.kt)("pre",null,(0,p.kt)("code",l({parentName:"pre"},{}),"let isEmpty: t('a) => bool;\n")),(0,p.kt)("p",null,"Returns ",(0,p.kt)("inlineCode",{parentName:"p"},"true")," if the given queue is empty, ",(0,p.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,p.kt)("h2",l({},{id:"fromarray"}),"fromArray"),(0,p.kt)("pre",null,(0,p.kt)("code",l({parentName:"pre"},{}),"let fromArray: array('a) => t('a);\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"fromArray")," a is equivalent to ",(0,p.kt)("inlineCode",{parentName:"p"},"Array.forEach(a, add(q, a));")),(0,p.kt)("h2",l({},{id:"add"}),"add"),(0,p.kt)("pre",null,(0,p.kt)("code",l({parentName:"pre"},{}),"let add: (t('a), 'a) => unit;\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"add(q, x)")," adds the element ",(0,p.kt)("inlineCode",{parentName:"p"},"x")," at the end of the queue ",(0,p.kt)("inlineCode",{parentName:"p"},"q"),"."),(0,p.kt)("h2",l({},{id:"peek"}),"peek"),(0,p.kt)("pre",null,(0,p.kt)("code",l({parentName:"pre"},{}),"let peek: t('a) => option('a);\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"peekOpt(q)")," returns the first element in queue ",(0,p.kt)("inlineCode",{parentName:"p"},"q"),", without removing it from the queue."),(0,p.kt)("h2",l({},{id:"peekundefined"}),"peekUndefined"),(0,p.kt)("pre",null,(0,p.kt)("code",l({parentName:"pre"},{}),"let peekUndefined: t('a) => Js.undefined('a);\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"peekUndefined(q)")," returns ",(0,p.kt)("inlineCode",{parentName:"p"},"undefined")," if not found."),(0,p.kt)("h2",l({},{id:"peekexn"}),"peekExn"),(0,p.kt)("pre",null,(0,p.kt)("code",l({parentName:"pre"},{}),"let peekExn: t('a) => 'a;\n")),(0,p.kt)("p",null,"raise an exception if ",(0,p.kt)("inlineCode",{parentName:"p"},"q")," is empty"),(0,p.kt)("h2",l({},{id:"pop"}),"pop"),(0,p.kt)("pre",null,(0,p.kt)("code",l({parentName:"pre"},{}),"let pop: t('a) => option('a);\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"pop(q)")," removes and returns the first element in queue ",(0,p.kt)("inlineCode",{parentName:"p"},"q"),"."),(0,p.kt)("h2",l({},{id:"popundefined"}),"popUndefined"),(0,p.kt)("pre",null,(0,p.kt)("code",l({parentName:"pre"},{}),"let popUndefined: t('a) => Js.undefined('a);\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"popUndefined(q)")," removes and returns the first element in queue ",(0,p.kt)("inlineCode",{parentName:"p"},"q"),". it will return ",(0,p.kt)("inlineCode",{parentName:"p"},"undefined")," if it is already empty."),(0,p.kt)("h2",l({},{id:"popexn"}),"popExn"),(0,p.kt)("pre",null,(0,p.kt)("code",l({parentName:"pre"},{}),"let popExn: t('a) => 'a;\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"popExn(q)")," raise an exception if q is empty."),(0,p.kt)("h2",l({},{id:"copy"}),"copy"),(0,p.kt)("pre",null,(0,p.kt)("code",l({parentName:"pre"},{}),"let copy: t('a) => t('a);\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"copy(q)")," returns a fresh queue."),(0,p.kt)("h2",l({},{id:"size"}),"size"),(0,p.kt)("pre",null,(0,p.kt)("code",l({parentName:"pre"},{}),"let size: t('a) => int;\n")),(0,p.kt)("p",null,"Returns the number of elements in a queue."),(0,p.kt)("h2",l({},{id:"mapu"}),"mapU"),(0,p.kt)("pre",null,(0,p.kt)("code",l({parentName:"pre"},{}),"let mapU: (t('a), [@bs] ('a => 'b)) => t('b);\n")),(0,p.kt)("h2",l({},{id:"map"}),"map"),(0,p.kt)("pre",null,(0,p.kt)("code",l({parentName:"pre"},{}),"let map: (t('a), 'a => 'b) => t('b);\n")),(0,p.kt)("h2",l({},{id:"foreachu"}),"forEachU"),(0,p.kt)("pre",null,(0,p.kt)("code",l({parentName:"pre"},{}),"let forEachU: (t('a), [@bs] ('a => unit)) => unit;\n")),(0,p.kt)("h2",l({},{id:"foreach"}),"forEach"),(0,p.kt)("pre",null,(0,p.kt)("code",l({parentName:"pre"},{}),"let forEach: (t('a), 'a => unit) => unit;\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"forEach(q, f) applies"),"f",(0,p.kt)("inlineCode",{parentName:"p"},"in turn to all elements of"),"q`, from the least recently entered to the most recently entered. The queue itself is unchanged."),(0,p.kt)("h2",l({},{id:"reduceu"}),"reduceU"),(0,p.kt)("pre",null,(0,p.kt)("code",l({parentName:"pre"},{}),"let reduceU: (t('a), 'b, [@bs] (('b, 'a) => 'b)) => 'b;\n")),(0,p.kt)("h2",l({},{id:"reduce"}),"reduce"),(0,p.kt)("pre",null,(0,p.kt)("code",l({parentName:"pre"},{}),"let reduce: (t('a), 'b, ('b, 'a) => 'b) => 'b;\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"reduce(q, accu, f)")," is equivalent to ",(0,p.kt)("inlineCode",{parentName:"p"},"List.reduce(l, accu, f)"),", where ",(0,p.kt)("inlineCode",{parentName:"p"},"l")," is the list of ",(0,p.kt)("inlineCode",{parentName:"p"},"q"),"'s elements. The queue remains unchanged."),(0,p.kt)("h2",l({},{id:"transfer"}),"transfer"),(0,p.kt)("pre",null,(0,p.kt)("code",l({parentName:"pre"},{}),"let transfer: (t('a), t('a)) => unit;\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"transfer(q1, q2)")," adds all of ",(0,p.kt)("inlineCode",{parentName:"p"},"q1"),"'s elements at the end of the queue ",(0,p.kt)("inlineCode",{parentName:"p"},"q2"),", then clears ",(0,p.kt)("inlineCode",{parentName:"p"},"q1"),". It is equivalent to the sequence ",(0,p.kt)("inlineCode",{parentName:"p"},"forEach((x) => add(x, q2), q1);"),"; clear ",(0,p.kt)("inlineCode",{parentName:"p"},"q1"),", but runs in constant time."),(0,p.kt)("h2",l({},{id:"toarray"}),"toArray"),(0,p.kt)("pre",null,(0,p.kt)("code",l({parentName:"pre"},{}),"let toArray: t('a) => array('a);\n")),(0,p.kt)("p",null,"First added will be in the beginning of the array."))}k.isMDXComponent=!0,k.frontmatter={__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v8.0.0/api/belt/mutable-queue.mdx"}},79060:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v8.0.0/api/belt/mutable-queue",function(){return n(54824)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=79060,e(e.s=t);var t}));var t=e.O();_N_E=t}]);