(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[13359],{17375:function(e,t,a){"use strict";function n(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}a.d(t,{Z:function(){return n}})},6014:function(e,t,a){"use strict";a.r(t),a.d(t,{default:function(){return c}});var n=a(17375),r=a(96156),i=(a(67294),a(3905));function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){(0,r.Z)(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}var o,d=(o="Intro",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",l({},e))}),p={};function c(e){var t=e.components,a=(0,n.Z)(e,["components"]);return(0,i.kt)("wrapper",l(l(l({},p),a),{},{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",l({},{id:"hashset"}),"HashSet"),(0,i.kt)(d,{mdxType:"Intro"},(0,i.kt)("p",null,"A mutable Hash set which allows customized ",(0,i.kt)("inlineCode",{parentName:"p"},"hash")," behavior.\nAll data are parameterized by not its only type but also a unique identity in the time of initialization, so that two HashSets of ints initialized with different hash functions will have different type.")),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"type t = int;\n\nmodule I0 = (\n  val Belt.Id.hashableU(\n        ~hash=(. a: t) => a land 65535,\n        ~eq=(. a, b) => a == b,\n      )\n);\n\nlet s0 = Belt.HashSet.make(~id=(module I0), ~hintSize=40);\n\nmodule I1 = (\n  val Belt.Id.hashableU(\n        ~hash=(. a: t) => a land 255,\n        ~eq=(. a, b) => a == b,\n      )\n);\n\nlet s1 = Belt.HashSet.make(~id=(module I1), ~hintSize=40);\n\nBelt.HashSet.add(s1, 0);\nBelt.HashSet.add(s1, 1);\n")),(0,i.kt)("p",null,"The invariant must be held: for two elements who are equal, their hashed value should be the same."),(0,i.kt)("p",null,"Here the compiler would infer ",(0,i.kt)("inlineCode",{parentName:"p"},"s0")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"s1")," having different type so that it would not mix."),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let s0: t(int, I0.identity);\nlet s1: t(int, I1.identity);\n")),(0,i.kt)("p",null,"We can add elements to the collection (see last two lines in the example above). Since this is an mutable data structure, ",(0,i.kt)("inlineCode",{parentName:"p"},"s1")," will contain two pairs."),(0,i.kt)("h2",l({},{id:"t"}),"t"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"type t('a, 'id);\n")),(0,i.kt)("h2",l({},{id:"id"}),"id"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"type id('a, 'id) = BeltId.hashable('a, 'id);\n")),(0,i.kt)("h2",l({},{id:"make"}),"make"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let make: (~hintSize: int, ~id: id('a, 'id)) => t('a, 'id);\n")),(0,i.kt)("h2",l({},{id:"clear"}),"clear"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let clear: t('a, 'id) => unit;\n")),(0,i.kt)("h2",l({},{id:"isempty"}),"isEmpty"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let isEmpty: t('a, 'b) => bool;\n")),(0,i.kt)("h2",l({},{id:"add"}),"add"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let add: (t('a, 'id), 'a) => unit;\n")),(0,i.kt)("h2",l({},{id:"copy"}),"copy"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let copy: t('a, 'id) => t('a, 'id);\n")),(0,i.kt)("h2",l({},{id:"has"}),"has"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let has: (t('a, 'id), 'a) => bool;\n")),(0,i.kt)("h2",l({},{id:"remove"}),"remove"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let remove: (t('a, 'id), 'a) => unit;\n")),(0,i.kt)("h2",l({},{id:"foreachu"}),"forEachU"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let forEachU: (t('a, 'id), [@bs] ('a => unit)) => unit;\n")),(0,i.kt)("h2",l({},{id:"foreach"}),"forEach"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let forEach: (t('a, 'id), 'a => unit) => unit;\n")),(0,i.kt)("p",null,"Order unspecified."),(0,i.kt)("h2",l({},{id:"reduceu"}),"reduceU"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let reduceU: (t('a, 'id), 'c, [@bs] (('c, 'a) => 'c)) => 'c;\n")),(0,i.kt)("h2",l({},{id:"reduce"}),"reduce"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let reduce: (t('a, 'id), 'c, ('c, 'a) => 'c) => 'c;\n")),(0,i.kt)("p",null,"Order unspecified."),(0,i.kt)("h2",l({},{id:"size"}),"size"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let size: t('a, 'id) => int;\n")),(0,i.kt)("h2",l({},{id:"logstats"}),"logStats"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let logStats: t('a, 'b) => unit;\n")),(0,i.kt)("h2",l({},{id:"toarray"}),"toArray"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let toArray: t('a, 'id) => array('a);\n")),(0,i.kt)("h2",l({},{id:"fromarray"}),"fromArray"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let fromArray: (array('a), ~id: id('a, 'id)) => t('a, 'id);\n")),(0,i.kt)("h2",l({},{id:"mergemany"}),"mergeMany"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let mergeMany: (t('a, 'id), array('a)) => unit;\n")),(0,i.kt)("h2",l({},{id:"getbuckethistogram"}),"getBucketHistogram"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let getBucketHistogram: t('a, 'b) => array(int);\n")))}c.isMDXComponent=!0,c.frontmatter={__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v8.0.0/api/belt/hash-set.mdx"}},69777:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v8.0.0/api/belt/hash-set",function(){return a(6014)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=69777,e(e.s=t);var t}));var t=e.O();_N_E=t}]);