(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[46144],{17375:function(e,a,t){"use strict";function n(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}t.d(a,{Z:function(){return n}})},5020:function(e,a,t){"use strict";t.r(a),t.d(a,{default:function(){return d}});var n=t(17375),r=t(96156),s=(t(67294),t(3905));function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){(0,r.Z)(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}var p,i=(p="CodeTab",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",o({},e))}),u={};function d(e){var a=e.components,t=(0,n.Z)(e,["components"]);return(0,s.kt)("wrapper",o(o(o({},u),t),{},{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h1",o({},{id:"pipe"}),"Pipe"),(0,s.kt)("p",null,"ReScript provides a tiny but surprisingly useful operator ",(0,s.kt)("inlineCode",{parentName:"p"},"->"),', called the "pipe", that allows you to "flip" your code inside-out. ',(0,s.kt)("inlineCode",{parentName:"p"},"a(b)")," becomes ",(0,s.kt)("inlineCode",{parentName:"p"},"b->a"),". It's a simple piece of syntax that doesn't have any runtime cost."),(0,s.kt)("p",null,"Why would you use it? Imagine you have the following:"),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-re"}),"validateAge(getAge(parseData(person)));\n")),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-ml"}),"validateAge (getAge (parseData person))\n")),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-js"}),"validateAge(getAge(parseData(person)));\n"))),(0,s.kt)("p",null,"This is slightly hard to read, since you need to read the code from the innermost part, to the outer parts. Use pipe to streamline it:"),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-re"}),"person\n  ->parseData\n  ->getAge\n  ->validateAge;\n")),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-ml"}),"person\n  |. parseData\n  |. getAge\n  |. validateAge\n")),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-js"}),"validateAge(getAge(parseData(person)));\n"))),(0,s.kt)("p",null,"Basically, ",(0,s.kt)("inlineCode",{parentName:"p"},"parseData(person)")," is transformed into ",(0,s.kt)("inlineCode",{parentName:"p"},"person->parseData"),", and ",(0,s.kt)("inlineCode",{parentName:"p"},"getAge(person->parseData)")," is transformed into ",(0,s.kt)("inlineCode",{parentName:"p"},"person->parseData->getAge"),", etc."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"This works when the function takes more than one argument too"),"."),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-re"}),"a(one, two, three);\n")),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-ml"}),"a one two three\n")),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-js"}),"a(one, two, three);\n"))),(0,s.kt)("p",null,"is the same as"),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-re"}),"one->a(two, three);\n")),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-ml"}),"one |. a two three\n")),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-js"}),"a(one, two, three);\n"))),(0,s.kt)("p",null,"This also works with labeled arguments."),(0,s.kt)("p",null,"Pipes are used to emulate object-oriented programming, e.g. what's ",(0,s.kt)("inlineCode",{parentName:"p"},"myStudent.getName")," in other languages like Java would be ",(0,s.kt)("inlineCode",{parentName:"p"},"myStudent->getName")," in ReScript (aka ",(0,s.kt)("inlineCode",{parentName:"p"},"getName(myStudent)"),"). This allows us to have the readability of the good parts of OOP without its downside of dragging in a huge class system just to call a function on a piece of data."),(0,s.kt)("h2",o({},{id:"tips--tricks"}),"Tips & Tricks"),(0,s.kt)("p",null,"Do ",(0,s.kt)("strong",{parentName:"p"},"not")," to abuse pipes; they're a means to an end. Inexperienced engineers sometimes shape a library's API to take advantage of the pipe. This is backward."),(0,s.kt)("h2",o({},{id:"js-method-chaining"}),"JS Method Chaining"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"This section requires understanding of ",(0,s.kt)("a",o({parentName:"em"},{href:"bind-to-js-function.md#object-method"}),"our binding API")),"."),(0,s.kt)("p",null,"JavaScript's APIs are often attached to objects, and often chainable, like so:"),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-js"}),"const result = [|1, 2, 3|].map(a => a + 1).filter(a => a % 2 === 0);\n\nasyncRequest()\n  .setWaitDuration(4000)\n  .send();\n")),(0,s.kt)("p",null,"Assuming we don't need the chaining behavior above, we'd bind to each case this using ",(0,s.kt)("inlineCode",{parentName:"p"},"bs.send")," from the previous section:"),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-re"}),'[@bs.send] external map: (array(\'a), \'a => \'b) => array(\'b) = "map";\n[@bs.send] external filter: (array(\'a), \'a => bool) => array(\'a) = "filter";\n\ntype request;\n[@bs.val] external asyncRequest: unit => request = "asyncRequest";\n[@bs.send] external setWaitDuration: (request, int) => request = "setWaitDuration";\n[@bs.send] external send: request => unit = "send";\n')),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-ml"}),'external map: \'a array -> (\'a -> \'b) -> \'b array = "map" [@@bs.send]\nexternal filter: \'a array -> (\'a -> bool) -> \'a array = "filter" [@@bs.send]\n\ntype request\nexternal asyncRequest: unit -> request = "asyncRequest" [@@bs.val]\nexternal setWaitDuration: request -> int -> request = "setWaitDuration" [@@bs.send]\nexternal send: request -> unit = "send" [@@bs.send]\n')),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-js"}),"// Empty output\n"))),(0,s.kt)("p",null,"You'd use them like this:"),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-re"}),"let result = Js.Array2.filter(\n  Js.Array2.map([|1, 2, 3|], a => a + 1),\n  a => a mod 2 == 0\n);\n\nsend(setWaitDuration(asyncRequest(), 4000));\n")),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-ml"}),"let result = Js.Array2.filter\n  (Js.Array2.map [|1; 2; 3|] (fun a -> a + 1))\n  (fun a -> (a mod 2) = 0)\n\nlet () = send (setWaitDuration (asyncRequest ()) 4000)\n")),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-js"}),"var result = [1, 2, 3].map(function(a) {\n  return a + 1 | 0;\n}).filter(function(a) {\n  return a % 2 === 0;\n});\n\nasyncRequest().setWaitDuration(4000).send();\n"))),(0,s.kt)("p",null,"This looks much worse than the JS counterpart! Clean it up visually with pipe:"),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-re"}),"let result = [|1, 2, 3|]\n  ->map(a => a + 1)\n  ->filter(a => a mod 2 == 0)\n\nasyncRequest()->setWaitDuration(4000)->send\n")),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-ml"}),"let result = [|1; 2; 3|]\n  |. map(fun a -> a + 1)\n  |. filter(fun a -> a mod 2 = 0)\n\nasyncRequest()->setWaitDuration(4000)->send\n")),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-js"}),"var result = [1, 2, 3].map(function(a) {\n  return a + 1 | 0;\n}).filter(function(a) {\n  return a % 2 === 0;\n});\n\nasyncRequest().setWaitDuration(4000).send();\n"))),(0,s.kt)("h2",o({},{id:"pipe-into-variants"}),"Pipe Into Variants"),(0,s.kt)("p",null,"You can pipe into a variant's constructor as if it was a function:"),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-re"}),"let result = name->preprocess->Some;\n")),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-ml"}),"let result = name |. preprocess |. Some\n")),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-js"}),"var result = preprocess(name);\n"))),(0,s.kt)("p",null,"We turn this into:"),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-re"}),"let result = Some(preprocess(name));\n")),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-ml"}),"let result = Some (preprocess name)\n")),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-js"}),"var result = preprocess(name);\n"))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Note")," that using a variant constructor as a function wouldn't work anywhere else beside here."),(0,s.kt)("h2",o({},{id:"pipe-placeholders"}),"Pipe Placeholders"),(0,s.kt)("p",null,"A placeholder is written as an underscore and it tells ReScript that you want to fill in an argument of a function later. These two have equivalent meaning:"),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-re"}),"let addTo7 = (x) => add3(3, x, 4);\nlet addTo7 = add3(3, _, 4);\n")),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-ml"}),"(* doesn't exist in old ML syntax *)\n"))),(0,s.kt)("p",null,"Sometimes you don't want to pipe the value you have into the first position. In these cases you can mark a placeholder value to show which argument you would like to pipe into."),(0,s.kt)("p",null,"Let's say you have a function ",(0,s.kt)("inlineCode",{parentName:"p"},"namePerson"),", which takes a ",(0,s.kt)("inlineCode",{parentName:"p"},"person")," then a ",(0,s.kt)("inlineCode",{parentName:"p"},"name")," argument. If you are transforming a person then pipe will work as-is:"),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-re"}),'makePerson(~age=47, ())\n  ->namePerson("Jane");\n')),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-ml"}),'makePerson ~age=47 ()\n  |. namePerson("Jane")\n')),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-js"}),'namePerson(makePerson(47), "Jane");\n'))),(0,s.kt)("p",null,"If you have a name that you want to apply to a person object, you can use a placeholder:"),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-re"}),"getName(input)\n  ->namePerson(personDetails, _);\n")),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-ml"}),"(* doesn't exist in old ML syntax *)\n")),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-js"}),"var __x = getName(input);\nnamePerson(personDetails, __x);\n"))),(0,s.kt)("p",null,"This allows you to pipe into any positional argument. It also works for named arguments:"),(0,s.kt)(i,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-re"}),"getName(input)\n  ->namePerson(~person=personDetails, ~name=_);\n")),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-ml"}),"(* doesn't exist in old ML syntax *)\n")),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-js"}),"var __x = getName(input);\nnamePerson(personDetails, __x);\n"))),(0,s.kt)("h2",o({},{id:"triangle-pipe-deprecated"}),"Triangle Pipe (Deprecated)"),(0,s.kt)("p",null,"You might see usages of another pipe, ",(0,s.kt)("inlineCode",{parentName:"p"},"|>"),", in some codebases. These are deprecated."),(0,s.kt)("p",null,"Unlike ",(0,s.kt)("inlineCode",{parentName:"p"},"->")," pipe, the ",(0,s.kt)("inlineCode",{parentName:"p"},"|>")," pipe puts the subject as the last (not first) argument of the function. ",(0,s.kt)("inlineCode",{parentName:"p"},"a |> f(b)")," turns into ",(0,s.kt)("inlineCode",{parentName:"p"},"f(b, a)"),"."),(0,s.kt)("p",null,"For a more thorough discussion on the rationale and differences between the two operators, please refer to the ",(0,s.kt)("a",o({parentName:"p"},{href:"https://www.javierchavarri.com/data-first-and-data-last-a-comparison/"}),"Data-first and Data-last comparison by Javier Ch\xe1varri")))}d.isMDXComponent=!0,d.frontmatter={title:"Pipe",description:"The Pipe operator (->)",canonical:"/docs/manual/latest/pipe",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v8.0.0/pipe.mdx"}},42492:function(e,a,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v8.0.0/pipe",function(){return t(5020)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return a=42492,e(e.s=a);var a}));var a=e.O();_N_E=a}]);