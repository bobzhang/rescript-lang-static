(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[88076],{17375:function(e,t,a){"use strict";function n(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}a.d(t,{Z:function(){return n}})},53879:function(e,t,a){"use strict";a.r(t),a.d(t,{default:function(){return k}});var n=a(17375),r=a(96156),i=(a(67294),a(3905));function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){(0,r.Z)(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}var p,m=(p="Intro",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",s({},e))}),o={};function k(e){var t=e.components,a=(0,n.Z)(e,["components"]);return(0,i.kt)("wrapper",s(s(s({},o),a),{},{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",s({},{id:"list"}),"List"),(0,i.kt)(m,{mdxType:"Intro"},(0,i.kt)("p",null,"Collection functions for manipulating ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," data structures.")),(0,i.kt)("h2",s({},{id:"ta"}),"t('a)"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"type t('a) = list('a);\n")),(0,i.kt)("h2",s({},{id:"length"}),"length"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let length: t('a) => int;\n")),(0,i.kt)("p",null,"Returns the length of a list."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.length([1, 2, 3]); /* 3 */\n")),(0,i.kt)("h2",s({},{id:"size"}),"size"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let size: t('a) => int;\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"See:")," ",(0,i.kt)("a",s({parentName:"p"},{href:"#length"}),"length")),(0,i.kt)("h2",s({},{id:"head"}),"head"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let head: t('a) => option('a);\n")),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"Some(value)")," where ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," is the first element in the list, or ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"someList")," is an empty list."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.head([]); /* None */\n\nBelt.List.head([1, 2, 3]); /* Some(1) */\n")),(0,i.kt)("h2",s({},{id:"headexn"}),"headExn"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let headExn: t('a) => 'a;\n")),(0,i.kt)("p",null,"Same as ",(0,i.kt)("a",s({parentName:"p"},{href:"#head"}),"head"),", but raises an exception if ",(0,i.kt)("inlineCode",{parentName:"p"},"someList")," is empty. Use with care."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.headExn([1, 2, 3]); /* 1 */\n\nBelt.List.headExn([]); /* Raises an Error */\n")),(0,i.kt)("h2",s({},{id:"tail"}),"tail"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let tail: t('a) => option(t('a));\n")),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"someList")," is empty, otherwise it returns ",(0,i.kt)("inlineCode",{parentName:"p"},"Some(tail)")," where ",(0,i.kt)("inlineCode",{parentName:"p"},"tail")," is everything except the first element of ",(0,i.kt)("inlineCode",{parentName:"p"},"someList"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.tail([1, 2, 3]); /* Some([2, 3]) */\n\nBelt.List.tail([]); /* None */\n")),(0,i.kt)("h2",s({},{id:"tailexn"}),"tailExn"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let tailExn: t('a) => t('a);\n")),(0,i.kt)("p",null,"Same as ",(0,i.kt)("a",s({parentName:"p"},{href:"#tail"}),"tail"),", but raises an exception if ",(0,i.kt)("inlineCode",{parentName:"p"},"someList")," is empty. Use with care."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.tailExn([1, 2, 3]); /* [2, 3] */\n\nBelt.List.tailExn([]); /* Raises an Error */\n")),(0,i.kt)("h2",s({},{id:"add"}),"add"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let add: (t('a), 'a) => t('a);\n")),(0,i.kt)("p",null,"Adds ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," to the beginning of ",(0,i.kt)("inlineCode",{parentName:"p"},"someList"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),'Belt.List.add([2, 3], 1); /* [1, 2, 3] */\n\nBelt.List.add(["World", "!"], "Hello"); /* ["Hello", "World", "!"] */\n')),(0,i.kt)("h2",s({},{id:"get"}),"get"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let get: (t('a), int) => option('a);\n")),(0,i.kt)("p",null,"Return the nth element in ",(0,i.kt)("inlineCode",{parentName:"p"},"someList"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," is larger than the length."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),'let abc = ["A", "B", "C"];\n\nabc->Belt.List.get(1); /* Some("B") */\n\nabc->Belt.List.get(4); /* None */\n')),(0,i.kt)("h2",s({},{id:"getexn"}),"getExn"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let getExn: (t('a), int) => 'a;\n")),(0,i.kt)("p",null,"Same as ",(0,i.kt)("a",s({parentName:"p"},{href:"#get"}),"get"),", but raises an exception if ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," is larger than the length. Use with care."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),'let abc = ["A", "B", "C"];\n\nabc->Belt.List.getExn(1); /* "B" */\n\nabc->Belt.List.getExn(4); /* Raises an Error */\n')),(0,i.kt)("h2",s({},{id:"make"}),"make"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{}),"let make: (int, 'a) => t('a);\n")),(0,i.kt)("p",null,"Returns a list of length ",(0,i.kt)("inlineCode",{parentName:"p"},"numItems")," with each element filled with value ",(0,i.kt)("inlineCode",{parentName:"p"},"v"),". Returns an empty list if ",(0,i.kt)("inlineCode",{parentName:"p"},"numItems")," is negative."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.make(3, 1); /* [1, 1, 1] */\n")),(0,i.kt)("h2",s({},{id:"makeby"}),"makeBy"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let makeBy: (int, int => 'a) => t('a);\n")),(0,i.kt)("p",null,"Return a list of length ",(0,i.kt)("inlineCode",{parentName:"p"},"numItems")," with element ",(0,i.kt)("inlineCode",{parentName:"p"},"i")," initialized with ",(0,i.kt)("inlineCode",{parentName:"p"},"f(i)"),".\nReturns an empty list if ",(0,i.kt)("inlineCode",{parentName:"p"},"numItems")," is negative."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.makeBy(5, i => i); /* [0, 1, 2, 3, 4] */\n\nBelt.List.makeBy(5, i => i * i); /* [0, 1, 4, 9, 16] */\n")),(0,i.kt)("h2",s({},{id:"makebyu"}),"makeByU"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let makeByU: (int, [@bs] (int => 'a)) => t('a);\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#makeBy"}),"makeBy")),(0,i.kt)("h2",s({},{id:"shuffle"}),"shuffle"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let shuffle: t('a) => t('a);\n")),(0,i.kt)("p",null,"Returns a new list in random order."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.shuffle([1, 2, 3]); /* [2, 1, 3] */\n")),(0,i.kt)("h2",s({},{id:"drop"}),"drop"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let drop: (t('a), int) => option(t('a));\n")),(0,i.kt)("p",null,"Return a new list, dropping the first ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," elements. Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"someList")," has fewer than ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," elements."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"[1, 2, 3]->Belt.List.drop(2); /* Some([3]) */\n\n[1, 2, 3]->Belt.List.drop(3); /* Some([]) */\n\n[1, 2, 3]->Belt.List.drop(4); /* None */\n")),(0,i.kt)("h2",s({},{id:"take"}),"take"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let take: (t('a), int) => option(t('a));\n")),(0,i.kt)("p",null,"Returns a list with the first ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," elements from ",(0,i.kt)("inlineCode",{parentName:"p"},"someList"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"someList")," has fewer than ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," elements."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"[1, 2, 3]->Belt.List.take(1); /* Some([1]) */\n\n[1, 2, 3]->Belt.List.take(2); /* Some([1, 2]) */\n\n[1, 2, 3]->Belt.List.take(4); /* None */\n")),(0,i.kt)("h2",s({},{id:"splitat"}),"splitAt"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let splitAt: (t('a), int) => option((list('a), list('a)));\n")),(0,i.kt)("p",null,"Split the list ",(0,i.kt)("inlineCode",{parentName:"p"},"someList")," at ",(0,i.kt)("inlineCode",{parentName:"p"},"index"),". Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," when the length of ",(0,i.kt)("inlineCode",{parentName:"p"},"someList")," is less than ",(0,i.kt)("inlineCode",{parentName:"p"},"index"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),'["Hello", "World"]->Belt.List.splitAt(1); /* Some((["Hello"], ["World"])) */\n\n[0, 1, 2, 3, 4]->Belt.List.splitAt(2); /* Some(([0, 1], [2, 3, 4])) */\n')),(0,i.kt)("h2",s({},{id:"concat"}),"concat"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let concat: (t('a), t('a)) => t('a);\n")),(0,i.kt)("p",null,"Returns the list obtained by adding ",(0,i.kt)("inlineCode",{parentName:"p"},"secondList")," after ",(0,i.kt)("inlineCode",{parentName:"p"},"firstList"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.concat([1, 2, 3], [4, 5]); /* [1, 2, 3, 4, 5] */\n")),(0,i.kt)("h2",s({},{id:"concatmany"}),"concatMany"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let concatMany: array(t('a)) => t('a);\n")),(0,i.kt)("p",null,"Returns the list obtained by concatenating all the lists in array ",(0,i.kt)("inlineCode",{parentName:"p"},"a"),", in order."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.concatMany([|[1, 2, 3], [], [3], [4]|]); /* [1, 2, 3, 3, 4] */\n")),(0,i.kt)("h2",s({},{id:"reverseconcat"}),"reverseConcat"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let reverseConcat: (t('a), t('a)) => t('a);\n")),(0,i.kt)("p",null,"Equivalent to writing: ",(0,i.kt)("inlineCode",{parentName:"p"},"concat(reverse(firstList), secondList)")),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.reverseConcat([1, 2], [3, 4]); /* [2, 1, 3, 4] */\n")),(0,i.kt)("h2",s({},{id:"flatten"}),"flatten"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let flatten: t(t('a)) => t('a);\n")),(0,i.kt)("p",null,"Return the list obtained by concatenating all the lists in list ",(0,i.kt)("inlineCode",{parentName:"p"},"ls"),", in order."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.flatten([[1, 2, 3], [], [3], [4]]); /* [1, 2, 3, 3, 4] */\n")),(0,i.kt)("h2",s({},{id:"map"}),"map"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let map: (t('a), 'a => 'b) => t('b);\n")),(0,i.kt)("p",null,"Returns a new list with ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," applied to each element of ",(0,i.kt)("inlineCode",{parentName:"p"},"someList"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"[1, 2]->Belt.List.map(x => x + 1); /* [3, 4] */\n")),(0,i.kt)("h2",s({},{id:"mapu"}),"mapU"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let mapU: (t('a), [@bs] ('a => 'b)) => t('b);\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#map"}),"map"),"."),(0,i.kt)("h2",s({},{id:"zip"}),"zip"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let zip: (t('a), t('b)) => t(('a, 'b));\n")),(0,i.kt)("p",null,"Returns a list of pairs from the two lists with the length of the shorter list."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.zip([1, 2], [3, 4, 5]); /* [(1, 3), (2, 4)] */\n")),(0,i.kt)("h2",s({},{id:"zipby"}),"zipBy"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let zipBy: (t('a), t('b), ('a, 'b) => 'c) => t('c);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"See:")," ",(0,i.kt)("a",s({parentName:"p"},{href:"#zip"}),"zip")),(0,i.kt)("p",null,"Equivalent to:"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"zip(firstList, secondList) |> List.map(((x, y)) => f(x, y));\n")),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.zipBy([1, 2, 3], [4, 5], (a, b) => 2 * a + b); /* [6, 9] */\n")),(0,i.kt)("h2",s({},{id:"zipbyu"}),"zipByU"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let zipByU: (t('a), t('b), [@bs] (('a, 'b) => 'c)) => t('c);\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#zipBy"}),"zipBy"),"."),(0,i.kt)("h2",s({},{id:"mapwithindex"}),"mapWithIndex"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let mapWithIndex: (t('a), (int, 'a) => 'b) => t('b);\n")),(0,i.kt)("p",null,"Applies ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," to each element of ",(0,i.kt)("inlineCode",{parentName:"p"},"someList"),".\nFunction ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," takes two arguments: the index starting from 0 and the element from ",(0,i.kt)("inlineCode",{parentName:"p"},"someList"),", in that order."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"[1, 2, 3]->Belt.List.mapWithIndex((index, x) => index + x); /* [1, 3, 5] */\n")),(0,i.kt)("h2",s({},{id:"mapwithindexu"}),"mapWithIndexU"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let mapWithIndexU: (t('a), [@bs] ((int, 'a) => 'b)) => t('b);\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#mapWithIndex"}),"mapWithIndex"),"."),(0,i.kt)("h2",s({},{id:"fromarray"}),"fromArray"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let fromArray: array('a) => t('a);\n")),(0,i.kt)("p",null,"Converts the given array to a list."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.fromArray([|1, 2, 3|]); /* [1, 2, 3] */\n")),(0,i.kt)("h2",s({},{id:"toarray"}),"toArray"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let toArray: t('a) => array('a);\n")),(0,i.kt)("p",null,"Converts the given list to an array."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.toArray([1, 2, 3]); /* [|1, 2, 3|] */\n")),(0,i.kt)("h2",s({},{id:"reverse"}),"reverse"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let reverse: t('a) => t('a);\n")),(0,i.kt)("p",null,"Returns a new list whose elements are those of ",(0,i.kt)("inlineCode",{parentName:"p"},"someList")," in reversed order."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.reverse([1, 2, 3]); /* [3, 2, 1] */\n")),(0,i.kt)("h2",s({},{id:"mapreverse"}),"mapReverse"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let mapReverse: (t('a), 'a => 'b) => t('b);\n")),(0,i.kt)("p",null,"Equivalent to:"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"map(someList, f)->reverse;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"[3, 4, 5]->Belt.List.mapReverse(x => x * x); /* [25, 16, 9] */\n")),(0,i.kt)("h2",s({},{id:"mapreverseu"}),"mapReverseU"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let mapReverseU: (t('a), [@bs] ('a => 'b)) => t('b);\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#mapReverse"}),"mapReverse"),"."),(0,i.kt)("h2",s({},{id:"foreach"}),"forEach"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let forEach: (t('a), 'a => 'b) => unit;\n")),(0,i.kt)("p",null,"Call ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," on each element of ",(0,i.kt)("inlineCode",{parentName:"p"},"someList")," from the beginning to end.\n",(0,i.kt)("inlineCode",{parentName:"p"},"f")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"unit"),", so no new array is created. Use ",(0,i.kt)("inlineCode",{parentName:"p"},"forEach")," when you are primarily concerned with repetitively creating side effects."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),'Belt.List.forEach(["a", "b", "c"], x => Js.log("Item: " ++ x));\n/*\n  prints:\n    Item: a\n    Item: b\n    Item: c\n*/\n')),(0,i.kt)("h2",s({},{id:"foreachu"}),"forEachU"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let forEachU: (t('a), [@bs] ('a => 'b)) => unit;\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#forEach"}),"forEach"),"."),(0,i.kt)("h2",s({},{id:"foreachwithindex"}),"forEachWithIndex"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let forEachWithIndex: (t('a), (int, 'a) => 'b) => unit;\n")),(0,i.kt)("p",null,"Call ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," on each element of ",(0,i.kt)("inlineCode",{parentName:"p"},"someList")," from beginning to end.\nFunction ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," takes two arguments: the index starting from 0 and the element from ",(0,i.kt)("inlineCode",{parentName:"p"},"someList"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"unit"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),'Belt.List.forEachWithIndex(["a", "b", "c"], (index, x) => Js.log("Item " ++ string_of_int(index) ++ " is " ++ x));\n/*  prints:\n      Item 0 is a\n      Item 1 is b\n      Item 2 is cc\n    */\n')),(0,i.kt)("h2",s({},{id:"foreachwithindexu"}),"forEachWithIndexU"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let forEachWithIndexU: (t('a), [@bs] ((int, 'a) => 'b)) => unit;\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#forEachWithIndex"}),"forEachWithIndex"),"."),(0,i.kt)("h2",s({},{id:"reduce"}),"reduce"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let reduce: (t('a), 'b, ('b, 'a) => 'b) => 'b;\n")),(0,i.kt)("p",null,"Applies ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," to each element of ",(0,i.kt)("inlineCode",{parentName:"p"},"someList")," from beginning to end. Function ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," has two parameters: the item from the list and an \u201caccumulator\u201d, which starts with a value of ",(0,i.kt)("inlineCode",{parentName:"p"},"initialValue"),". reduce returns the final value of the accumulator."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"[1, 2, 3, 4]->Belt.List.reduce(0, (+)); /* 10 */\n\n/* same as */\n\n[1, 2, 3, 4]->Belt.List.reduce(0, (acc, item) => acc + item); /* 10 */\n")),(0,i.kt)("h2",s({},{id:"reduceu"}),"reduceU"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let reduceU: (t('a), 'b, [@bs] (('b, 'a) => 'b)) => 'b;\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#reduce"}),"reduce"),"."),(0,i.kt)("h2",s({},{id:"reducewithindex"}),"reduceWithIndex"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let reduceWithIndex: (t('a), 'b, ('b, 'a, int) => 'b) => 'b;\n")),(0,i.kt)("p",null,"Applies ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," to each element of ",(0,i.kt)("inlineCode",{parentName:"p"},"someList")," from beginning to end. Function ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," has three parameters: the item from the list and an \u201caccumulator\u201d, which starts with a value of ",(0,i.kt)("inlineCode",{parentName:"p"},"initialValue")," and the index of each element. ",(0,i.kt)("inlineCode",{parentName:"p"},"reduceWithIndex")," returns the final value of the accumulator."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"[1, 2, 3, 4]->Belt.List.reduceWithIndex(0, (acc, item, index) => acc + item + index); /* 16 */\n")),(0,i.kt)("h2",s({},{id:"reducewithindexu"}),"reduceWithIndexU"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let reduceWithIndexU: (t('a), 'b, [@bs] (('b, 'a, int) => 'b)) => 'b;\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#reduceWithIndex"}),"reduceWithIndex"),"."),(0,i.kt)("h2",s({},{id:"reducereverse"}),"reduceReverse"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let reduceReverse: (t('a), 'b, ('b, 'a) => 'b) => 'b;\n")),(0,i.kt)("p",null,"Works like ",(0,i.kt)("a",s({parentName:"p"},{href:"#reduce"}),"reduce"),", except that function ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," is applied to each item of ",(0,i.kt)("inlineCode",{parentName:"p"},"someList")," from the last back to the first."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"[1, 2, 3, 4]->Belt.List.reduceReverse(0, (+)); /* 10 */\n\n[1, 2, 3, 4]->Belt.List.reduceReverse(10, (-)); /* 0 */\n\n[1, 2, 3, 4]->Belt.List.reduceReverse([], Belt.List.add); /* [1, 2, 3, 4] */\n")),(0,i.kt)("h2",s({},{id:"reducereverseu"}),"reduceReverseU"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let reduceReverseU: (t('a), 'b, [@bs] (('b, 'a) => 'b)) => 'b;\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#reduceReverse"}),"reduceReverse"),"."),(0,i.kt)("h2",s({},{id:"mapreverse2"}),"mapReverse2"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let mapReverse2: (t('a), t('b), ('a, 'b) => 'c) => t('c);\n")),(0,i.kt)("p",null,"Equivalent to: ",(0,i.kt)("inlineCode",{parentName:"p"},"zipBy(xs, ys, f)->reverse")),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"\nBelt.List.mapReverse2([1, 2, 3], [1, 2], (+)); /* [4, 2] */\n")),(0,i.kt)("h2",s({},{id:"mapreverse2u"}),"mapReverse2U"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let mapReverse2U: (t('a), t('b), [@bs] (('a, 'b) => 'c)) => t('c);\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#mapReverse2"}),"mapReverse2"),"."),(0,i.kt)("h2",s({},{id:"foreach2"}),"forEach2"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let forEach2: (t('a), t('b), ('a, 'b) => 'c) => unit;\n")),(0,i.kt)("p",null,"Stops at the length of the shorter list."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),'Belt.List.forEach2(["Z", "Y"], ["A", "B", "C"], (x, y) => Js.log2(x, y));\n\n/* prints:\n"Z" "A"\n"Y" "B"\n*/\n')),(0,i.kt)("h2",s({},{id:"foreach2u"}),"forEach2U"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let forEach2U: (t('a), t('b), (.'a, 'b) => 'c) => unit;\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#forEach2"}),"forEach2"),"."),(0,i.kt)("h2",s({},{id:"reduce2"}),"reduce2"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let reduce2: (t('b), t('c), 'a, ('a, 'b, 'c) => 'a) => 'a;\n")),(0,i.kt)("p",null,"Applies ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," to each element of ",(0,i.kt)("inlineCode",{parentName:"p"},"firstList")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"secondList")," from beginning to end. Stops with the shorter list. Function ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," has three parameters: an \u201caccumulator\u201d which starts with a value of ",(0,i.kt)("inlineCode",{parentName:"p"},"initialValue"),", an item from ",(0,i.kt)("inlineCode",{parentName:"p"},"firstList"),", and an item from ",(0,i.kt)("inlineCode",{parentName:"p"},"secondList"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"reduce2")," returns the final value of the accumulator."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.reduce2([1, 2, 3], [4, 5], 0, (acc, x, y) => acc + x * x + y); /* 0 + (1 * 1 + 4) + (2 * 2 + 5) */\n")),(0,i.kt)("h2",s({},{id:"reduce2u"}),"reduce2U"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let reduce2U: (t('b), t('c), 'a, (.'a, 'b, 'c) => 'a) => 'a;\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#reduce2"}),"reduce2"),"."),(0,i.kt)("h2",s({},{id:"reducereverse2"}),"reduceReverse2"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let reduceReverse2: (t('a), t('b), 'c, ('c, 'a, 'b) => 'c) => 'c;\n")),(0,i.kt)("p",null,"Applies ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," to each element of ",(0,i.kt)("inlineCode",{parentName:"p"},"firstList")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"secondList")," from end to beginning. Stops with the shorter list. Function ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," has three parameters: an \u201caccumulator\u201d which starts with a value of init, an item from ",(0,i.kt)("inlineCode",{parentName:"p"},"firstList"),", and an item from ",(0,i.kt)("inlineCode",{parentName:"p"},"secondList"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"reduce2")," returns the final value of the accumulator."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.reduceReverse2([1, 2, 3], [4, 5], 0, (acc, x, y) => acc + x * x + y); /*  + (1 * 1 + 4) + (2 * 2 + 5) */\n")),(0,i.kt)("h2",s({},{id:"reducereverse2u"}),"reduceReverse2U"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let reduceReverse2U: (t('a), t('b), 'c, (.'c, 'a, 'b) => 'c) => 'c;\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#reduceReverse2"}),"reduceReverse2"),"."),(0,i.kt)("h2",s({},{id:"every"}),"every"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let every: (t('a), 'a => bool) => bool;\n")),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if all elements satisfy ",(0,i.kt)("inlineCode",{parentName:"p"},"pred"),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"pred")," is a predicate: a function taking an element and returning a bool."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"let isBelow10 = value => value < 10;\n\n[1, 9, 8, 2]->Belt.List.every(isBelow10); /* true */\n\n[1, 99, 8, 2]->Belt.List.every(isBelow10); /* false */\n")),(0,i.kt)("h2",s({},{id:"everyu"}),"everyU"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let everyU: (t('a), (.'a) => bool) => bool;\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#every"}),"every"),"."),(0,i.kt)("h2",s({},{id:"some"}),"some"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let some: (t('a), 'a => bool) => bool;\n")),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if at least ",(0,i.kt)("em",{parentName:"p"},"one")," of the elements in ",(0,i.kt)("inlineCode",{parentName:"p"},"someList")," satisfies ",(0,i.kt)("inlineCode",{parentName:"p"},"pred"),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"pred")," is a predicate: a function taking an element and returning a bool."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"let isAbove100 = value => value > 100;\n\n[101, 1, 2, 3]->Belt.List.some(isAbove100); /* true */\n\n[1, 2, 3, 4]->Belt.List.some(isAbove100); /* false */\n")),(0,i.kt)("h2",s({},{id:"someu"}),"someU"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let someU: (t('a), (.'a => bool)) => bool;\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#some"}),"some"),"."),(0,i.kt)("h2",s({},{id:"every2"}),"every2"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let every2: (t('a), t('b), ('a, 'b) => bool) => bool;\n")),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if predicate ",(0,i.kt)("inlineCode",{parentName:"p"},"pred(a, b)")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," for all pairs of elements up to the shorter length (i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"min(length(firstList), length(secondList))"),")"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.every2([1, 2, 3], [0, 1], (>)); /* true */\n\nBelt.List.every2([], [1], (a, b) => a > b); /* true */\n\nBelt.List.every2([2, 3], [1], (a, b) => a > b); /* true */\n\nBelt.List.every2([0, 1], [5, 0], (a, b) => a > b); /* false */\n")),(0,i.kt)("h2",s({},{id:"every2u"}),"every2U"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let every2U: (t('a), t('b), [@bs] (('a, 'b) => bool)) => bool;\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#every2"}),"every2"),"."),(0,i.kt)("h2",s({},{id:"some2"}),"some2"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let some2: (t('a), t('b), ('a, 'b) => bool) => bool;\n")),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if predicate ",(0,i.kt)("inlineCode",{parentName:"p"},"pred(a, b)")," is true for any pair of elements up to the shorter length (i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"min(length(firstList), length(secondList))"),")"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.some2([1, 2, 3], [0, 1], (>)); /* true */\n\nBelt.List.some2([], [1], (a, b) => a > b); /* false */\n\nBelt.List.some2([2, 3], [1], (a, b) => a > b); /* true */\n\nBelt.List.some2([0, 1], [5, 0], (a, b) => a > b); /* true */\n")),(0,i.kt)("h2",s({},{id:"some2u"}),"some2U"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let some2U: (t('a), t('b), [@bs] (('a, 'b) => bool)) => bool;\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#some2"}),"some2"),"."),(0,i.kt)("h2",s({},{id:"cmpbylength"}),"cmpByLength"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let cmpByLength: (t('a), t('a)) => int;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"cmpByLength(firstList, secondList);\n")),(0,i.kt)("p",null,"Compare two lists solely by length. Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"-1")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"length(firstList)")," is less than ",(0,i.kt)("inlineCode",{parentName:"p"},"length(secondList)"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"length(firstList)")," equals ",(0,i.kt)("inlineCode",{parentName:"p"},"length(secondList)"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"length(firstList)")," is greater than ",(0,i.kt)("inlineCode",{parentName:"p"},"length(secondList)"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.cmpByLength([1, 2], [3, 4, 5, 6]); /* (-1) */\n\nBelt.List.cmpByLength([1, 2, 3], [4, 5, 6]); /* = 0 */\n\nBelt.List.cmpByLength([1, 2, 3, 4], [5, 6]); /* = 1 */\n")),(0,i.kt)("h2",s({},{id:"cmp"}),"cmp"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let cmp: (t('a), t('a), ('a, 'a) => int) => int;\n")),(0,i.kt)("p",null,"Compare elements one by one ",(0,i.kt)("inlineCode",{parentName:"p"},"compareFn(a, b)"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"compareFn")," returns a negative number if ",(0,i.kt)("inlineCode",{parentName:"p"},"a"),' is "less than" ',(0,i.kt)("inlineCode",{parentName:"p"},"b"),", zero if ",(0,i.kt)("inlineCode",{parentName:"p"},"a"),' is "equal to" ',(0,i.kt)("inlineCode",{parentName:"p"},"b"),", a positive number if ",(0,i.kt)("inlineCode",{parentName:"p"},"a"),' is "greater than" ',(0,i.kt)("inlineCode",{parentName:"p"},"b"),"."),(0,i.kt)("p",null,"The comparison returns the first non-zero result of ",(0,i.kt)("inlineCode",{parentName:"p"},"compareFn"),", or zero if ",(0,i.kt)("inlineCode",{parentName:"p"},"compareFn")," returns zero for all ",(0,i.kt)("inlineCode",{parentName:"p"},"a")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"b"),"."),(0,i.kt)("p",null,"If all items have compared equal, but ",(0,i.kt)("inlineCode",{parentName:"p"},"firstList")," is exhausted first, return ",(0,i.kt)("inlineCode",{parentName:"p"},"-1"),". (",(0,i.kt)("inlineCode",{parentName:"p"},"firstList")," is shorter).\nIf all items have compared equal, but ",(0,i.kt)("inlineCode",{parentName:"p"},"secondList")," is exhausted first, return ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," (",(0,i.kt)("inlineCode",{parentName:"p"},"firstList")," is longer)."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.cmp([3], [3, 7], (a, b) => compare(a, b)); /* (-1) */\n\nBelt.List.cmp([5, 3], [5], (a, b) => compare(a, b)); /* 1 */\n\nBelt.List.cmp([1, 3, 5], [1, 4, 2], (a, b) => compare(a, b)); /* (-1) */\n\nBelt.List.cmp([1, 3, 5], [1, 2, 3], (a, b) => compare(a, b)); /* 1 */\n\nBelt.List.cmp([1, 3, 5], [1, 3, 5], (a, b) => compare(a, b)); /* 0 */\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Please note:")," The total ordering of List is different from Array,\nfor Array, we compare the length first and, only if the lengths are equal, elements one by one.\nFor lists, we just compare elements one by one."),(0,i.kt)("h2",s({},{id:"cmpu"}),"cmpU"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let cmpU: (t('a), t('a), [@bs] (('a, 'a) => int)) => int;\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#cmp"}),"cmp"),"."),(0,i.kt)("h2",s({},{id:"eq"}),"eq"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let eq: (t('a), t('a), ('a, 'a) => bool) => bool;\n")),(0,i.kt)("p",null,"Check equality of ",(0,i.kt)("inlineCode",{parentName:"p"},"firstList")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"secondList")," using ",(0,i.kt)("inlineCode",{parentName:"p"},"eqElem")," for equality on elements, where ",(0,i.kt)("inlineCode",{parentName:"p"},"eqElem")," is a function that returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if items ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"y")," meet some criterion for equality, ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," otherwise. eq ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," if length of ",(0,i.kt)("inlineCode",{parentName:"p"},"firstList")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"secondList")," are not the same."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.eq([1, 2, 3], [1, 2], (==)); /* false */\n\nBelt.List.eq([1, 2], [1, 2], (==)); /* true */\n\nBelt.List.eq([1, 2, 3], [(-1), (-2), (-3)], (a, b) => abs(a) == abs(b)); /* true */\n")),(0,i.kt)("h2",s({},{id:"equ"}),"eqU"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let eqU: (t('a), t('a), [@bs] (('a, 'a) => bool)) => bool;\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#eqU"}),"eqU"),"."),(0,i.kt)("h2",s({},{id:"has"}),"has"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let has: (t('a), 'b, ('a, 'b) => bool) => bool;\n")),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if the list contains at least one element for which ",(0,i.kt)("inlineCode",{parentName:"p"},"eqFunction(x)")," returns true."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"[1, 2, 3]->Belt.List.has(2, (==)); /* true */\n\n[1, 2, 3]->Belt.List.has(4, (==)); /* false */\n\n[(-1), (-2), (-3)]->Belt.List.has(2, (a, b) => abs(a) == abs(b)); /* true */\n")),(0,i.kt)("h2",s({},{id:"hasu"}),"hasU"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let hasU: (t('a), 'b, [@bs] (('a, 'b) => bool)) => bool;\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#has"}),"has"),"."),(0,i.kt)("h2",s({},{id:"getby"}),"getBy"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let getBy: (t('a), 'a => bool) => option('a);\n")),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"Some(value)")," for the first value in ",(0,i.kt)("inlineCode",{parentName:"p"},"someList")," that satisfies the predicate function ",(0,i.kt)("inlineCode",{parentName:"p"},"pred"),". Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," if no element satisfies the function."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.getBy([1, 4, 3, 2], x => x > 3); /* Some(4) */\n\nBelt.List.getBy([1, 4, 3, 2], x => x > 4); /* None */\n")),(0,i.kt)("h2",s({},{id:"getbyu"}),"getByU"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let getByU: (t('a), [@bs] ('a => bool)) => option('a);\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#getBy"}),"getBy"),"."),(0,i.kt)("h2",s({},{id:"keep"}),"keep"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let keep: (t('a), 'a => bool) => t('a);\n")),(0,i.kt)("p",null,"Returns a list of all elements in ",(0,i.kt)("inlineCode",{parentName:"p"},"someList")," which satisfy the predicate function ",(0,i.kt)("inlineCode",{parentName:"p"},"pred"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"let isEven = x => x mod 2 == 0;\n\nBelt.List.keep([1, 2, 3, 4], isEven); /* [2, 4] */\n\nBelt.List.keep([None, Some(2), Some(3), None], Belt.Option.isSome); /* [Some(2), Some(3)] */\n")),(0,i.kt)("h2",s({},{id:"keepu"}),"keepU"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let keepU: (t('a), [@bs] ('a => bool)) => t('a);\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#keep"}),"keep"),"."),(0,i.kt)("h2",s({},{id:"filter"}),"filter"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let filter: (t('a), 'a => bool) => t('a);\n")),(0,i.kt)("p",null,"Returns a list of all elements in ",(0,i.kt)("inlineCode",{parentName:"p"},"someList")," which satisfy the predicate function ",(0,i.kt)("inlineCode",{parentName:"p"},"pred"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"let isEven = x => x mod 2 == 0;\n\nBelt.List.filter([1, 2, 3, 4], isEven); /* [2, 4] */\n\nBelt.List.filter([None, Some(2), Some(3), None], Belt.Option.isSome); /* [Some(2), Some(3)] */\n")),(0,i.kt)("h2",s({},{id:"keepwithindex"}),"keepWithIndex"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let keepWithIndex: (t('a), ('a, int) => bool) => t('a);\n")),(0,i.kt)("p",null,"Returns a list of all elements in ",(0,i.kt)("inlineCode",{parentName:"p"},"someList")," which satisfy the predicate function ",(0,i.kt)("inlineCode",{parentName:"p"},"pred"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"let isEven = x => x mod 2 == 0;\n\nBelt.List.keepWithIndex([1, 2, 3, 4], (_x, index) => isEven(index)); /* [1, 3] */\n")),(0,i.kt)("h2",s({},{id:"keepwithindexu"}),"keepWithIndexU"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let keepWithIndexU: (t('a), [@bs] (('a, int) => bool)) => t('a);\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#keepWithIndex"}),"keepWithIndex"),"."),(0,i.kt)("h2",s({},{id:"filterwithindex"}),"filterWithIndex"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let filterWithIndex: (t('a), ('a, int) => bool) => t('a);\n")),(0,i.kt)("p",null,"Returns a list of all elements in ",(0,i.kt)("inlineCode",{parentName:"p"},"someList")," which satisfy the predicate function ",(0,i.kt)("inlineCode",{parentName:"p"},"pred"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"let isEven = x => x mod 2 == 0;\n\nBelt.List.filterWithIndex([1, 2, 3, 4], (_x, index) => isEven(index)); /* [1, 3] */\n")),(0,i.kt)("h2",s({},{id:"keepmap"}),"keepMap"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let keepMap: (t('a), 'a => option('b)) => t('b);\n")),(0,i.kt)("p",null,"Applies ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," to each element of ",(0,i.kt)("inlineCode",{parentName:"p"},"someList"),". If ",(0,i.kt)("inlineCode",{parentName:"p"},"f(x)")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"Some(value)"),", then ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," is ",(0,i.kt)("em",{parentName:"p"},"kept")," in the resulting list.\nIf ",(0,i.kt)("inlineCode",{parentName:"p"},"f(x)")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),", the element is ",(0,i.kt)("em",{parentName:"p"},"not")," retained in the result."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"let isEven = x => x mod 2 == 0;\n\n[1, 2, 3, 4]\n->Belt.List.keepMap(x =>\n    if (isEven(x)) {\n      Some(x);\n    } else {\n      None;\n    }\n  ); /* [2, 4] */\n\n[Some(1), Some(2), None]->Belt.List.keepMap(x => x); /* [1, 2] */\n")),(0,i.kt)("h2",s({},{id:"keepmapu"}),"keepMapU"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let keepMapU: (t('a), [@bs] ('a => option('b))) => t('b);\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#keepMap"}),"keepMap"),"."),(0,i.kt)("h2",s({},{id:"partition"}),"partition"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let partition: (t('a), 'a => bool) => (t('a), t('a));\n")),(0,i.kt)("p",null,"Creates a pair of lists; the first list consists of all elements of ",(0,i.kt)("inlineCode",{parentName:"p"},"someList")," that satisfy the predicate function ",(0,i.kt)("inlineCode",{parentName:"p"},"pred"),"; the second list consists of all elements of ",(0,i.kt)("inlineCode",{parentName:"p"},"someList")," that ",(0,i.kt)("em",{parentName:"p"},"do not")," satisfy `pred."),(0,i.kt)("p",null,"In other words:"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{}),"([elementsThatSatisfies], [elementsThatDoesNotSatisfy]);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.partition([1, 2, 3, 4], x => x > 2); /* ([3, 4], [1, 2]) */\n")),(0,i.kt)("h2",s({},{id:"partitionu"}),"partitionU"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let partitionU: (t('a), [@bs] ('a => bool)) => (t('a), t('a));\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#partition"}),"partition"),"."),(0,i.kt)("h2",s({},{id:"unzip"}),"unzip"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let unzip: t(('a, 'b)) => (t('a), t('b));\n")),(0,i.kt)("p",null,"Takes a list of pairs and creates a pair of lists. The first list contains all the first items of the pairs; the second list contains all the second items."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),'Belt.List.unzip([(1, 2), (3, 4)]); /* ([1, 3], [2, 4]) */\n\nBelt.List.unzip([("H", "W"), ("e", "o"), ("l", "r"), ("l", "l"), ("o", "d"), (" ", "!")]);\n/* (["H", "e", "l", "l", "o", " "], ["W", "o", "r", "l", "d", "!"]); */\n')),(0,i.kt)("h2",s({},{id:"getassoc"}),"getAssoc"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let getAssoc: (t(('a, 'c)), 'b, ('a, 'b) => bool) => option('c);\n")),(0,i.kt)("p",null,"Return the second element of a pair in ",(0,i.kt)("inlineCode",{parentName:"p"},"someList")," where the first element equals ",(0,i.kt)("inlineCode",{parentName:"p"},"k")," as per the predicate function ",(0,i.kt)("inlineCode",{parentName:"p"},"eqFunction"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," if not found."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),'[(1, "a"), (2, "b"), (3, "c")]->Belt.List.getAssoc(3, (==)); /* Some("c") */\n\n[(9, "morning"), (15, "afternoon"), (22, "night")]\n->Belt.List.getAssoc(15, (k, item) => k /* 15 */ == item /* 9, 5, 22 */);\n/* Some("afternoon"); */\n')),(0,i.kt)("h2",s({},{id:"getassocu"}),"getAssocU"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let getAssocU: (t(('a, 'c)), 'b, [@bs] (('a, 'b) => bool)) => option('c);\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#getAssoc"}),"getAssoc"),"."),(0,i.kt)("h2",s({},{id:"hasassoc"}),"hasAssoc"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let hasAssoc: (t(('a, 'c)), 'b, ('a, 'b) => bool) => bool;\n")),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if there is a pair in ",(0,i.kt)("inlineCode",{parentName:"p"},"someList")," where the first element equals ",(0,i.kt)("inlineCode",{parentName:"p"},"k")," as per the predicate function ",(0,i.kt)("inlineCode",{parentName:"p"},"eqFunction"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),'[(1, "a"), (2, "b"), (3, "c")]->Belt.List.hasAssoc(1, (==)); /* true */\n\n[(9, "morning"), (15, "afternoon"), (22, "night")]\n->Belt.List.hasAssoc(25, (k, item) => k /* 25 */ == item /* 9, 5, 22 */); /* false */\n')),(0,i.kt)("h2",s({},{id:"hasassocu"}),"hasAssocU"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let hasAssocU: (t(('a, 'c)), 'b, [@bs] (('a, 'b) => bool)) => bool;\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#hasAssoc"}),"hasAssoc"),"."),(0,i.kt)("h2",s({},{id:"removeassoc"}),"removeAssoc"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let removeAssoc: (t(('a, 'c)), 'b, ('a, 'b) => bool) => t(('a, 'c));\n")),(0,i.kt)("p",null,"Return a list after removing the first pair whose first value is ",(0,i.kt)("inlineCode",{parentName:"p"},"k")," per the equality predicate ",(0,i.kt)("inlineCode",{parentName:"p"},"eqFunction"),"; if not found, return a new list identical to ",(0,i.kt)("inlineCode",{parentName:"p"},"someList"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),'[(1, "a"), (2, "b"), (3, "c")]->Belt.List.removeAssoc(1, (==)); /* [(2, "b"), (3, "c")] */\n\n[(9, "morning"), (15, "afternoon"), (22, "night")]\n->Belt.List.removeAssoc(9, (k, item) => k /* 9 */ == item /* 9, 5, 22 */);\n/* [(15, "afternoon"), (22, "night")] */\n')),(0,i.kt)("h2",s({},{id:"removeassocu"}),"removeAssocU"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let removeAssocU: (t(('a, 'c)), 'b, [@bs] (('a, 'b) => bool)) => t(('a, 'c));\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#removeAssoc"}),"removeAssoc"),"."),(0,i.kt)("h2",s({},{id:"setassoc"}),"setAssoc"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let setAssoc: (t(('a, 'c)), 'a, 'c, ('a, 'a) => bool) => t(('a, 'c));\n")),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"k")," exists in ",(0,i.kt)("inlineCode",{parentName:"p"},"someList")," by satisfying the ",(0,i.kt)("inlineCode",{parentName:"p"},"eqFunction")," predicate, return a new list with the key and value replaced by the new ",(0,i.kt)("inlineCode",{parentName:"p"},"k")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"v"),"; otherwise, return a new list with the pair ",(0,i.kt)("inlineCode",{parentName:"p"},"k"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"v")," added to the head of ",(0,i.kt)("inlineCode",{parentName:"p"},"someList"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),'[(1, "a"), (2, "b"), (3, "c")]->Belt.List.setAssoc(2, "x", (==)); /* [(1, "a"), (2, "x"), (3, "c")]; */\n\n[(1, "a"), (3, "c")]->Belt.List.setAssoc(2, "b", (==)); /* [(2, "b"), (1, "a"), (3, "c")] */\n\n[(9, "morning"), (3, "morning?!"), (22, "night")]\n->Belt.List.setAssoc(15, "afternoon", (a, b) => a mod 12 == b mod 12);\n/* [(9, "morning"), (15, "afternoon"), (22, "night")] */\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Please note")),(0,i.kt)("p",null,"In the last example, since: ",(0,i.kt)("inlineCode",{parentName:"p"},"15 mod 12")," equals ",(0,i.kt)("inlineCode",{parentName:"p"},"3 mod 12")),(0,i.kt)("p",null,"Both the key ",(0,i.kt)("em",{parentName:"p"},"and")," the value are replaced in the list."),(0,i.kt)("h2",s({},{id:"setassocu"}),"setAssocU"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let setAssocU: (t(('a, 'c)), 'a, 'c, [@bs] (('a, 'a) => bool)) => t(('a, 'c));\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#setAssoc"}),"setAssoc"),"."),(0,i.kt)("h2",s({},{id:"sort"}),"sort"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let sort: (t('a), ('a, 'a) => int) => t('a);\n")),(0,i.kt)("p",null,"Returns a sorted list."),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"example",example:!0}),"Belt.List.sort([5, 4, 9, 3, 7], (a, b) => a - b); /* [3, 4, 5, 7, 9] */\n")),(0,i.kt)("h2",s({},{id:"sortu"}),"sortU"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-re",metastring:"sig",sig:!0}),"let sortU: (t('a), [@bs] (('a, 'a) => int)) => t('a);\n")),(0,i.kt)("p",null,"Uncurried version of ",(0,i.kt)("a",s({parentName:"p"},{href:"#sort"}),"sort"),"."))}k.isMDXComponent=!0,k.frontmatter={__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v8.0.0/api/belt/list.mdx"}},55595:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v8.0.0/api/belt/list",function(){return a(53879)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=55595,e(e.s=t);var t}));var t=e.O();_N_E=t}]);