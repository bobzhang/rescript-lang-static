(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[71629],{17375:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}n.d(t,{Z:function(){return a}})},39021:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return p}});var a=n(96156),r=n(17375),i=(n(67294),n(3905));function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){(0,a.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var s={};function p(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",l(l(l({},s),n),{},{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",l({},{id:"shared-data-types"}),"Shared Data Types"),(0,i.kt)("p",null,"ReScript's built-in values of type ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"array")," and a few others have a rather interesting property: they compile to the exact same value in JavaScript!"),(0,i.kt)("p",null,"This means that if you're passing e.g. a ReScript string to the JavaScript side, the JS side can directly use it as a native JS string. It also means that you can import a JS string and pretend it's a native ReScript string."),(0,i.kt)("p",null,"Unlike most compiled-to-js languages, in ReScript, ",(0,i.kt)("strong",{parentName:"p"},"you don't need to write data converters back and forth for most of our values"),"!"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Shared, bidirectionally usable types"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"String. Backtick strings like ",(0,i.kt)("inlineCode",{parentName:"li"},"`hello $(personName)`")," (in old ML syntax: ",(0,i.kt)("inlineCode",{parentName:"li"},"{j|hello $(personName)|j}"),") support interpolation. Normal ",(0,i.kt)("inlineCode",{parentName:"li"},'"hello"')," strings don't."),(0,i.kt)("li",{parentName:"ul"},"Float. ReScript floats are JS numbers, vice-versa."),(0,i.kt)("li",{parentName:"ul"},"Array. In addition to the ",(0,i.kt)("a",l({parentName:"li"},{href:"api/js/array"}),"JS Array API"),", we provide our own ",(0,i.kt)("a",l({parentName:"li"},{href:"api/belt/array#set"}),"Belt.Array")," API too."),(0,i.kt)("li",{parentName:"ul"},"Tuple. Compiles to a JS array. You can treat a fixed-sized, heterogenous JS array as ReScript tuple too."),(0,i.kt)("li",{parentName:"ul"},"Boolean."),(0,i.kt)("li",{parentName:"ul"},"Record. Record compiles to JS object. Therefore you can also treat JS objects as records. If they're too dynamic, consider modeling them on the ReScript side as a hashmap/dictionary ",(0,i.kt)("a",l({parentName:"li"},{href:"api/js/dict"}),(0,i.kt)("inlineCode",{parentName:"a"},"Js.Dict"))," or a ReScript object."),(0,i.kt)("li",{parentName:"ul"},"Object. ReScript objects are JavaScript objects, vice-versa."),(0,i.kt)("li",{parentName:"ul"},"Function. They compile to clean JS functions."),(0,i.kt)("li",{parentName:"ul"},"Module. ReScript files are considered top-level modules, and are compiled to JS files 1 to 1. Nested modules are compiled to JavaScript objects."),(0,i.kt)("li",{parentName:"ul"},"Unit. The ",(0,i.kt)("inlineCode",{parentName:"li"},"unit")," type, which has a single value ",(0,i.kt)("inlineCode",{parentName:"li"},"()"),", compiles to ",(0,i.kt)("inlineCode",{parentName:"li"},"undefined")," too. Likewise, you can treat an incoming JS ",(0,i.kt)("inlineCode",{parentName:"li"},"undefined")," as ",(0,i.kt)("inlineCode",{parentName:"li"},"()"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Types that are slightly different than JS, but that you can still use from JS"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Int. ",(0,i.kt)("strong",{parentName:"li"},"Ints are 32-bits"),"! Be careful, you can potentially treat them as JS numbers and vice-versa, but if the number's large, then you better treat JS numbers as floats. For example, we bind to ",(0,i.kt)("a",l({parentName:"li"},{href:"api/js/date"}),(0,i.kt)("inlineCode",{parentName:"a"},"Js.Date"))," using ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),"s."),(0,i.kt)("li",{parentName:"ul"},"Option. The ",(0,i.kt)("inlineCode",{parentName:"li"},"option")," type's ",(0,i.kt)("inlineCode",{parentName:"li"},"None")," value compiles into JS ",(0,i.kt)("inlineCode",{parentName:"li"},"undefined"),". The ",(0,i.kt)("inlineCode",{parentName:"li"},"Some")," value, e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"Some(5)"),", compiles to ",(0,i.kt)("inlineCode",{parentName:"li"},"5"),". Likewise, you can treat an incoming JS ",(0,i.kt)("inlineCode",{parentName:"li"},"undefined")," as ",(0,i.kt)("inlineCode",{parentName:"li"},"None"),". ",(0,i.kt)("strong",{parentName:"li"},"JS ",(0,i.kt)("inlineCode",{parentName:"strong"},"null")," isn't handled here"),". If your JS value can be ",(0,i.kt)("inlineCode",{parentName:"li"},"null"),", use ",(0,i.kt)("a",l({parentName:"li"},{href:"api/js/nullable"}),"Js.Nullable")," helpers."),(0,i.kt)("li",{parentName:"ul"},"Exception.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Non-shared types (aka internal types)"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Variant. They don't exist in JS."),(0,i.kt)("li",{parentName:"ul"},"List, which is just a regular variant."),(0,i.kt)("li",{parentName:"ul"},"Character."),(0,i.kt)("li",{parentName:"ul"},"Int64."),(0,i.kt)("li",{parentName:"ul"},"Lazy values."),(0,i.kt)("li",{parentName:"ul"},"Everything else.")),(0,i.kt)("p",null,"The non-shared types need your manual conversions if you want to export them for JS consumption. For a seamless JS / TypeScript / Flow integration experience, you might want to use ",(0,i.kt)("a",l({parentName:"p"},{href:"https://github.com/cristianoc/gentype"}),"genType")," instead of doing conversions by hand."))}p.isMDXComponent=!0,p.frontmatter={title:"Shared Data Types",description:"Data types that share runtime presentation between JS and ReScript",canonical:"/docs/manual/latest/shared-data-types",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v8.0.0/shared-data-types.mdx"}},96377:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v8.0.0/shared-data-types",function(){return n(39021)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=96377,e(e.s=t);var t}));var t=e.O();_N_E=t}]);