(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3050],{17375:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}n.d(t,{Z:function(){return a}})},79483:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return c}});var a=n(17375),r=n(96156),o=(n(67294),n(3905));function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var p,u=(p="CodeTab",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",i({},e))}),s={};function c(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",i(i(i({},s),n),{},{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",i({},{id:"mutation"}),"Mutation"),(0,o.kt)("p",null,"ReScript has great traditional imperative & mutative programming capabilities. You should use these features sparingly, but sometimes they allow your code to be more performant and written in a more familiar pattern."),(0,o.kt)("h2",i({},{id:"mutate-let-binding"}),"Mutate Let-binding"),(0,o.kt)("p",null,"Let-bindings are immutable, but you can wrap it with a ",(0,o.kt)("inlineCode",{parentName:"p"},"ref"),", exposed as a record with a single mutable field in the standard library:"),(0,o.kt)(u,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-re"}),"let myValue = ref(5);\n")),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-ml"}),"let myValue = ref 5\n")),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-js"}),"var myValue = {\n  contents: 5\n};\n"))),(0,o.kt)("h2",i({},{id:"usage"}),"Usage"),(0,o.kt)("p",null,"You can get the actual value of a ",(0,o.kt)("inlineCode",{parentName:"p"},"ref")," box through accessing its ",(0,o.kt)("inlineCode",{parentName:"p"},"contents")," field:"),(0,o.kt)(u,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-re"}),"let five = myValue.contents; // 5\n")),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-ml"}),"let five = myValue.contents (* 5 *)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-js"}),"var five = myValue.contents;\n"))),(0,o.kt)("p",null,"We provide a syntax shortcut for ",(0,o.kt)("inlineCode",{parentName:"p"},"myValue.contents"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"myValue^"),". Though we no longer encourage it."),(0,o.kt)("p",null,"Assign a new value to ",(0,o.kt)("inlineCode",{parentName:"p"},"myValue")," like so:"),(0,o.kt)(u,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-re"}),"myValue.contents = 6;\n")),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-ml"}),"myValue.contents = 6\n")),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-js"}),"myValue.contents = 6;\n"))),(0,o.kt)("p",null,"We provide a syntax sugar for this:"),(0,o.kt)(u,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-re"}),"myValue := 6;\n")),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-ml"}),"myValue := 6\n")),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-js"}),"myValue.contents = 6;\n"))),(0,o.kt)("p",null,"Note that the previous binding ",(0,o.kt)("inlineCode",{parentName:"p"},"five")," stays ",(0,o.kt)("inlineCode",{parentName:"p"},"5"),", since it got the underlying item on the ",(0,o.kt)("inlineCode",{parentName:"p"},"ref")," box, not the ",(0,o.kt)("inlineCode",{parentName:"p"},"ref")," itself."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note"),": you might see in the JS output tabs above that ",(0,o.kt)("inlineCode",{parentName:"p"},"ref")," allocates an object. Worry not; local, non-exported ",(0,o.kt)("inlineCode",{parentName:"p"},"ref"),"s allocations are optimized away."),(0,o.kt)("h2",i({},{id:"tip--tricks"}),"Tip & Tricks"),(0,o.kt)("p",null,"Before reaching for ",(0,o.kt)("inlineCode",{parentName:"p"},"ref"),', know that you can achieve lightweight, local "mutations" through ',(0,o.kt)("a",i({parentName:"p"},{href:"let-binding.md#binding-shadowing"}),"overriding let bindings"),"."))}c.isMDXComponent=!0,c.frontmatter={title:"Mutation",description:"Imperative and mutative programming capabilities in ReScript",canonical:"/docs/manual/latest/mutation",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v8.0.0/mutation.mdx"}},65176:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v8.0.0/mutation",function(){return n(79483)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=65176,e(e.s=t);var t}));var t=e.O();_N_E=t}]);