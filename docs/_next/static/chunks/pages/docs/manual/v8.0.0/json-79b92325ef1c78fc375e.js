(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[83733],{17375:function(e,n,t){"use strict";function r(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}t.d(n,{Z:function(){return r}})},4078:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return c}});var r=t(17375),a=t(96156),s=(t(67294),t(3905));function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){(0,a.Z)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var i,p=(i="CodeTab",function(e){return console.warn("Component "+i+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",l({},e))}),u={};function c(e){var n=e.components,t=(0,r.Z)(e,["components"]);return(0,s.kt)("wrapper",l(l(l({},u),t),{},{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",l({},{id:"json"}),"JSON"),(0,s.kt)("h2",l({},{id:"parse"}),"Parse"),(0,s.kt)("p",null,"Bind to JavaScript's ",(0,s.kt)("inlineCode",{parentName:"p"},"JSON.parse")," and type the return value as the type you're expecting:"),(0,s.kt)(p,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",l({parentName:"pre"},{className:"language-re"}),'// declare the shape of the json you\'re binding to\ntype data = {names: array(string)};\n\n// bind to JS\' JSON.parse\n[@bs.scope "JSON"] [@bs.val]\nexternal parseIntoMyData: string => data = "parse";\n\nlet result = parseIntoMyData({|{"names": ["Luke", "Christine"]}|});\nlet name1 = result.names[0];\n')),(0,s.kt)("pre",null,(0,s.kt)("code",l({parentName:"pre"},{className:"language-ml"}),'(* declare the shape of the json you\'re binding to *)\ntype data = {names: string array}\n\n(* bind to JS\' JSON.parse *)\nexternal parseIntoMyData: string -> data = "parse"\n[@@bs.scope "JSON"] [@@bs.val]\n\nlet result = parseIntoMyData {|{"names": ["Luke", "Christine"]}|}\nlet name1 = (result.names).(0)\n')),(0,s.kt)("pre",null,(0,s.kt)("code",l({parentName:"pre"},{className:"language-js"}),'var result = JSON.parse("{\\"names\\": [\\"Luke\\", \\"Christine\\"]}");\nvar name1 = result.names[0];\n'))),(0,s.kt)("p",null,"Where ",(0,s.kt)("inlineCode",{parentName:"p"},"data")," can be any type you assume the JSON is. As you can see, this compiles to a straightforward ",(0,s.kt)("inlineCode",{parentName:"p"},"JSON.parse")," call. As with regular JS, this is convenient, but has no guarantee that e.g. the data is correctly shaped, or even syntactically valid. Slightly dangerous."),(0,s.kt)("h2",l({},{id:"stringify"}),"Stringify"),(0,s.kt)("p",null,"Use ",(0,s.kt)("inlineCode",{parentName:"p"},"Js.Json.stringify"),":"),(0,s.kt)(p,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",l({parentName:"pre"},{className:"language-re"}),'Js.log(Js.Json.stringifyAny([|"Amy", "Joe"|]));\n')),(0,s.kt)("pre",null,(0,s.kt)("code",l({parentName:"pre"},{className:"language-ml"}),'Js.log (Js.Json.stringifyAny [|"Amy"; "Joe"|])\n')),(0,s.kt)("pre",null,(0,s.kt)("code",l({parentName:"pre"},{className:"language-js"}),'console.log(JSON.stringify([\n  "Amy",\n  "Joe"\n]));\n'))),(0,s.kt)("h2",l({},{id:"advanced"}),"Advanced"),(0,s.kt)("p",null,"The ",(0,s.kt)("a",l({parentName:"p"},{href:"api/js/json"}),"Js.Json")," module provides slightly safer, low-level building blocks for power users who want to parse JSON on a per-field basis. See the examples in the API docs."))}c.isMDXComponent=!0,c.frontmatter={title:"JSON",description:"Interacting with JSON in ReScript",canonical:"/docs/manual/latest/json",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v8.0.0/json.mdx"}},16440:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v8.0.0/json",function(){return t(4078)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return n=16440,e(e.s=n);var n}));var n=e.O();_N_E=n}]);