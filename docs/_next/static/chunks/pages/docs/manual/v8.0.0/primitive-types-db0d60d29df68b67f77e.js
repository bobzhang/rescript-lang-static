(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[33049],{17375:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}n.d(t,{Z:function(){return a}})},22354:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return m}});var a=n(17375),r=n(96156),l=(n(67294),n(3905));function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var p,s=(p="CodeTab",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",o({},e))}),u={};function m(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,l.kt)("wrapper",o(o(o({},u),n),{},{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",o({},{id:"primitive-types"}),"Primitive Types"),(0,l.kt)("p",null,"ReScript comes with the familiar primitive types like ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"float"),", etc."),(0,l.kt)("h2",o({},{id:"string"}),"String"),(0,l.kt)("p",null,"ReScript ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),"s are delimited using ",(0,l.kt)("strong",{parentName:"p"},"double")," quotes (single quotes are reserved for the character type below)."),(0,l.kt)(s,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",o({parentName:"pre"},{className:"language-re"}),'let greeting = "Hello world!";\nlet multilineGreeting = "Hello\n world!";\n')),(0,l.kt)("pre",null,(0,l.kt)("code",o({parentName:"pre"},{className:"language-ml"}),'let greeting = "Hello world!"\nlet multilineGreeting = "Hello\n world!";\n')),(0,l.kt)("pre",null,(0,l.kt)("code",o({parentName:"pre"},{className:"language-js"}),'var greeting = "Hello world!";\nvar multilineGreeting = "Hello\\n world!";\n'))),(0,l.kt)("p",null,"To concatenate strings, use ",(0,l.kt)("inlineCode",{parentName:"p"},"++"),":"),(0,l.kt)(s,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",o({parentName:"pre"},{className:"language-re"}),'let greetings = "Hello " ++ "world!";\n')),(0,l.kt)("pre",null,(0,l.kt)("code",o({parentName:"pre"},{className:"language-ml"}),'let greetings = "Hello " ^ "world!"\n')),(0,l.kt)("pre",null,(0,l.kt)("code",o({parentName:"pre"},{className:"language-js"}),'var greetings = "Hello world!";\n'))),(0,l.kt)("h3",o({},{id:"string-interpolation"}),"String Interpolation"),(0,l.kt)("p",null,"There's a special syntax for string that allows"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"multiline string just like before"),(0,l.kt)("li",{parentName:"ul"},"Interpolation")),(0,l.kt)(s,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",o({parentName:"pre"},{className:"language-re"}),"let greeting = {j|Hello\nWorld\n$(name)\n|j}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",o({parentName:"pre"},{className:"language-ml"}),"let greeting = {j|Hello\nWorld\n$(name)\n|j}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",o({parentName:"pre"},{className:"language-js"}),'var greeting = "Hello\\nWorld\\n" + name + "\\n";\n'))),(0,l.kt)("p",null,"This is just like JavaScript's backtick string interpolation."),(0,l.kt)("h3",o({},{id:"usage"}),"Usage"),(0,l.kt)("p",null,"See the familiar ",(0,l.kt)("inlineCode",{parentName:"p"},"Js.String")," API in the ",(0,l.kt)("a",o({parentName:"p"},{href:"api/js/string"}),"API docs"),". Since a ReScript string maps to a JavaScript string, you can mix & match the string operations in both standard libraries."),(0,l.kt)("h3",o({},{id:"tips--tricks"}),"Tips & Tricks"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"You have a good type system now"),"! In an untyped language, you'd often overload the meaning of string by using it as:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a unique id: ",(0,l.kt)("inlineCode",{parentName:"li"},'var BLUE_COLOR = "blue"')),(0,l.kt)("li",{parentName:"ul"},"an identifier into a data structure: ",(0,l.kt)("inlineCode",{parentName:"li"},'var BLUE = "blue" var RED = "red" var colors = [BLUE, RED]')),(0,l.kt)("li",{parentName:"ul"},"the name of an object field: ",(0,l.kt)("inlineCode",{parentName:"li"},'person["age"] = 24')),(0,l.kt)("li",{parentName:"ul"},"an enum: ",(0,l.kt)("inlineCode",{parentName:"li"},"if (audio.canPlayType() === 'probably') {...}")," ",(0,l.kt)("a",o({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType#Return_value"}),"(\u0ca0_\u0ca0)")),(0,l.kt)("li",{parentName:"ul"},"other crazy patterns you'll soon find horrible, after getting used to ReScript's alternatives.")),(0,l.kt)("p",null,"The more you overload the poor string type, the less the type system (or a teammate) can help you! ReScript provides concise, fast and maintainable types & data structures alternatives to the use-cases above (e.g. variants, in a later section)."),(0,l.kt)("h2",o({},{id:"char"}),"Char"),(0,l.kt)("p",null,"ReScript has a type for a string with a single letter:"),(0,l.kt)(s,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",o({parentName:"pre"},{className:"language-re"}),"let firstLetterOfAlphabet = 'a';\n")),(0,l.kt)("pre",null,(0,l.kt)("code",o({parentName:"pre"},{className:"language-ml"}),"let firstLetterOfAlphabet = 'a'\n")),(0,l.kt)("pre",null,(0,l.kt)("code",o({parentName:"pre"},{className:"language-js"}),'var firstLetterOfAlphabet = /* "a" */97;\n'))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Note"),": Char doesn't support Unicode or UTF-8 and is therefore not recommended."),(0,l.kt)("p",null,"To convert a String to a Char, use ",(0,l.kt)("inlineCode",{parentName:"p"},'"a".[0]'),". To convert a Char to a String, use ",(0,l.kt)("inlineCode",{parentName:"p"},"String.make(1, 'a')"),"."),(0,l.kt)("h2",o({},{id:"regular-expression"}),"Regular Expression"),(0,l.kt)("p",null,"ReScript regular expressions compile cleanly to their JavaScript counterpart:"),(0,l.kt)(s,{labels:["Reason (Old Syntax)","ML (Older Syntax)","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",o({parentName:"pre"},{className:"language-re"}),'let r = [%re "/b/g"];\n')),(0,l.kt)("pre",null,(0,l.kt)("code",o({parentName:"pre"},{className:"language-ml"}),'let r = [%re "/b/g"]\n')),(0,l.kt)("pre",null,(0,l.kt)("code",o({parentName:"pre"},{className:"language-js"}),"var r = /b/g;\n"))),(0,l.kt)("p",null,"A regular expression like the above has the type ",(0,l.kt)("inlineCode",{parentName:"p"},"Js.Re.t"),". The ",(0,l.kt)("a",o({parentName:"p"},{href:"api/js/re"}),"Js.Re")," module contains the regular expression helpers you have seen in JS."),(0,l.kt)("h2",o({},{id:"boolean"}),"Boolean"),(0,l.kt)("p",null,"A ReScript boolean has the type ",(0,l.kt)("inlineCode",{parentName:"p"},"bool")," and can be either ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),". Common operations:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"&&"),": logical and."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"||"),": logical or."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"!"),": logical not."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"<="),", ",(0,l.kt)("inlineCode",{parentName:"li"},">="),", ",(0,l.kt)("inlineCode",{parentName:"li"},"<"),", ",(0,l.kt)("inlineCode",{parentName:"li"},">")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"=="),": structural equal, compares data structures deeply: ",(0,l.kt)("inlineCode",{parentName:"li"},"(1, 2) == (1, 2)")," is ",(0,l.kt)("inlineCode",{parentName:"li"},"true"),". Convenient, but use with caution."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"==="),": referential equal, compares shallowly. ",(0,l.kt)("inlineCode",{parentName:"li"},"(1, 2) === (1, 2)")," is ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),". ",(0,l.kt)("inlineCode",{parentName:"li"},"let myTuple = (1, 2); myTuple === myTuple")," is ",(0,l.kt)("inlineCode",{parentName:"li"},"true"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"!="),": structural unequal."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"!=="),": referential unequal.")),(0,l.kt)("p",null,"ReScript's ",(0,l.kt)("inlineCode",{parentName:"p"},"true/false")," compiles into a JavaScript ",(0,l.kt)("inlineCode",{parentName:"p"},"true/false"),"."),(0,l.kt)("h2",o({},{id:"integers"}),"Integers"),(0,l.kt)("p",null,"32-bits, truncated when necessary. We provide the usual operations on them: ",(0,l.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"-"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"/"),", etc. See ",(0,l.kt)("a",o({parentName:"p"},{href:"api/js/int"}),"Js.Int")," for helper functions."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Careful when you bind to JavaScript numbers"),"! Long ones might be truncated. Bind JS number (especially Dates) as ",(0,l.kt)("strong",{parentName:"p"},"float")," instead."),(0,l.kt)("h2",o({},{id:"floats"}),"Floats"),(0,l.kt)("p",null,"Float requires other operators: ",(0,l.kt)("inlineCode",{parentName:"p"},"+."),", ",(0,l.kt)("inlineCode",{parentName:"p"},"-."),", ",(0,l.kt)("inlineCode",{parentName:"p"},"*."),", ",(0,l.kt)("inlineCode",{parentName:"p"},"/."),", etc. Like ",(0,l.kt)("inlineCode",{parentName:"p"},"0.5 +. 0.6"),". See ",(0,l.kt)("a",o({parentName:"p"},{href:"api/js/float"}),"Js.Float")," for helper functions."),(0,l.kt)("h2",o({},{id:"unit"}),"Unit"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"unit")," type has a single value, ",(0,l.kt)("inlineCode",{parentName:"p"},"()"),". It compiles to JavaScrit's ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined"),". It's a dummy type used as a placeholder in various places. You won't need it until you see it."))}m.isMDXComponent=!0,m.frontmatter={title:"Primitive Types",description:"Primitive Data Types in ReScript",canonical:"/docs/manual/latest/primitive-types",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v8.0.0/primitive-types.mdx"}},56232:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v8.0.0/primitive-types",function(){return n(22354)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=56232,e(e.s=t);var t}));var t=e.O();_N_E=t}]);