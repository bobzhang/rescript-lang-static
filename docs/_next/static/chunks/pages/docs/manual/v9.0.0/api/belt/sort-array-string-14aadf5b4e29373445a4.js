(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[17654],{17375:function(e,t,r){"use strict";function n(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}r.d(t,{Z:function(){return n}})},52933:function(e,t,r){"use strict";r.r(t),r.d(t,{default:function(){return u}});var n=r(17375),a=r(96156),i=(r(67294),r(3905));function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){(0,a.Z)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var s,p=(s="Intro",function(e){return console.warn("Component "+s+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",o({},e))}),c={};function u(e){var t=e.components,r=(0,n.Z)(e,["components"]);return(0,i.kt)("wrapper",o(o(o({},c),r),{},{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",o({},{id:"sortarraystring"}),"SortArrayString"),(0,i.kt)(p,{mdxType:"Intro"},(0,i.kt)("p",null,"This is a specialized module for ",(0,i.kt)("inlineCode",{parentName:"p"},"Belt.SortArray"),", the docs in that module also applies here, except the comparator is fixed and inlined.")),(0,i.kt)("h2",o({},{id:"element"}),"element"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"prelude",prelude:!0}),"type element = string\n")),(0,i.kt)("h2",o({},{id:"strictlysortedlength"}),"strictlySortedLength"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let strictlySortedLength: array<element> => int\n")),(0,i.kt)("p",null,"The same as ",(0,i.kt)("inlineCode",{parentName:"p"},"Belt.SortArray.strictlySortedLength")," except the comparator is fixed."),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"+n")," means increasing order ",(0,i.kt)("inlineCode",{parentName:"p"},"-n")," means negative order."),(0,i.kt)("h2",o({},{id:"issorted"}),"isSorted"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let isSorted: array<element> => bool\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"sorted(xs)")," return true if ",(0,i.kt)("inlineCode",{parentName:"p"},"xs")," is in non strict increasing order."),(0,i.kt)("h2",o({},{id:"stablesortinplace"}),"stableSortInPlace"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let stableSortInPlace: array<element> => unit\n")),(0,i.kt)("p",null,"The same as ",(0,i.kt)("inlineCode",{parentName:"p"},"Belt.SortArray.stableSortInPlaceBy")," except the comparator is fixed."),(0,i.kt)("h2",o({},{id:"stablesort"}),"stableSort"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let stableSort: array<element> => array<element>\n")),(0,i.kt)("p",null,"The same as ",(0,i.kt)("inlineCode",{parentName:"p"},"Belt.SortArray.stableSortBy")," except the comparator is fixed."),(0,i.kt)("h2",o({},{id:"binarysearch"}),"binarySearch"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let binarySearch: (array<element>, element) => int\n")),(0,i.kt)("p",null,"If value is not found and value is less than one or more elements in array, the negative number returned is the bitwise complement of the index of the first element that is larger than value."),(0,i.kt)("p",null,"If value is not found and value is greater than all elements in array, the negative number returned is the bitwise complement of (the index of the last element plus 1)"),(0,i.kt)("p",null,"for example, if ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," is smaller than all elements return ",(0,i.kt)("inlineCode",{parentName:"p"},"-1")," since ",(0,i.kt)("inlineCode",{parentName:"p"},"lnot(-1) = 0")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," is larger than all elements return ",(0,i.kt)("inlineCode",{parentName:"p"},"- (len + 1)")," since ",(0,i.kt)("inlineCode",{parentName:"p"},"lnot(-(len+1)) = len"),"."))}u.isMDXComponent=!0,u.frontmatter={__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v9.0.0/api/belt/sort-array-string.mdx"}},93883:function(e,t,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v9.0.0/api/belt/sort-array-string",function(){return r(52933)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=93883,e(e.s=t);var t}));var t=e.O();_N_E=t}]);