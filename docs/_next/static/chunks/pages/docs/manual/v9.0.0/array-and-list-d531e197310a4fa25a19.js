(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7635],{17375:function(e,t,a){"use strict";function n(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}a.d(t,{Z:function(){return n}})},61066:function(e,t,a){"use strict";a.r(t),a.d(t,{default:function(){return d}});var n=a(17375),r=a(96156),s=(a(67294),a(3905));function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){(0,r.Z)(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}var o,p=(o="CodeTab",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",i({},e))}),u={};function d(e){var t=e.components,a=(0,n.Z)(e,["components"]);return(0,s.kt)("wrapper",i(i(i({},u),a),{},{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",i({},{id:"array-and-list"}),"Array and List"),(0,s.kt)("h2",i({},{id:"array"}),"Array"),(0,s.kt)("p",null,"Arrays are our main ordered data structure. They work the same way as JavaScript arrays: they can be randomly accessed, dynamically resized, updated, etc."),(0,s.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'let myArray = ["hello", "world", "how are you"]\n')),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-js"}),'var myArray = ["hello", "world", "how are you"];\n'))),(0,s.kt)("p",null,"ReScript arrays' items must have the same type, i.e. homogeneous."),(0,s.kt)("h3",i({},{id:"usage"}),"Usage"),(0,s.kt)("p",null,"See the ",(0,s.kt)("a",i({parentName:"p"},{href:"api/js/array"}),"Js.Array")," API."),(0,s.kt)("p",null,"Access & update an array item like so:"),(0,s.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'let myArray = ["hello", "world", "how are you"]\n\nlet firstItem = myArray[0] // "hello"\n\nmyArray[0] = "hey" // now ["hey", "world", "how are you"]\n\nlet pushedValue = Js.Array2.push(myArray, "bye")\n')),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-js"}),'var myArray = ["hello", "world", "how are you"];\n\nvar firstItem = myArray[0];\n\nmyArray[0] = "hey";\n\nvar pushedValue = myArray.push("bye");\n'))),(0,s.kt)("h2",i({},{id:"list"}),"List"),(0,s.kt)("p",null,"ReScript provides a singly linked list too. Lists are:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"immutable"),(0,s.kt)("li",{parentName:"ul"},"fast at prepending items"),(0,s.kt)("li",{parentName:"ul"},"fast at getting the tail"),(0,s.kt)("li",{parentName:"ul"},"slow at everything else")),(0,s.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"let myList = list{1, 2, 3}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-js"}),"var myList = {\n  hd: 1,\n  tl: {\n    hd: 2,\n    tl: {\n      hd: 3,\n      tl: 0\n    }\n  }\n};\n"))),(0,s.kt)("p",null,"Like arrays, lists' items need to be of the same type."),(0,s.kt)("h3",i({},{id:"usage-1"}),"Usage"),(0,s.kt)("p",null,"You'd use list for its resizability, its fast prepend (adding at the head), and its fast split, all of which are immutable and relatively efficient."),(0,s.kt)("p",null,"Do ",(0,s.kt)("strong",{parentName:"p"},"not")," use list if you need to randomly access an item or insert at non-head position. Your code would end up obtuse and/or slow."),(0,s.kt)("p",null,"The standard lib provides a ",(0,s.kt)("a",i({parentName:"p"},{href:"api/belt/list"}),"List module"),"."),(0,s.kt)("h4",i({},{id:"immutable-prepend"}),"Immutable Prepend"),(0,s.kt)("p",null,"Use the spread syntax:"),(0,s.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-res",metastring:"prelude",prelude:!0}),"let myList = list{1, 2, 3}\nlet anotherList = list{0, ...myList}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-js"}),"var myList = {\n  hd: 1,\n  tl: {\n    hd: 2,\n    tl: {\n      hd: 3,\n      tl: 0\n    }\n  }\n};\n\nvar anotherList = {\n  hd: 0,\n  tl: myList\n};\n"))),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"myList")," didn't mutate. ",(0,s.kt)("inlineCode",{parentName:"p"},"anotherList")," is now ",(0,s.kt)("inlineCode",{parentName:"p"},"list{0, 1, 2, 3}"),". This is efficient (constant time, not linear). ",(0,s.kt)("inlineCode",{parentName:"p"},"anotherList"),"'s last 3 elements are shared with ",(0,s.kt)("inlineCode",{parentName:"p"},"myList"),"!"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Note that ",(0,s.kt)("inlineCode",{parentName:"strong"},"list{a, ...b, ...c}")," is a syntax error"),". We don't support multiple spread for a list. That'd be an accidental linear operation (",(0,s.kt)("inlineCode",{parentName:"p"},"O(b)"),"), since each item of b would be one-by-one added to the head of ",(0,s.kt)("inlineCode",{parentName:"p"},"c"),". You can use ",(0,s.kt)("inlineCode",{parentName:"p"},"List.concat")," for this, but we highly discourage it."),(0,s.kt)("p",null,"Updating an arbitrary item in the middle of a list is also discouraged, since its performance and allocation overhead would be linear (",(0,s.kt)("inlineCode",{parentName:"p"},"O(n)"),")."),(0,s.kt)("h4",i({},{id:"access"}),"Access"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"switch")," (described in the ",(0,s.kt)("a",i({parentName:"p"},{href:"pattern-matching-destructuring.md"}),"pattern matching section"),") is usually used to access list items:"),(0,s.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'let message =\n  switch myList {\n  | list{} => "This list is empty"\n  | list{a, ...rest} => "The head of the list is the string " ++ Js.Int.toString(a)\n  }\n')),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-js"}),'var message = myList\n  ? "The head of the list is the string " + (1).toString()\n  : "This list is empty";\n'))))}d.isMDXComponent=!0,d.frontmatter={title:"Array & List",description:"Arrays and List data structures",canonical:"/docs/manual/latest/array-and-list",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v9.0.0/array-and-list.mdx"}},22043:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v9.0.0/array-and-list",function(){return a(61066)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=22043,e(e.s=t);var t}));var t=e.O();_N_E=t}]);