(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[72508],{17375:function(e,t,n){"use strict";function i(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}n.d(t,{Z:function(){return i}})},60391:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return u}});var i=n(17375),r=n(96156),a=(n(67294),n(3905));function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var l,p=(l="Intro",function(e){return console.warn("Component "+l+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",o({},e))}),g={};function u(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,a.kt)("wrapper",o(o(o({},g),n),{},{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",o({},{id:"int"}),"Int"),(0,a.kt)(p,{mdxType:"Intro"},(0,a.kt)("p",null,"Provide utilities for handling ",(0,a.kt)("inlineCode",{parentName:"p"},"int"),".")),(0,a.kt)("h2",o({},{id:"toexponential"}),"toExponential"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let toExponential: int => string\n")),(0,a.kt)("p",null,"Formats an ",(0,a.kt)("inlineCode",{parentName:"p"},"int")," using exponential (scientific) notation.\nReturns a ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," representing the given value in exponential notation.\nRaises ",(0,a.kt)("inlineCode",{parentName:"p"},"RangeError")," if digits is not in the range ","[","0, 20","]"," (inclusive)."),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'/* prints "7.7e+1" */\nJs.log(Js.Int.toExponential(77))\n')),(0,a.kt)("h2",o({},{id:"toexponentialwithprecision"}),"toExponentialWithPrecision"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let toExponentialWithPrecision: (int, ~digits: int) => string\n")),(0,a.kt)("p",null,"Formats an ",(0,a.kt)("inlineCode",{parentName:"p"},"int")," using exponential (scientific) notation.\n",(0,a.kt)("inlineCode",{parentName:"p"},"digits")," specifies how many digits should appear after the decimal point. The value must be in the range ","[","0, 20","]"," (inclusive)."),(0,a.kt)("p",null,"Returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," representing the given value in exponential notation."),(0,a.kt)("p",null,"The output will be rounded or padded with zeroes if necessary.\nRaises ",(0,a.kt)("inlineCode",{parentName:"p"},"RangeError")," if ",(0,a.kt)("inlineCode",{parentName:"p"},"digits")," is not in the range ","[","0, 20","]"," (inclusive)."),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'/* prints "7.70e+1" */\nJs.log(Js.Int.toExponentialWithPrecision(77, ~digits=2))\n\n/* prints "5.68e+3" */\nJs.log(Js.Int.toExponentialWithPrecision(5678, ~digits=2))\n')),(0,a.kt)("h2",o({},{id:"toprecision"}),"toPrecision"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let toPrecision: int => string\n")),(0,a.kt)("p",null,"Formats an ",(0,a.kt)("inlineCode",{parentName:"p"},"int")," using some fairly arbitrary rules.\nReturns a ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," representing the given value in fixed-point (usually)."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"toPrecision")," differs from ",(0,a.kt)("inlineCode",{parentName:"p"},"toFixed")," in that the former will format the number with full precision, while the latter will not output any digits after the decimal point.\nRaises ",(0,a.kt)("inlineCode",{parentName:"p"},"RangeError")," if ",(0,a.kt)("inlineCode",{parentName:"p"},"digits")," is not in the range accepted by this function."),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'/* prints "123456789" */\nJs.log(Js.Int.toPrecision(123456789))\n')),(0,a.kt)("h2",o({},{id:"toprecisionwithprecision"}),"toPrecisionWithPrecision"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let toPrecisionWithPrecision: (int, ~digits: int) => string\n")),(0,a.kt)("p",null,"Formats an ",(0,a.kt)("inlineCode",{parentName:"p"},"int")," using some fairly arbitrary rules.\n",(0,a.kt)("inlineCode",{parentName:"p"},"digits")," specifies how many digits should appear in total. The value must between 0 and some arbitrary number that's hopefully at least larger than 20 (for Node it's 21. Why? Who knows)."),(0,a.kt)("p",null,"Returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," representing the given value in fixed-point or scientific notation."),(0,a.kt)("p",null,"The output will be rounded or padded with zeroes if necessary."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"toPrecisionWithPrecision")," differs from ",(0,a.kt)("inlineCode",{parentName:"p"},"toFixedWithPrecision")," in that the former will count all digits against the precision, while the latter will count only the digits after the decimal point.\n",(0,a.kt)("inlineCode",{parentName:"p"},"toPrecisionWithPrecision")," will also use scientific notation if the specified precision is less than the number of digits before the decimal point.\nRaises ",(0,a.kt)("inlineCode",{parentName:"p"},"RangeError")," if ",(0,a.kt)("inlineCode",{parentName:"p"},"digits")," is not in the range accepted by this function."),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'/* prints "1.2e+8" */\nJs.log(Js.Int.toPrecisionWithPrecision(123456789, ~digits=2))\n\n/* prints "0.0" */\nJs.log(Js.Int.toPrecisionWithPrecision(0, ~digits=2))\n')),(0,a.kt)("h2",o({},{id:"tostring"}),"toString"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let toString: int => string\n")),(0,a.kt)("p",null,"Formats an ",(0,a.kt)("inlineCode",{parentName:"p"},"int")," as a ",(0,a.kt)("inlineCode",{parentName:"p"},"string"),".\nReturns a ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," representing the given value in fixed-point (usually)."),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'/* prints "123456789" */\nJs.log(Js.Int.toString(123456789))\n')),(0,a.kt)("h2",o({},{id:"tostringwithradix"}),"toStringWithRadix"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let toStringWithRadix: (int, ~radix: int) => string\n")),(0,a.kt)("p",null,"Formats an ",(0,a.kt)("inlineCode",{parentName:"p"},"int")," as a ",(0,a.kt)("inlineCode",{parentName:"p"},"string"),".\n",(0,a.kt)("inlineCode",{parentName:"p"},"radix")," specifies the radix base to use for the formatted number. The value must be in the range ","[","2, 36","]"," (inclusive).\nReturns a ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," representing the given value in fixed-point (usually).\nRaises ",(0,a.kt)("inlineCode",{parentName:"p"},"RangeError")," if ",(0,a.kt)("inlineCode",{parentName:"p"},"radix")," is not in the range ","[","2, 36","]"," (inclusive)."),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'/* prints "110" */\nJs.log(Js.Int.toStringWithRadix(6, ~radix=2))\n\n/* prints "deadbeef" */\nJs.log(Js.Int.toStringWithRadix(3735928559, ~radix=16))\n\n/* prints "2n9c" */\nJs.log(Js.Int.toStringWithRadix(123456, ~radix=36))\n')),(0,a.kt)("h2",o({},{id:"tofloat"}),"toFloat"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let toFloat: int => float\n")),(0,a.kt)("h2",o({},{id:"equal"}),"equal"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let equal: (int, int) => bool\n")),(0,a.kt)("h2",o({},{id:"max"}),"max"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let max: int\n")),(0,a.kt)("h2",o({},{id:"min"}),"min"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let min: int\n")))}u.isMDXComponent=!0,u.frontmatter={__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v9.0.0/api/js/int.mdx"}},81083:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v9.0.0/api/js/int",function(){return n(60391)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=81083,e(e.s=t);var t}));var t=e.O();_N_E=t}]);