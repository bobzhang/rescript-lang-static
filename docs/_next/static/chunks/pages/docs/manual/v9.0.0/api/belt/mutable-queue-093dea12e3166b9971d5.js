(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[10393],{17375:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}n.d(t,{Z:function(){return a}})},48750:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return d}});var a=n(17375),r=n(96156),i=(n(67294),n(3905));function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var s,u=(s="Intro",function(e){return console.warn("Component "+s+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",p({},e))}),o={};function d(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",p(p(p({},o),n),{},{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",p({},{id:"mutablequeue"}),"MutableQueue"),(0,i.kt)(u,{mdxType:"Intro"},(0,i.kt)("p",null,"An FIFO(first in first out) queue data structure.")),(0,i.kt)("h2",p({},{id:"t"}),"t"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"prelude",prelude:!0}),"type t<'a>\n")),(0,i.kt)("p",null,"The type of queues containing elements of ",(0,i.kt)("inlineCode",{parentName:"p"},"type('a)"),"."),(0,i.kt)("h2",p({},{id:"make"}),"make"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let make: unit => t<'a>\n")),(0,i.kt)("p",null,"Returns a new queue, initially empty."),(0,i.kt)("h2",p({},{id:"clear"}),"clear"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let clear: t<'a> => unit\n")),(0,i.kt)("p",null,"Discard all elements from the queue."),(0,i.kt)("h2",p({},{id:"isempty"}),"isEmpty"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let isEmpty: t<'a> => bool\n")),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if the given queue is empty, ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,i.kt)("h2",p({},{id:"fromarray"}),"fromArray"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let fromArray: array<'a> => t<'a>\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"fromArray")," a is equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"Array.forEach(a, add(q, a));")),(0,i.kt)("h2",p({},{id:"add"}),"add"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let add: (t<'a>, 'a) => unit\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"add(q, x)")," adds the element ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," at the end of the queue ",(0,i.kt)("inlineCode",{parentName:"p"},"q"),"."),(0,i.kt)("h2",p({},{id:"peek"}),"peek"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let peek: t<'a> => option<'a>\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"peekOpt(q)")," returns the first element in queue ",(0,i.kt)("inlineCode",{parentName:"p"},"q"),", without removing it from the queue."),(0,i.kt)("h2",p({},{id:"peekundefined"}),"peekUndefined"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let peekUndefined: t<'a> => Js.undefined<'a>\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"peekUndefined(q)")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," if not found."),(0,i.kt)("h2",p({},{id:"peekexn"}),"peekExn"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let peekExn: t<'a> => 'a\n")),(0,i.kt)("p",null,"raise an exception if ",(0,i.kt)("inlineCode",{parentName:"p"},"q")," is empty"),(0,i.kt)("h2",p({},{id:"pop"}),"pop"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let pop: t<'a> => option<'a>\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"pop(q)")," removes and returns the first element in queue ",(0,i.kt)("inlineCode",{parentName:"p"},"q"),"."),(0,i.kt)("h2",p({},{id:"popundefined"}),"popUndefined"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let popUndefined: t<'a> => Js.undefined<'a>\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"popUndefined(q)")," removes and returns the first element in queue ",(0,i.kt)("inlineCode",{parentName:"p"},"q"),". it will return ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," if it is already empty."),(0,i.kt)("h2",p({},{id:"popexn"}),"popExn"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let popExn: t<'a> => 'a\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"popExn(q)")," raise an exception if q is empty."),(0,i.kt)("h2",p({},{id:"copy"}),"copy"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let copy: t<'a> => t<'a>\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"copy(q)")," returns a fresh queue."),(0,i.kt)("h2",p({},{id:"size"}),"size"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let size: t<'a> => int\n")),(0,i.kt)("p",null,"Returns the number of elements in a queue."),(0,i.kt)("h2",p({},{id:"mapu"}),"mapU"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let mapU: (t<'a>, (. 'a) => 'b) => t<'b>\n")),(0,i.kt)("h2",p({},{id:"map"}),"map"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let map: (t<'a>, 'a => 'b) => t<'b>\n")),(0,i.kt)("h2",p({},{id:"foreachu"}),"forEachU"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let forEachU: (t<'a>, (. 'a) => unit) => unit\n")),(0,i.kt)("h2",p({},{id:"foreach"}),"forEach"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let forEach: (t<'a>, 'a => unit) => unit\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"forEach(q, f) applies"),"f",(0,i.kt)("inlineCode",{parentName:"p"},"in turn to all elements of"),"q`, from the least recently entered to the most recently entered. The queue itself is unchanged."),(0,i.kt)("h2",p({},{id:"reduceu"}),"reduceU"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let reduceU: (t<'a>, 'b, (. 'b, 'a) => 'b) => 'b\n")),(0,i.kt)("h2",p({},{id:"reduce"}),"reduce"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let reduce: (t<'a>, 'b, ('b, 'a) => 'b) => 'b\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"reduce(q, accu, f)")," is equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"List.reduce(l, accu, f)"),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"l")," is the list of ",(0,i.kt)("inlineCode",{parentName:"p"},"q"),"'s elements. The queue remains unchanged."),(0,i.kt)("h2",p({},{id:"transfer"}),"transfer"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let transfer: (t<'a>, t<'a>) => unit\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"transfer(q1, q2)")," adds all of ",(0,i.kt)("inlineCode",{parentName:"p"},"q1"),"'s elements at the end of the queue ",(0,i.kt)("inlineCode",{parentName:"p"},"q2"),", then clears ",(0,i.kt)("inlineCode",{parentName:"p"},"q1"),". It is equivalent to the sequence ",(0,i.kt)("inlineCode",{parentName:"p"},"forEach((x) => add(x, q2), q1);"),"; clear ",(0,i.kt)("inlineCode",{parentName:"p"},"q1"),", but runs in constant time."),(0,i.kt)("h2",p({},{id:"toarray"}),"toArray"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let toArray: t<'a> => array<'a>\n")),(0,i.kt)("p",null,"First added will be in the beginning of the array."))}d.isMDXComponent=!0,d.frontmatter={__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v9.0.0/api/belt/mutable-queue.mdx"}},59244:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v9.0.0/api/belt/mutable-queue",function(){return n(48750)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=59244,e(e.s=t);var t}));var t=e.O();_N_E=t}]);