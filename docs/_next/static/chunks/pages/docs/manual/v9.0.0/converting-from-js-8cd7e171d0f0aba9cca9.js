(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[60461],{17375:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}n.d(t,{Z:function(){return a}})},93189:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return d}});var a=n(17375),o=n(96156),r=(n(67294),n(3905));function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var s,u=(s="CodeTab",function(e){return console.warn("Component "+s+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",i({},e))}),p={};function d(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,r.kt)("wrapper",i(i(i({},p),n),{},{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",i({},{id:"converting-from-js"}),"Converting from JS"),(0,r.kt)("p",null,"ReScript offers a unique project conversion methodology which:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Ensures minimal disruption to your teammates (very important!)."),(0,r.kt)("li",{parentName:"ul"},"Remove the typical friction of verifying conversion's correctness and performance guarantees."),(0,r.kt)("li",{parentName:"ul"},"Doesn't force you to search for pre-made binding libraries made by others. ",(0,r.kt)("strong",{parentName:"li"},"ReScript doesn't need the equivalent of TypeScript's ",(0,r.kt)("inlineCode",{parentName:"strong"},"DefinitelyTyped")),".")),(0,r.kt)("p",null,"Enjoy!"),(0,r.kt)("h2",i({},{id:"step-1-install-rescript"}),"Step 1: Install ReScript"),(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"npm install --save-dev bs-platform")," on your project, then imitate our ",(0,r.kt)("a",i({parentName:"p"},{href:"installation#new-project"}),"New Project")," workflow by adding a ",(0,r.kt)("inlineCode",{parentName:"p"},"bsconfig.json")," at the root. Then start ",(0,r.kt)("inlineCode",{parentName:"p"},"bsb -w"),"."),(0,r.kt)("h2",i({},{id:"step-2-copy-paste-the-entire-js-file"}),"Step 2: Copy Paste the Entire JS File"),(0,r.kt)("p",null,"Let's work on converting a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"src/main.js"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",i({parentName:"pre"},{className:"language-js"}),"const school = require('school');\n\nconst defaultId = 10;\n\nfunction queryResult(usePayload, payload) {\n  if (usePayload) {\n    return payload.student;\n  } else {\n    return school.getStudentById(defaultId);\n  }\n}\n")),(0,r.kt)("p",null,"First, copy the entire file content over to a new file called ",(0,r.kt)("inlineCode",{parentName:"p"},"src/Main.res")," by using our ",(0,r.kt)("a",i({parentName:"p"},{href:"embed-raw-javascript"}),(0,r.kt)("inlineCode",{parentName:"a"},"%%raw")," JS embedding trick"),":"),(0,r.kt)(u,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,r.kt)("pre",null,(0,r.kt)("code",i({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"%%raw(`\nconst school = require('school');\n\nconst defaultId = 10;\n\nfunction queryResult(usePayload, payload) {\n  if (usePayload) {\n    return payload.student;\n  } else {\n    return school.getStudentById(defaultId);\n  }\n}\n`)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",i({parentName:"pre"},{className:"language-js"}),"// Generated by ReScript, PLEASE EDIT WITH CARE\n'use strict';\n\nconst school = require('school');\n\nconst defaultId = 10;\n\nfunction queryResult(usePayload, payload) {\n  if (usePayload) {\n    return payload.student;\n  } else {\n    return school.getStudentById(defaultId);\n  }\n}\n\n/*  Not a pure module */\n"))),(0,r.kt)("p",null,"Add this file to ",(0,r.kt)("inlineCode",{parentName:"p"},"bsconfig.json"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",i({parentName:"pre"},{className:"language-json"}),'  "sources": {\n    "dir" : "src",\n    "subdirs" : true\n  },\n')),(0,r.kt)("p",null,"Open an editor tab for ",(0,r.kt)("inlineCode",{parentName:"p"},"src/Main.bs.js"),". Do a command-line ",(0,r.kt)("inlineCode",{parentName:"p"},"diff -u src/main.js src/Main.bs.js"),". Aside from whitespaces, you should see only minimal, trivial differences. You're already a third of the way done!"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Always make sure")," that at each step, you keep the ReScript output ",(0,r.kt)("inlineCode",{parentName:"p"},".bs.js")," file open to compare against the existing JavaScript file. Our compilation output is very close to your hand-written JavaScript; you can simply eye the difference to catch conversion bugs!"),(0,r.kt)("h2",i({},{id:"step-3-extract-parts-into-idiomatic-rescript"}),"Step 3: Extract Parts into Idiomatic ReScript"),(0,r.kt)("p",null,"Let's turn the ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultId")," variable into a ReScript let-binding:"),(0,r.kt)(u,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,r.kt)("pre",null,(0,r.kt)("code",i({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"let defaultId = 10\n\n%%raw(`\nconst school = require('school');\n\nfunction queryResult(usePayload, payload) {\n  if (usePayload) {\n    return payload.student;\n  } else {\n    return school.getStudentById(defaultId);\n  }\n}\n`)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",i({parentName:"pre"},{className:"language-js"}),"// Generated by ReScript, PLEASE EDIT WITH CARE\n'use strict';\n\nconst school = require('school');\n\nfunction queryResult(usePayload, payload) {\n  if usePayload {\n    return payload.student\n  } else {\n    return school.getStudentById(defaultId)\n  }\n}\n\nvar defaultId = 10;\n\nexports.defaultId = defaultId;\n/*  Not a pure module */\n"))),(0,r.kt)("p",null,"Check the output. Diff it. Code still works. Moving on! Extract the function:"),(0,r.kt)(u,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,r.kt)("pre",null,(0,r.kt)("code",i({parentName:"pre"},{className:"language-res"}),"%%raw(`\nconst school = require('school');\n`)\n\nlet defaultId = 10\n\nlet queryResult = (usePayload, payload) => {\n  if usePayload {\n    payload.student\n  } else {\n    school.getStudentById(defaultId)\n  }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",i({parentName:"pre"},{className:"language-js"}),""))),(0,r.kt)("p",null,"Format the code: ",(0,r.kt)("inlineCode",{parentName:"p"},"./node_modules/.bin/bsc -format src/Main.res"),"."),(0,r.kt)("p",null,"We have a type error: \"The record field student can't be found\". That's fine! ",(0,r.kt)("strong",{parentName:"p"},"Always ensure your code is syntactically valid first"),". Fixing type errors comes later."),(0,r.kt)("h2",i({},{id:"step-4-add-externals-fix-types"}),"Step 4: Add ",(0,r.kt)("inlineCode",{parentName:"h2"},"external"),"s, Fix Types"),(0,r.kt)("p",null,"The previous type error is caused by ",(0,r.kt)("inlineCode",{parentName:"p"},"payload"),"'s record declaration (which supposedly contains the field ",(0,r.kt)("inlineCode",{parentName:"p"},"student"),") not being found. Since we're trying to convert as quickly as possible, let's use our ",(0,r.kt)("a",i({parentName:"p"},{href:"object"}),"object")," feature to avoid needing type declaration ceremonies:"),(0,r.kt)(u,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,r.kt)("pre",null,(0,r.kt)("code",i({parentName:"pre"},{className:"language-res"}),'%%raw(`\nconst school = require(\'school\');\n`)\n\nlet defaultId = 10\n\nlet queryResult = (usePayload, payload) => {\n  if usePayload {\n    payload["student"]\n  } else {\n    school["getStudentById"](defaultId)\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",i({parentName:"pre"},{className:"language-js"}),""))),(0,r.kt)("p",null,"Now this triggers the next type error, that ",(0,r.kt)("inlineCode",{parentName:"p"},"school")," isn't found. Let's use ",(0,r.kt)("a",i({parentName:"p"},{href:"external"}),(0,r.kt)("inlineCode",{parentName:"a"},"external"))," to bind to that module:"),(0,r.kt)(u,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,r.kt)("pre",null,(0,r.kt)("code",i({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'@bs.module external school: \'whatever = "school"\n\nlet defaultId = 10\n\nlet queryResult = (usePayload, payload) => {\n  if usePayload {\n    payload["student"]\n  } else {\n    school["getStudentById"](defaultId)\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",i({parentName:"pre"},{className:"language-js"}),"// Generated by ReScript, PLEASE EDIT WITH CARE\n'use strict';\n\nvar School = require(\"school\");\n\nfunction queryResult(usePayload, payload) {\n  if (usePayload) {\n    return payload.student;\n  } else {\n    return School.getStudentById(10);\n  }\n}\n\nvar defaultId = 10;\n\nexports.defaultId = defaultId;\nexports.queryResult = queryResult;\n/* school Not a pure module */\n"))),(0,r.kt)("p",null,"We hurrily typed ",(0,r.kt)("inlineCode",{parentName:"p"},"school")," as a polymorphic ",(0,r.kt)("inlineCode",{parentName:"p"},"'whatever")," and let its type be inferred by its usage below. The inference is technically correct, but within the context of bringing it a value from JavaScript, slightly dangerous. This is just the interop trick we've shown in the ",(0,r.kt)("a",i({parentName:"p"},{href:"external"}),(0,r.kt)("inlineCode",{parentName:"a"},"external"))," page."),(0,r.kt)("p",null,"Anyway, the file passes the type checker again. Check the ",(0,r.kt)("inlineCode",{parentName:"p"},".bs.js")," output, diff with the original ",(0,r.kt)("inlineCode",{parentName:"p"},".js"),"; we've now converted a file over to ReScript!"),(0,r.kt)("p",null,"Now, you can delete the original, hand-written ",(0,r.kt)("inlineCode",{parentName:"p"},"main.js")," file, and grep the files importing ",(0,r.kt)("inlineCode",{parentName:"p"},"main.js")," and change them to importing ",(0,r.kt)("inlineCode",{parentName:"p"},"Main.bs.js"),"."),(0,r.kt)("h2",i({},{id:"optional-step-5-cleanup"}),"(Optional) Step 5: Cleanup"),(0,r.kt)("p",null,"If you prefer more advanced, rigidly typed ",(0,r.kt)("inlineCode",{parentName:"p"},"payload")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"school"),", feel free to do so:"),(0,r.kt)(u,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,r.kt)("pre",null,(0,r.kt)("code",i({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'type school\ntype student\ntype payload = {\n  student: student\n}\n\n@bs.module external school: school = "school"\n@bs.send external getStudentById: (school, int) => student = "getStudentById"\n\nlet defaultId = 10\n\nlet queryResult = (usePayload, payload) => {\n  if usePayload {\n    payload.student\n  } else {\n    school->getStudentById(defaultId)\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",i({parentName:"pre"},{className:"language-js"}),"// Generated by ReScript, PLEASE EDIT WITH CARE\n'use strict';\n\nvar School = require(\"school\");\n\nfunction queryResult(usePayload, payload) {\n  if (usePayload) {\n    return payload.student;\n  } else {\n    return School.getStudentById(10);\n  }\n}\n\nvar defaultId = 10;\n\nexports.defaultId = defaultId;\nexports.queryResult = queryResult;\n/* school Not a pure module */\n"))),(0,r.kt)("p",null,"We've:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"introduced an opaque types for ",(0,r.kt)("inlineCode",{parentName:"li"},"school")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"student")," to prevent misusages their values"),(0,r.kt)("li",{parentName:"ul"},"typed the payload as a record with only the ",(0,r.kt)("inlineCode",{parentName:"li"},"student")," field"),(0,r.kt)("li",{parentName:"ul"},"typed ",(0,r.kt)("inlineCode",{parentName:"li"},"getStudentById")," as the sole method of ",(0,r.kt)("inlineCode",{parentName:"li"},"student"))),(0,r.kt)("p",null,"Check that the ",(0,r.kt)("inlineCode",{parentName:"p"},".bs.js")," output didn't change. How rigidly to type your JavaScript code is up to you; we recommend not typing them too elaborately; it's sometime an endless chase, and produces diminishing returns, especially considering that the elaborate-ness might turn off your potential teammates."),(0,r.kt)("h2",i({},{id:"tips--tricks"}),"Tips & Tricks"),(0,r.kt)("p",null,"In the same vein of idea, ",(0,r.kt)("strong",{parentName:"p"},"resist the urge to write your own wrapper functions for the JS code you're converting"),". Use ",(0,r.kt)("a",i({parentName:"p"},{href:"external"}),(0,r.kt)("inlineCode",{parentName:"a"},"external"),"s"),", which are guaranteed to be erased in the output. And avoid trying to take the occasion to convert JS data structures into ReScript-specific data structures like variant or list. ",(0,r.kt)("strong",{parentName:"p"},"This isn't the time for that"),"."),(0,r.kt)("p",null,'The moment you produce extra conversion code in the output, your skeptical teammate\'s mental model might switch from "I recognize this output" to "this conversion might be introducing more problems than it solves. Why are we testing ReScript again?". Then you\'ve lost.'),(0,r.kt)("h2",i({},{id:"conclusion"}),"Conclusion"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Paste the JS code into a new ReScript file as embedded raw JS code."),(0,r.kt)("li",{parentName:"ul"},"Compile and keep the output file open. Check and diff against original JS file. Free regression tests."),(0,r.kt)("li",{parentName:"ul"},"Always make sure your file is syntactically valid. Don't worry about fixing types before that."),(0,r.kt)("li",{parentName:"ul"},"(Ab)use ",(0,r.kt)("a",i({parentName:"li"},{href:"object.md"}),"object")," accesses to quickly convert things over."),(0,r.kt)("li",{parentName:"ul"},"Optionally clean up the types for robustness."),(0,r.kt)("li",{parentName:"ul"},"Don't go overboard and turn off your boss and fellow teammates."),(0,r.kt)("li",{parentName:"ul"},"Proudly display that you've conserved the semantics and performance characteristics during the conversion by showing your teammates the eerily familiar output."),(0,r.kt)("li",{parentName:"ul"},"Get promoted for introducing a new technology the safer, mature way.")))}d.isMDXComponent=!0,d.frontmatter={title:"Converting from JS",description:"How to convert to ReScript with an existing JS codebase",canonical:"/docs/manual/latest/converting-from-js",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v9.0.0/converting-from-js.mdx"}},80154:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v9.0.0/converting-from-js",function(){return n(93189)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=80154,e(e.s=t);var t}));var t=e.O();_N_E=t}]);