(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[299],{17375:function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}n.d(t,{Z:function(){return r}})},30242:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return u}});var r=n(17375),a=n(96156),i=(n(67294),n(3905));function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){(0,a.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var s,p=(s="Intro",function(e){return console.warn("Component "+s+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",o({},e))}),m={};function u(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",o(o(o({},m),n),{},{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",o({},{id:"range"}),"Range"),(0,i.kt)(p,{mdxType:"Intro"},(0,i.kt)("p",null,"A small utility module to provide inclusive range operations for ",(0,i.kt)("inlineCode",{parentName:"p"},"[start,\nfinish]"),".  Internally it is relying on loops instead of creating new arrays,\nwhich makes it pretty performant and memory friendly.")),(0,i.kt)("h2",o({},{id:"foreachu"}),"forEachU"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let forEachU: (int, int, (. int) => unit) => unit\n")),(0,i.kt)("h2",o({},{id:"foreach"}),"forEach"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let forEach: (int, int, int => unit) => unit\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"forEach(start, finish, action)")),(0,i.kt)("p",null,"equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"Belt.Array.(forEach(range(start, finish), action))")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"Belt.Range.forEach(0, 4, (i) => Js.log(i))\n\n/**\n * prints:\n *   0\n *   1\n *   2\n *   3\n *   4\n */\n")),(0,i.kt)("h2",o({},{id:"everyu"}),"everyU"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let everyU: (int, int, (. int) => bool) => bool\n")),(0,i.kt)("h2",o({},{id:"every"}),"every"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let every: (int, int, int => bool) => bool\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"every(start, finish, p)")),(0,i.kt)("p",null,"equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"Belt.Array.(every(range(start, finish), p))")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"Belt.Range.every(0, 4, (i) => i < 5) /* true */\n\nBelt.Range.every(0, 4, (i) => i < 4) /* false */\n")),(0,i.kt)("h2",o({},{id:"everybyu"}),"everyByU"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let everyByU: (int, int, ~step: int, (. int) => bool) => bool\n")),(0,i.kt)("h2",o({},{id:"everyby"}),"everyBy"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let everyBy: (int, int, ~step: int, int => bool) => bool\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"everyBy(start, finish, ~step, p)")),(0,i.kt)("p",null,"See ",(0,i.kt)("inlineCode",{parentName:"p"},"Belt_Array.rangeBy")),(0,i.kt)("p",null,"equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"Belt.Array.(every(rangeBy(start, finish, ~step), p))")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"Belt.Range.everyBy(0, 4, ~step=1, (i) => mod(i, 2) === 0) /* false */\n\nBelt.Range.everyBy(0, 4, ~step=2, (i) => mod(i, 2) === 0) /* true */\n")),(0,i.kt)("h2",o({},{id:"someu"}),"someU"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let someU: (int, int, (. int) => bool) => bool\n")),(0,i.kt)("h2",o({},{id:"some"}),"some"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let some: (int, int, int => bool) => bool\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"some(start, finish, p)")),(0,i.kt)("p",null,"equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"Belt.Array.(some(range(start, finish), p))")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"Belt.Range.some(0, 4, (i) => i > 5) /* false */\n\nBelt.Range.some(0, 4, (i) => i > 2) /* true */\n")),(0,i.kt)("h2",o({},{id:"somebyu"}),"someByU"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let someByU: (int, int, ~step: int, (. int) => bool) => bool\n")),(0,i.kt)("h2",o({},{id:"someby"}),"someBy"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let someBy: (int, int, ~step: int, int => bool) => bool\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"someBy(start, finish, ~step, p)")),(0,i.kt)("p",null,"See ",(0,i.kt)("inlineCode",{parentName:"p"},"Belt_Array.rangeBy")),(0,i.kt)("p",null,"equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"Belt.Array.(some(rangeBy(start, finish, ~step), p))")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"Belt.Range.someBy(1, 5, ~step=2, (i) => mod(i, 2) === 0) /* false */\n\nBelt.Range.someBy(0, 4, ~step=2, (i) => mod(i, 2) === 0) /* true */\n")))}u.isMDXComponent=!0,u.frontmatter={__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v9.0.0/api/belt/range.mdx"}},85007:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v9.0.0/api/belt/range",function(){return n(30242)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=85007,e(e.s=t);var t}));var t=e.O();_N_E=t}]);