(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[24525],{17375:function(e,t,a){"use strict";function n(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}a.d(t,{Z:function(){return n}})},22514:function(e,t,a){"use strict";a.r(t),a.d(t,{default:function(){return c}});var n=a(17375),r=a(96156),s=(a(67294),a(3905));function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){(0,r.Z)(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}var l,i=(l="CodeTab",function(e){return console.warn("Component "+l+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",p({},e))}),u={};function c(e){var t=e.components,a=(0,n.Z)(e,["components"]);return(0,s.kt)("wrapper",p(p(p({},u),a),{},{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",p({},{id:"pipe"}),"Pipe"),(0,s.kt)("p",null,"ReScript provides a tiny but surprisingly useful operator ",(0,s.kt)("inlineCode",{parentName:"p"},"->"),', called the "pipe", that allows you to "flip" your code inside-out. ',(0,s.kt)("inlineCode",{parentName:"p"},"a(b)")," becomes ",(0,s.kt)("inlineCode",{parentName:"p"},"b->a"),". It's a simple piece of syntax that doesn't have any runtime cost."),(0,s.kt)("p",null,"Why would you use it? Imagine you have the following:"),(0,s.kt)(i,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-res"}),"validateAge(getAge(parseData(person)))\n")),(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-js"}),"validateAge(getAge(parseData(person)));\n"))),(0,s.kt)("p",null,"This is slightly hard to read, since you need to read the code from the innermost part, to the outer parts. Use pipe to streamline it:"),(0,s.kt)(i,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-res"}),"person\n  ->parseData\n  ->getAge\n  ->validateAge\n")),(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-js"}),"validateAge(getAge(parseData(person)));\n"))),(0,s.kt)("p",null,"Basically, ",(0,s.kt)("inlineCode",{parentName:"p"},"parseData(person)")," is transformed into ",(0,s.kt)("inlineCode",{parentName:"p"},"person->parseData"),", and ",(0,s.kt)("inlineCode",{parentName:"p"},"getAge(person->parseData)")," is transformed into ",(0,s.kt)("inlineCode",{parentName:"p"},"person->parseData->getAge"),", etc."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"This works when the function takes more than one argument too"),"."),(0,s.kt)(i,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-res"}),"a(one, two, three)\n")),(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-js"}),"a(one, two, three);\n"))),(0,s.kt)("p",null,"is the same as"),(0,s.kt)(i,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-res"}),"one->a(two, three)\n")),(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-js"}),"a(one, two, three);\n"))),(0,s.kt)("p",null,"This also works with labeled arguments."),(0,s.kt)("p",null,"Pipes are used to emulate object-oriented programming, e.g. what's ",(0,s.kt)("inlineCode",{parentName:"p"},"myStudent.getName")," in other languages like Java would be ",(0,s.kt)("inlineCode",{parentName:"p"},"myStudent->getName")," in ReScript (aka ",(0,s.kt)("inlineCode",{parentName:"p"},"getName(myStudent)"),"). This allows us to have the readability of the good parts of OOP without its downside of dragging in a huge class system just to call a function on a piece of data."),(0,s.kt)("h2",p({},{id:"tips--tricks"}),"Tips & Tricks"),(0,s.kt)("p",null,"Do ",(0,s.kt)("strong",{parentName:"p"},"not")," to abuse pipes; they're a means to an end. Inexperienced engineers sometimes shape a library's API to take advantage of the pipe. This is backward."),(0,s.kt)("h2",p({},{id:"js-method-chaining"}),"JS Method Chaining"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"This section requires understanding of ",(0,s.kt)("a",p({parentName:"em"},{href:"bind-to-js-function.md#object-method"}),"our binding API")),"."),(0,s.kt)("p",null,"JavaScript's APIs are often attached to objects, and often chainable, like so:"),(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-js"}),"const result = [1, 2, 3].map(a => a + 1).filter(a => a % 2 === 0);\n\nasyncRequest()\n  .setWaitDuration(4000)\n  .send();\n")),(0,s.kt)("p",null,"Assuming we don't need the chaining behavior above, we'd bind to each case this using ",(0,s.kt)("inlineCode",{parentName:"p"},"bs.send")," from the aforementioned binding API page:"),(0,s.kt)(i,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"prelude",prelude:!0}),'@bs.send external map: (array<\'a>, \'a => \'b) => array<\'b> = "map"\n@bs.send external filter: (array<\'a>, \'a => bool) => array<\'a> = "filter"\n\ntype request\n@bs.val external asyncRequest: unit => request = "asyncRequest"\n@bs.send external setWaitDuration: (request, int) => request = "setWaitDuration"\n@bs.send external send: request => unit = "send"\n')),(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-js"}),"// Empty output\n"))),(0,s.kt)("p",null,"You'd use them like this:"),(0,s.kt)(i,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"let result = Js.Array2.filter(\n  Js.Array2.map([1, 2, 3], a => a + 1),\n  a => mod(a, 2) == 0\n)\n\nsend(setWaitDuration(asyncRequest(), 4000))\n")),(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-js"}),"var result = [1, 2, 3].map(function(a) {\n  return a + 1 | 0;\n}).filter(function(a) {\n  return a % 2 === 0;\n});\n\nasyncRequest().setWaitDuration(4000).send();\n"))),(0,s.kt)("p",null,"This looks much worse than the JS counterpart! Clean it up visually with pipe:"),(0,s.kt)(i,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"let result = [1, 2, 3]\n  ->map(a => a + 1)\n  ->filter(a => mod(a, 2) == 0)\n\nasyncRequest()->setWaitDuration(4000)->send\n")),(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-js"}),"var result = [1, 2, 3].map(function(a) {\n  return a + 1 | 0;\n}).filter(function(a) {\n  return a % 2 === 0;\n});\n\nasyncRequest().setWaitDuration(4000).send();\n"))),(0,s.kt)("h2",p({},{id:"pipe-into-variants"}),"Pipe Into Variants"),(0,s.kt)("p",null,"You can pipe into a variant's constructor as if it was a function:"),(0,s.kt)(i,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-res"}),"let result = name->preprocess->Some\n")),(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-js"}),"var result = preprocess(name);\n"))),(0,s.kt)("p",null,"We turn this into:"),(0,s.kt)(i,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-res"}),"let result = Some(preprocess(name))\n")),(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-js"}),"var result = preprocess(name);\n"))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Note")," that using a variant constructor as a function wouldn't work anywhere else beside here."),(0,s.kt)("h2",p({},{id:"pipe-placeholders"}),"Pipe Placeholders"),(0,s.kt)("p",null,"A placeholder is written as an underscore and it tells ReScript that you want to fill in an argument of a function later. These two have equivalent meaning:"),(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-res"}),"let addTo7 = (x) => add3(3, x, 4)\nlet addTo7 = add3(3, _, 4)\n")),(0,s.kt)("p",null,"Sometimes you don't want to pipe the value you have into the first position. In these cases you can mark a placeholder value to show which argument you would like to pipe into."),(0,s.kt)("p",null,"Let's say you have a function ",(0,s.kt)("inlineCode",{parentName:"p"},"namePerson"),", which takes a ",(0,s.kt)("inlineCode",{parentName:"p"},"person")," then a ",(0,s.kt)("inlineCode",{parentName:"p"},"name")," argument. If you are transforming a person then pipe will work as-is:"),(0,s.kt)(i,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-res"}),'makePerson(~age=47, ())\n  ->namePerson("Jane")\n')),(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-js"}),'namePerson(makePerson(47), "Jane");\n'))),(0,s.kt)("p",null,"If you have a name that you want to apply to a person object, you can use a placeholder:"),(0,s.kt)(i,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-res"}),"getName(input)\n  ->namePerson(personDetails, _)\n")),(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-js"}),"var __x = getName(input);\nnamePerson(personDetails, __x);\n"))),(0,s.kt)("p",null,"This allows you to pipe into any positional argument. It also works for named arguments:"),(0,s.kt)(i,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-res"}),"getName(input)\n  ->namePerson(~person=personDetails, ~name=_)\n")),(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-js"}),"var __x = getName(input);\nnamePerson(personDetails, __x);\n"))),(0,s.kt)("h2",p({},{id:"triangle-pipe-deprecated"}),"Triangle Pipe (Deprecated)"),(0,s.kt)("p",null,"You might see usages of another pipe, ",(0,s.kt)("inlineCode",{parentName:"p"},"|>"),", in some codebases. These are deprecated."),(0,s.kt)("p",null,"Unlike ",(0,s.kt)("inlineCode",{parentName:"p"},"->")," pipe, the ",(0,s.kt)("inlineCode",{parentName:"p"},"|>")," pipe puts the subject as the last (not first) argument of the function. ",(0,s.kt)("inlineCode",{parentName:"p"},"a |> f(b)")," turns into ",(0,s.kt)("inlineCode",{parentName:"p"},"f(b, a)"),"."),(0,s.kt)("p",null,"For a more thorough discussion on the rationale and differences between the two operators, please refer to the ",(0,s.kt)("a",p({parentName:"p"},{href:"https://www.javierchavarri.com/data-first-and-data-last-a-comparison/"}),"Data-first and Data-last comparison by Javier Ch\xe1varri")))}c.isMDXComponent=!0,c.frontmatter={title:"Pipe",description:"The Pipe operator (->)",canonical:"/docs/manual/latest/pipe",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/manual/v9.0.0/pipe.mdx"}},93457:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/manual/v9.0.0/pipe",function(){return a(22514)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=93457,e(e.s=t);var t}));var t=e.O();_N_E=t}]);