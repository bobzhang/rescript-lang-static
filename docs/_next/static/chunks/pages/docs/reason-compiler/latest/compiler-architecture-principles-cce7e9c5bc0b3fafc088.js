(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[48794],{17375:function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}n.d(t,{Z:function(){return r}})},5870:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var r=n(96156),i=n(17375),a=(n(67294),n(3905));function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var c={};function l(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,a.kt)("wrapper",s(s(s({},c),n),{},{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",s({},{id:"compiler-architecture"}),"Compiler Architecture"),(0,a.kt)("p",null,"ReScript's high level architecture:"),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{}),"Source Language\n  |\n  | (Reuse OCaml Parser)\n  v\nSurface Syntax Tree\n  |\n  | (built in Syntax tree transformation)\n  v\nSurface Syntax Tree\n  |\n  | (Reuse OCaml Type checker)\n  v\nTypedtree\n  |\n  | (Reuse OCaml pattern match compiler and erase types)\n  | (Patches to pass more information down to Lambda )\n  |\nOCaml Lambda IR\n  |\n  |\n  v\nBuckle Lambda IR ------------------+\n  |   ^                            |\n  |   |                     6 Lambda Passes (lam_* files)\n  |   |             Optimization/inlining/dead code elimination\n  |   \\                            |\n  |    \\ --------------------------+\n  |\n  |  Self tail call elimination\n  |  Constant folding + propagation\n  V\nJS IR (J.ml)  ---------------------+\n  |   ^                            |\n  |   |                     6 JS Passes (js_* files)\n  |   |            Optimization/inlining/dead code elimination\n  |   \\                            |\n  |    \\  -------------------------+\n  |\n  |  Smart printer includes scope analysis\n  |\n  V\nJavascript Code\n")),(0,a.kt)("h2",s({},{id:"design-decisions"}),"Design Decisions"),(0,a.kt)("p",null,"The design of ReScript follows several high-level principles. While those principles might change in the future, they are enforced today and can explain certain technical limitations BS has."),(0,a.kt)("h3",s({},{id:"lambda-representation"}),"Lambda Representation"),(0,a.kt)("p",null,"As pictured in the diagram above, ReScript is primarily based on the Lambda representation of the OCaml compiler. While this representation is quite rich, some information is lost from the upstream representation. The patch to the OCaml compiler tries to enrich this representation in a non-intrusive way (see next section)."),(0,a.kt)("h3",s({},{id:"minimal-patch-to-the-ocaml-compiler"}),"Minimal Patch to the OCaml compiler"),(0,a.kt)("p",null,"ReScript requires patches to the OCaml compiler. One of the main reasons is to enrich the Lambda representation so that the generated code is as nice as possible. A design goal is to keep those patches minimal and useful for the OCaml compiler in general so that they can later be integrated."),(0,a.kt)("h3",s({},{id:"soundness"}),"Soundness"),(0,a.kt)("p",null,"ReScript preserves the soundness of the OCaml language. Assuming the FFI is correctly implemented, the type safety is preserved."),(0,a.kt)("h3",s({},{id:"minimal-new-symbol-creation"}),"Minimal new symbol creation"),(0,a.kt)("p",null,"In order to make the JavaScript generated code as close as possible to the original OCaml core we thrive to introduce as few new symbols as possible."))}l.isMDXComponent=!0,l.frontmatter={__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/reason-compiler/latest/compiler-architecture-principles.mdx"}},1763:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/reason-compiler/latest/compiler-architecture-principles",function(){return n(5870)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=1763,e(e.s=t);var t}));var t=e.O();_N_E=t}]);