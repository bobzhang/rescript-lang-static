(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[49791],{17375:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}n.d(t,{Z:function(){return a}})},54606:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return f}});var a=n(17375),r=n(96156),o=(n(67294),n(3905));function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var l=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",i({},t))}},c=l("Intro"),p=l("CodeTab"),s={};function f(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",i(i(i({},s),n),{},{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",i({},{id:"useref"}),"useRef"),(0,o.kt)(c,{mdxType:"Intro"},(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"useRef")," hooks creates and manages mutable containers inside your React component.")),(0,o.kt)("h2",i({},{id:"usage"}),"Usage"),(0,o.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-res"}),"let refContainer = React.useRef(initialValue);\n")),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-js"}),"  var button = React.useRef(null);\n  React.useRef(0);\n"))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"React.useRef")," returns a mutable ref object whose ",(0,o.kt)("inlineCode",{parentName:"p"},".current")," record field is initialized to the passed argument (",(0,o.kt)("inlineCode",{parentName:"p"},"initialValue"),"). The returned object will persist for the full lifetime of the component."),(0,o.kt)("p",null,"Essentially, a ",(0,o.kt)("inlineCode",{parentName:"p"},"React.ref"),' is like a "box" that can hold a mutable value in its ',(0,o.kt)("inlineCode",{parentName:"p"},".current")," record field."),(0,o.kt)("p",null,"You might be familiar with refs primarily as a way to access the DOM. If you pass a ref object to React with ",(0,o.kt)("inlineCode",{parentName:"p"},"<div ref={ReactDOM.Ref.domRef(myRef)} />"),", React will set its ",(0,o.kt)("inlineCode",{parentName:"p"},".current")," property to the corresponding DOM node whenever that node changes."),(0,o.kt)("p",null,"However, ",(0,o.kt)("inlineCode",{parentName:"p"},"useRef()")," is useful for more than the ref attribute. It's handy for keeping any mutable value around similar to how you\u2019d use instance fields in classes."),(0,o.kt)("p",null,"This works because ",(0,o.kt)("inlineCode",{parentName:"p"},"useRef()")," creates a plain JavaScript object. The only difference between ",(0,o.kt)("inlineCode",{parentName:"p"},"useRef()")," and creating a ",(0,o.kt)("inlineCode",{parentName:"p"},"{current: ...}")," object yourself is that useRef will give you the same ref object on every render."),(0,o.kt)("p",null,"Keep in mind that ",(0,o.kt)("inlineCode",{parentName:"p"},"useRef")," doesn\u2019t notify you when its content changes. Mutating the ",(0,o.kt)("inlineCode",{parentName:"p"},".current")," record field doesn\u2019t cause a re-render. If you want to run some code when React attaches or detaches a ref to a DOM node, you may want to use a ",(0,o.kt)("a",i({parentName:"p"},{href:"./refs-and-the-dom#callback-refs"}),"callback ref")," instead."),(0,o.kt)("p",null,"More infos on direct DOM manipulation can be found in the ",(0,o.kt)("a",i({parentName:"p"},{href:"./refs-and-the-dom"}),"Refs and the DOM")," section."),(0,o.kt)("h2",i({},{id:"examples"}),"Examples"),(0,o.kt)("h3",i({},{id:"managing-focus-for-a-text-input"}),"Managing Focus for a Text Input"),(0,o.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-res"}),'// TextInputWithFocusButton.re\n\n@send external focus: Dom.element => unit = "focus"\n\n@react.component\nlet make = () => {\n  let inputEl = React.useRef(Js.Nullable.null)\n\n  let onClick = _ => {\n    inputEl.current\n    ->Js.Nullable.toOption\n    ->Belt.Option.forEach(input => input->focus)\n  }\n\n  <>\n    <input ref={ReactDOM.Ref.domRef(inputEl)} type_="text" />\n    <button onClick> {React.string("Focus the input")} </button>\n  </>\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-js"}),'function TextInputWithFocusButton(Props) {\n  var inputEl = React.useRef(null);\n  var onClick = function (param) {\n    return Belt_Option.forEach(Caml_option.nullable_to_opt(inputEl.current), (function (input) {\n                  input.focus();\n\n                }));\n  };\n  return React.createElement(React.Fragment, undefined, React.createElement("input", {\n                  ref: inputEl,\n                  type: "text"\n                }), React.createElement("button", {\n                  onClick: onClick\n                }, "Focus the input"));\n}\n'))),(0,o.kt)("h3",i({},{id:"using-a-callback-ref"}),"Using a Callback Ref"),(0,o.kt)("p",null,"Reusing the example from our ",(0,o.kt)("a",i({parentName:"p"},{href:"./refs-and-the-dom#callback-refs"}),"Refs and the DOM")," section:"),(0,o.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-res"}),'// CustomTextInput.re\n\n@send external focus: Dom.element => unit = "focus"\n\n@react.component\nlet make = () => {\n  let textInput = React.useRef(Js.Nullable.null)\n  let setTextInputRef = element => {\n    textInput.current = element;\n  }\n\n  let focusTextInput = _ => {\n    textInput.current\n    ->Js.Nullable.toOption\n    ->Belt.Option.forEach(input => input->focus)\n  }\n\n  <div>\n    <input type_="text" ref={ReactDOM.Ref.callbackDomRef(setTextInputRef)} />\n    <input\n      type_="button" value="Focus the text input" onClick={focusTextInput}\n    />\n  </div>\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-js"}),'function CustomTextInput(Props) {\n  var textInput = React.useRef(null);\n  var setTextInputRef = function (element) {\n    textInput.current = element;\n\n  };\n  var focusTextInput = function (param) {\n    return Belt_Option.forEach(Caml_option.nullable_to_opt(textInput.current), (function (input) {\n                  input.focus();\n\n                }));\n  };\n  return React.createElement("div", undefined, React.createElement("input", {\n                  ref: setTextInputRef,\n                  type: "text"\n                }), React.createElement("input", {\n                  type: "button",\n                  value: "Focus the text input",\n                  onClick: focusTextInput\n                }));\n}\n'))))}f.isMDXComponent=!0,f.frontmatter={title:"useRef Hook",description:"Details about the useRef React hook in ReScript",canonical:"/docs/react/latest/hooks-ref",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/react/latest/hooks-ref.mdx"}},23896:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/react/latest/hooks-ref",function(){return n(54606)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=23896,e(e.s=t);var t}));var t=e.O();_N_E=t}]);