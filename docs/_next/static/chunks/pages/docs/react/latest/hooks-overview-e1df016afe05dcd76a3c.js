(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[31260],{17375:function(e,t,n){"use strict";function o(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}n.d(t,{Z:function(){return o}})},44688:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return k}});var o=n(17375),a=n(96156),r=(n(67294),n(3905));function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){(0,a.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var l=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",i({},t))}},u=l("Intro"),c=l("CodeTab"),p={};function k(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,r.kt)("wrapper",i(i(i({},p),n),{},{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",i({},{id:"hooks-overview"}),"Hooks Overview"),(0,r.kt)(u,{mdxType:"Intro"},(0,r.kt)("p",null,"Hooks are an essential mechanism to introduce and manage state and effects in React components.")),(0,r.kt)("h2",i({},{id:"what-is-a-hook"}),"What is a Hook?"),(0,r.kt)("p",null,"In the previous chapters we learned how React components are just a simple function representing UI based on specific prop values. For an application to be useful we still need a way to manipulate those props interactively either via user input or via requests loading in data from a server."),(0,r.kt)("p",null,"That's were Hooks come in. A Hook is a function that allows us to introduce component state and trigger side-effects for different tasks, such as HTTP requests, direct HTML DOM access, querying window sizes, etc. "),(0,r.kt)("p",null,"In other words: ",(0,r.kt)("strong",{parentName:"p"},'It allows us to "hook into" React features.')),(0,r.kt)("h3",i({},{id:"example-the-usestate-hook"}),"Example: The ",(0,r.kt)("inlineCode",{parentName:"h3"},"useState")," Hook"),(0,r.kt)("p",null,"Just for a quick look, here is an example of a ",(0,r.kt)("inlineCode",{parentName:"p"},"Counter")," component that allows a user to click a button and increment an ",(0,r.kt)("inlineCode",{parentName:"p"},"count")," value that will immediately be rendered on each button click: "),(0,r.kt)(c,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,r.kt)("pre",null,(0,r.kt)("code",i({parentName:"pre"},{className:"language-res"}),'// Counter.re\n@react.component\nlet make = () => {\n  let (count, setCount) = React.useState(_ => 0);\n\n  let onClick = (_evt) => {\n    setCount(prev => prev + 1)\n  };\n\n  let msg = "You clicked" ++ Belt.Int.toString(count) ++  "times"\n\n  <div>\n    <p>{React.string(msg)}</p>\n    <button onClick> {React.string("Click me")} </button>\n  </div>\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",i({parentName:"pre"},{className:"language-js"}),'function Counter(Props) {\n  var match = React.useState(function () {\n        return 0;\n      });\n  var setCount = match[1];\n  var onClick = function (_evt) {\n    return Curry._1(setCount, (function (prev) {\n                  return prev + 1 | 0;\n                }));\n  };\n  var msg = "You clicked" + String(match[0]) + "times";\n  return React.createElement("div", undefined, React.createElement("p", undefined, msg), React.createElement("button", {\n                  onClick: onClick\n                }, "Click me"));\n}\n'))),(0,r.kt)("p",null,"Here we are using the ",(0,r.kt)("inlineCode",{parentName:"p"},"React.useState")," Hook. We call it inside a component function to add some local state to it. React will preserve this state between re-renders. ",(0,r.kt)("inlineCode",{parentName:"p"},"React.useState")," returns a tuple: the current state value (",(0,r.kt)("inlineCode",{parentName:"p"},"count"),") and a function that lets you update it (",(0,r.kt)("inlineCode",{parentName:"p"},"setCount"),"). You can call this function from an event handler or pass it down to other components to call the function. "),(0,r.kt)("p",null,"The only argument to ",(0,r.kt)("inlineCode",{parentName:"p"},"React.useState")," is a function that returns the initial state (",(0,r.kt)("inlineCode",{parentName:"p"},"_ => 0"),"). In the example above, it is 0 because our counter starts from zero. Note that your state can be any type you want and ",(0,r.kt)("inlineCode",{parentName:"p"},"ReScript")," will make sure to infer the types for you (only make sure to return an initial state that matches your type). The initial state argument is only used during the first render."),(0,r.kt)("p",null,"This was just a quick example on our first hook usage. We will go into more detail in a dedicated ",(0,r.kt)("a",i({parentName:"p"},{href:"./hooks-state"}),"useState")," section."),(0,r.kt)("h2",i({},{id:"available-hooks"}),"Available Hooks"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," All hooks are part of the ",(0,r.kt)("inlineCode",{parentName:"p"},"React")," module (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"React.useState"),")."),(0,r.kt)("h3",i({},{id:"basic-hooks"}),"Basic Hooks:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",i({parentName:"li"},{href:"./hooks-state"}),"useState"),": Adds local state to your component"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",i({parentName:"li"},{href:"./hooks-effect"}),"useEffect"),": Runs side-effectual code within your component"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",i({parentName:"li"},{href:"./hooks-context"}),"useContext"),": Gives your component to a React Context value")),(0,r.kt)("h3",i({},{id:"additional-hooks"}),"Additional Hooks:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",i({parentName:"li"},{href:"./hooks-reducer"}),"useReducer"),": An alternative to ",(0,r.kt)("inlineCode",{parentName:"li"},"useState"),". Uses the state / action / reduce pattern."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",i({parentName:"li"},{href:"./hooks-ref"}),"useRef"),": Returns a mutable React-Ref value")),(0,r.kt)("h2",i({},{id:"rules-of-hooks"}),"Rules of Hooks"),(0,r.kt)("p",null,"Hooks are just simple functions, but you need to follow ",(0,r.kt)("em",{parentName:"p"},"two rules")," when using them. ReScript doesn't enforce those rules within the compiler, so if you really want to enforce correct hooks conventions, you can use an ",(0,r.kt)("a",i({parentName:"p"},{href:"https://www.npmjs.com/package/eslint-plugin-react-hooks"}),"eslint-plugin")," to check your compiled JS output."),(0,r.kt)("h3",i({},{id:"rule-1-only-call-hooks-at-the-top-level"}),"Rule 1) Only Call Hooks at the Top Level"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Don\u2019t call Hooks inside loops, conditions, or nested functions.")," Instead, always use Hooks at the top level of your React function. By following this rule, you ensure that Hooks are called in the same order each time a component renders. That\u2019s what allows React to correctly preserve the state of Hooks between multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"useEffect")," calls. (If you\u2019re curious, you can check out the in depth explanation in the ",(0,r.kt)("a",i({parentName:"p"},{href:"https://reactjs.org/docs/hooks-rules.html#explanation"}),"ReactJS Hooks docs"),")"),(0,r.kt)("h3",i({},{id:"rule-2-only-call-hooks-from-react-functions"}),"Rule 2) Only Call Hooks from React Functions"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Don't call Hooks from regular functions.")," Instead, you can:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u2705 Call Hooks from React function components."),(0,r.kt)("li",{parentName:"ul"},"\u2705 Call Hooks from custom Hooks (we\u2019ll learn about them in our ",(0,r.kt)("a",i({parentName:"li"},{href:"./hooks-custom"}),"custom hooks")," section).")),(0,r.kt)("p",null,"By following this rule, you ensure that all stateful logic in a component is clearly visible from its source code."))}k.isMDXComponent=!0,k.frontmatter={title:"Hooks & State Management Overview",description:"Overview state management and hooks in ReScript and React",canonical:"/docs/react/latest/hooks-overview",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/react/latest/hooks-overview.mdx"}},29804:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/react/latest/hooks-overview",function(){return n(44688)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=29804,e(e.s=t);var t}));var t=e.O();_N_E=t}]);