(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[27885],{17375:function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}n.d(t,{Z:function(){return r}})},16048:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return c}});var r=n(17375),a=n(96156),o=(n(67294),n(3905));function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){(0,a.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var l,d=(l="Intro",function(e){return console.warn("Component "+l+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",s({},e))}),p={};function c(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",s(s(s({},p),n),{},{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",s({},{id:"arrays-and-keys"}),"Arrays and Keys"),(0,o.kt)(d,{mdxType:"Intro"},(0,o.kt)("p",null,"Whenever we are transforming data into an array of elements and put it in our React tree, we need to make sure to give every element an unique identifier to help React distinguish elements for each render. This page will explain the ",(0,o.kt)("inlineCode",{parentName:"p"},"key")," attribute and how to apply it whenever we need to map data to ",(0,o.kt)("inlineCode",{parentName:"p"},"React.element"),"s.")),(0,o.kt)("h2",s({},{id:"keys--rendering-arrays"}),"Keys & Rendering Arrays"),(0,o.kt)("p",null,"Keys help React identify which elements have been changed, added, or removed throughout each render. Keys should be given to elements inside the array to give the elements a stable identity:"),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-res"}),"let numbers = [1, 2, 3, 4, 5];\n\nlet items = Belt.Array.map(numbers, (number) => {\n  <li key={Belt.Int.toString(number)}> {React.int(number)} </li>\n})\n")),(0,o.kt)("p",null,"The best way to pick a key is to use a string that uniquely identifies a list item among its siblings. Most often you would use IDs from your data as keys:"),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-res"}),'type todo = {id: string, text: string}\n\nlet todos = [\n  {id: "todo1", text: "Todo 1"},\n  {id: "todo2", text: "Todo 2"}\n]\n\nlet items = Belt.Array.map(todos, todo => {\n  <li key={todo.id}> {React.string(todo.text)} </li>\n})\n')),(0,o.kt)("p",null,"If you don\u2019t have stable IDs for rendered items, you may use the item index as a key as a last resort:"),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"{1..3}","{1..3}":!0}),"let items = Belt.Array.mapWithIndex(todos, (i, todo) => {\n  // Only do this if items have no stable id\n  <li key={Belt.Int.toString(i)}>\n    {todo.text}\n  </li>\n});\n")),(0,o.kt)("h3",s({},{id:"keys-must-only-be-unique-among-siblings"}),"Keys Must Only Be Unique Among Siblings"),(0,o.kt)("p",null,"Keys used within arrays should be unique among their siblings. However they don\u2019t need to be globally unique. We can use the same keys when we produce two different arrays:"),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"{6,10,17,18,25,27}","{6,10,17,18,25,27}":!0}),'type post = {id: string, title: string, content: string}\n\nmodule Blog = {\n  @react.component\n  let make = (~posts: array<post>) => {\n    let sidebar =\n      <ul>\n        {\n          Belt.Array.map(posts, (post) => {\n            <li key={post.id}>\n              {React.string(post.title)}\n            </li>\n          })->React.array\n        }\n      </ul>\n\n    let content = Belt.Array.map(posts, (post) => {\n        <div key={post.id}>\n          <h3>{React.string(post.title)}</h3>\n          <p>{React.string(post.content)}</p>\n        </div>\n    });\n      \n      <div>\n      {sidebar}\n      <hr />\n      {React.array(content)}\n    </div>\n  }\n}\n\nlet posts = [\n  {id: "1", title: "Hello World", content: "Welcome to learning ReScript & React!"},\n  {id: "2", title: "Installation", content: "You can install reason-react from npm."}\n]\n\nlet blog = <Blog posts/>\n')),(0,o.kt)("h2",s({},{id:"rendering-list-values"}),"Rendering ",(0,o.kt)("inlineCode",{parentName:"h2"},"list")," Values"),(0,o.kt)("p",null,"In case you ever want to render a ",(0,o.kt)("inlineCode",{parentName:"p"},"list")," of items, you can do something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-res"}),'type todo = {id: string, text: string}\nlet todoList = list{\n  {id: "todo1", text: "Todo 1"},\n  {id: "todo2", text: "Todo 2"}\n}\n\nlet items =\n  todoList\n  ->Belt.List.toArray\n  ->Belt.List.map((todo) => {\n  <li key={todo.id}>\n    {React.string(todo.text)}\n  </li>\n})\n\n<div> {React.array(items)} </div>\n')),(0,o.kt)("p",null,"We use ",(0,o.kt)("inlineCode",{parentName:"p"},"Belt.List.toArray")," to convert our list to an array before creating our ",(0,o.kt)("inlineCode",{parentName:"p"},"array<React.element>"),". Please note that using ",(0,o.kt)("inlineCode",{parentName:"p"},"list")," has performance impact due to extra conversion costs."),(0,o.kt)("p",null,"In 99% you'll want to use arrays (seamless interop, faster JS code), but in some cases it might make sense to use a ",(0,o.kt)("inlineCode",{parentName:"p"},"list")," to leverage advanced pattern matching features etc."))}c.isMDXComponent=!0,c.frontmatter={title:"Arrays and Keys",description:"Rendering arrays and handling keys in ReScript and React",canonical:"/docs/react/latest/arrays-and-keys",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/react/latest/arrays-and-keys.mdx"}},37949:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/react/latest/arrays-and-keys",function(){return n(16048)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=37949,e(e.s=t);var t}));var t=e.O();_N_E=t}]);