(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[67023],{17375:function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}n.d(t,{Z:function(){return r}})},45429:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return d}});var r=n(17375),a=n(96156),o=(n(67294),n(3905));function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){(0,a.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var c=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",l({},t))}},s=c("Intro"),p=c("CodeTab"),u={};function d(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",l(l(l({},u),n),{},{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",l({},{id:"rendering-elements"}),"Rendering Elements"),(0,o.kt)(s,{mdxType:"Intro"},(0,o.kt)("p",null,"In our previous section ",(0,o.kt)("a",l({parentName:"p"},{href:"./elements-and-jsx"}),"React Elements & JSX")," we learned how to create and handle React elements. In this section we will learn how to put our elements into action by rendering them into the DOM.")),(0,o.kt)("p",null,"As we mentioned before, a ",(0,o.kt)("inlineCode",{parentName:"p"},"React.element")," describes what you see on the screen:"),(0,o.kt)("pre",null,(0,o.kt)("code",l({parentName:"pre"},{className:"language-res"}),'let element = <h1> {React.string("Hello World")} </h1>\n')),(0,o.kt)("p",null,"Unlike browser DOM elements, React elements are plain objects, and are cheap to create. React DOM takes care of updating the DOM to match the React elements."),(0,o.kt)("h2",l({},{id:"rendering-elements-to-the-dom"}),"Rendering Elements to the DOM"),(0,o.kt)("p",null,"Let's assume we've got an HTML file that contains a ",(0,o.kt)("inlineCode",{parentName:"p"},"div")," like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",l({parentName:"pre"},{className:"language-html"}),'<div id="root"/>\n')),(0,o.kt)("p",null,"We call this a \u201croot\u201d DOM node because everything inside it will be managed by React DOM."),(0,o.kt)("p",null,"Plain React applications usually have a single root DOM node. If you are integrating React into an existing app, you may have as many isolated root DOM nodes as you like."),(0,o.kt)("p",null,"To render our React application into the ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," div, we need to do two things:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Find our DOM node with ",(0,o.kt)("inlineCode",{parentName:"li"},"ReactDOM.querySelector")),(0,o.kt)("li",{parentName:"ul"},"Render our React element to our queried ",(0,o.kt)("inlineCode",{parentName:"li"},"Dom.element")," with ",(0,o.kt)("inlineCode",{parentName:"li"},"ReactDOM.render"))),(0,o.kt)("p",null,"Here is a full example rendering our application in our ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," div:"),(0,o.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",l({parentName:"pre"},{className:"language-res"}),'// Dom access can actually fail. ReScript\n// is really explicit about handling edge cases!\nswitch(ReactDOM.querySelector("#root")){\n| Some(root) => ReactDOM.render(<div> {React.string("Hello Andrea")} </div>, root)\n| None => () // do nothing\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",l({parentName:"pre"},{className:"language-js"}),'var root = document.querySelector("#root");\n\nif (!(root == null)) {\n  ReactDom.render(React.createElement("div", undefined, "Hello Andrea"), root);\n}\n'))),(0,o.kt)("p",null,"React elements are immutable. Once you create an element, you can\u2019t change its children or attributes. An element is like a single frame in a movie: it represents the UI at a certain point in time."),(0,o.kt)("p",null,"At this point we would need to understand a few more concepts, such as React components and state management to be able to update the rendered elements after the initial ",(0,o.kt)("inlineCode",{parentName:"p"},"ReactDOM.render"),". For now, just imagine your React application as a tree of elements, whereby some elements may get replaced during the lifetime of your application."),(0,o.kt)("p",null,"React will automatically recognize any element changes and will only apply the DOM updates necessary to bring the DOM to the desired state."))}d.isMDXComponent=!0,d.frontmatter={title:"Rendering Elements",description:"How to render React elements to the DOM",canonical:"/docs/react/latest/rendering-elements",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs/react/latest/rendering-elements.mdx"}},44030:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/react/latest/rendering-elements",function(){return n(45429)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=44030,e(e.s=t);var t}));var t=e.O();_N_E=t}]);